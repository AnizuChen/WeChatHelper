// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetA8KeyResp.proto

#ifndef PROTOBUF_GetA8KeyResp_2eproto__INCLUDED
#define PROTOBUF_GetA8KeyResp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BaseResponse.pb.h"
#include "JSAPIPermissionBitSet.pb.h"
#include "GeneralControlBitSet.pb.h"
#include "BizScopeInfo.pb.h"
#include "DeepLinkBitSet.pb.h"
#include "SKBuiltinBuffer_t.pb.h"
#include "HTTPHeader.pb.h"
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BizScopeInfo;
class BizScopeInfoDefaultTypeInternal;
extern BizScopeInfoDefaultTypeInternal _BizScopeInfo_default_instance_;
class DeepLinkBitSet;
class DeepLinkBitSetDefaultTypeInternal;
extern DeepLinkBitSetDefaultTypeInternal _DeepLinkBitSet_default_instance_;
class GeneralControlBitSet;
class GeneralControlBitSetDefaultTypeInternal;
extern GeneralControlBitSetDefaultTypeInternal _GeneralControlBitSet_default_instance_;
class GetA8KeyResp;
class GetA8KeyRespDefaultTypeInternal;
extern GetA8KeyRespDefaultTypeInternal _GetA8KeyResp_default_instance_;
class HTTPHeader;
class HTTPHeaderDefaultTypeInternal;
extern HTTPHeaderDefaultTypeInternal _HTTPHeader_default_instance_;
class JSAPIPermissionBitSet;
class JSAPIPermissionBitSetDefaultTypeInternal;
extern JSAPIPermissionBitSetDefaultTypeInternal _JSAPIPermissionBitSet_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_GetA8KeyResp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_GetA8KeyResp_2eproto

// ===================================================================

class GetA8KeyResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.GetA8KeyResp) */ {
 public:
  GetA8KeyResp();
  virtual ~GetA8KeyResp();

  GetA8KeyResp(const GetA8KeyResp& from);

  inline GetA8KeyResp& operator=(const GetA8KeyResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetA8KeyResp& default_instance();

  static inline const GetA8KeyResp* internal_default_instance() {
    return reinterpret_cast<const GetA8KeyResp*>(
               &_GetA8KeyResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetA8KeyResp* other);

  // implements Message ----------------------------------------------

  inline GetA8KeyResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetA8KeyResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetA8KeyResp& from);
  void MergeFrom(const GetA8KeyResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetA8KeyResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
  int _scopelist_size() const;
  void clear__scopelist();
  static const int kScopeListFieldNumber = 17;
  const ::MMPro::micromsg::BizScopeInfo& _scopelist(int index) const;
  ::MMPro::micromsg::BizScopeInfo* mutable__scopelist(int index);
  ::MMPro::micromsg::BizScopeInfo* add__scopelist();
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >*
      mutable__scopelist();
  const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >&
      _scopelist() const;

  // repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
  int _httpheader_size() const;
  void clear__httpheader();
  static const int kHttpHeaderFieldNumber = 25;
  const ::MMPro::micromsg::HTTPHeader& _httpheader(int index) const;
  ::MMPro::micromsg::HTTPHeader* mutable__httpheader(int index);
  ::MMPro::micromsg::HTTPHeader* add__httpheader();
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >*
      mutable__httpheader();
  const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >&
      _httpheader() const;

  // optional string _FullURL = 2;
  bool has__fullurl() const;
  void clear__fullurl();
  static const int kFullURLFieldNumber = 2;
  const ::std::string& _fullurl() const;
  void set__fullurl(const ::std::string& value);
  #if LANG_CXX11
  void set__fullurl(::std::string&& value);
  #endif
  void set__fullurl(const char* value);
  void set__fullurl(const char* value, size_t size);
  ::std::string* mutable__fullurl();
  ::std::string* release__fullurl();
  void set_allocated__fullurl(::std::string* _fullurl);

  // optional string _A8Key = 3;
  bool has__a8key() const;
  void clear__a8key();
  static const int kA8KeyFieldNumber = 3;
  const ::std::string& _a8key() const;
  void set__a8key(const ::std::string& value);
  #if LANG_CXX11
  void set__a8key(::std::string&& value);
  #endif
  void set__a8key(const char* value);
  void set__a8key(const char* value, size_t size);
  ::std::string* mutable__a8key();
  ::std::string* release__a8key();
  void set_allocated__a8key(::std::string* _a8key);

  // optional string _Title = 5;
  bool has__title() const;
  void clear__title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& _title() const;
  void set__title(const ::std::string& value);
  #if LANG_CXX11
  void set__title(::std::string&& value);
  #endif
  void set__title(const char* value);
  void set__title(const char* value, size_t size);
  ::std::string* mutable__title();
  ::std::string* release__title();
  void set_allocated__title(::std::string* _title);

  // optional string _Content = 6;
  bool has__content() const;
  void clear__content();
  static const int kContentFieldNumber = 6;
  const ::std::string& _content() const;
  void set__content(const ::std::string& value);
  #if LANG_CXX11
  void set__content(::std::string&& value);
  #endif
  void set__content(const char* value);
  void set__content(const char* value, size_t size);
  ::std::string* mutable__content();
  ::std::string* release__content();
  void set_allocated__content(::std::string* _content);

  // optional string _UserName = 9;
  bool has__username() const;
  void clear__username();
  static const int kUserNameFieldNumber = 9;
  const ::std::string& _username() const;
  void set__username(const ::std::string& value);
  #if LANG_CXX11
  void set__username(::std::string&& value);
  #endif
  void set__username(const char* value);
  void set__username(const char* value, size_t size);
  ::std::string* mutable__username();
  ::std::string* release__username();
  void set_allocated__username(::std::string* _username);

  // optional string _ShareURL = 15;
  bool has__shareurl() const;
  void clear__shareurl();
  static const int kShareURLFieldNumber = 15;
  const ::std::string& _shareurl() const;
  void set__shareurl(const ::std::string& value);
  #if LANG_CXX11
  void set__shareurl(::std::string&& value);
  #endif
  void set__shareurl(const char* value);
  void set__shareurl(const char* value, size_t size);
  ::std::string* mutable__shareurl();
  ::std::string* release__shareurl();
  void set_allocated__shareurl(::std::string* _shareurl);

  // optional string _AntispamTicket = 18;
  bool has__antispamticket() const;
  void clear__antispamticket();
  static const int kAntispamTicketFieldNumber = 18;
  const ::std::string& _antispamticket() const;
  void set__antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set__antispamticket(::std::string&& value);
  #endif
  void set__antispamticket(const char* value);
  void set__antispamticket(const char* value, size_t size);
  ::std::string* mutable__antispamticket();
  ::std::string* release__antispamticket();
  void set_allocated__antispamticket(::std::string* _antispamticket);

  // optional string _SSID = 20;
  bool has__ssid() const;
  void clear__ssid();
  static const int kSSIDFieldNumber = 20;
  const ::std::string& _ssid() const;
  void set__ssid(const ::std::string& value);
  #if LANG_CXX11
  void set__ssid(::std::string&& value);
  #endif
  void set__ssid(const char* value);
  void set__ssid(const char* value, size_t size);
  ::std::string* mutable__ssid();
  ::std::string* release__ssid();
  void set_allocated__ssid(::std::string* _ssid);

  // optional string _MID = 21;
  bool has__mid() const;
  void clear__mid();
  static const int kMIDFieldNumber = 21;
  const ::std::string& _mid() const;
  void set__mid(const ::std::string& value);
  #if LANG_CXX11
  void set__mid(::std::string&& value);
  #endif
  void set__mid(const char* value);
  void set__mid(const char* value, size_t size);
  ::std::string* mutable__mid();
  ::std::string* release__mid();
  void set_allocated__mid(::std::string* _mid);

  // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
  bool has__baseresponse() const;
  void clear__baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::MMPro::micromsg::BaseResponse& _baseresponse() const;
  ::MMPro::micromsg::BaseResponse* mutable__baseresponse();
  ::MMPro::micromsg::BaseResponse* release__baseresponse();
  void set_allocated__baseresponse(::MMPro::micromsg::BaseResponse* _baseresponse);

  // optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
  bool has__jsapipermission() const;
  void clear__jsapipermission();
  static const int kJSAPIPermissionFieldNumber = 7;
  const ::MMPro::micromsg::JSAPIPermissionBitSet& _jsapipermission() const;
  ::MMPro::micromsg::JSAPIPermissionBitSet* mutable__jsapipermission();
  ::MMPro::micromsg::JSAPIPermissionBitSet* release__jsapipermission();
  void set_allocated__jsapipermission(::MMPro::micromsg::JSAPIPermissionBitSet* _jsapipermission);

  // optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
  bool has__generalcontrolbitset() const;
  void clear__generalcontrolbitset();
  static const int kGeneralControlBitSetFieldNumber = 8;
  const ::MMPro::micromsg::GeneralControlBitSet& _generalcontrolbitset() const;
  ::MMPro::micromsg::GeneralControlBitSet* mutable__generalcontrolbitset();
  ::MMPro::micromsg::GeneralControlBitSet* release__generalcontrolbitset();
  void set_allocated__generalcontrolbitset(::MMPro::micromsg::GeneralControlBitSet* _generalcontrolbitset);

  // optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
  bool has__deeplinkbitset() const;
  void clear__deeplinkbitset();
  static const int kDeepLinkBitSetFieldNumber = 22;
  const ::MMPro::micromsg::DeepLinkBitSet& _deeplinkbitset() const;
  ::MMPro::micromsg::DeepLinkBitSet* mutable__deeplinkbitset();
  ::MMPro::micromsg::DeepLinkBitSet* release__deeplinkbitset();
  void set_allocated__deeplinkbitset(::MMPro::micromsg::DeepLinkBitSet* _deeplinkbitset);

  // optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
  bool has__jsapicontrolbytes() const;
  void clear__jsapicontrolbytes();
  static const int kJSAPIControlBytesFieldNumber = 23;
  const ::MMPro::micromsg::SKBuiltinBuffer_t& _jsapicontrolbytes() const;
  ::MMPro::micromsg::SKBuiltinBuffer_t* mutable__jsapicontrolbytes();
  ::MMPro::micromsg::SKBuiltinBuffer_t* release__jsapicontrolbytes();
  void set_allocated__jsapicontrolbytes(::MMPro::micromsg::SKBuiltinBuffer_t* _jsapicontrolbytes);

  // optional uint32 _ActionCode = 4;
  bool has__actioncode() const;
  void clear__actioncode();
  static const int kActionCodeFieldNumber = 4;
  ::google::protobuf::uint32 _actioncode() const;
  void set__actioncode(::google::protobuf::uint32 value);

  // optional uint32 _ScopeCount = 16;
  bool has__scopecount() const;
  void clear__scopecount();
  static const int kScopeCountFieldNumber = 16;
  ::google::protobuf::uint32 _scopecount() const;
  void set__scopecount(::google::protobuf::uint32 value);

  // optional int32 _HttpHeaderNumb = 24;
  bool has__httpheadernumb() const;
  void clear__httpheadernumb();
  static const int kHttpHeaderNumbFieldNumber = 24;
  ::google::protobuf::int32 _httpheadernumb() const;
  void set__httpheadernumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.GetA8KeyResp)
 private:
  void set_has__baseresponse();
  void clear_has__baseresponse();
  void set_has__fullurl();
  void clear_has__fullurl();
  void set_has__a8key();
  void clear_has__a8key();
  void set_has__actioncode();
  void clear_has__actioncode();
  void set_has__title();
  void clear_has__title();
  void set_has__content();
  void clear_has__content();
  void set_has__jsapipermission();
  void clear_has__jsapipermission();
  void set_has__generalcontrolbitset();
  void clear_has__generalcontrolbitset();
  void set_has__username();
  void clear_has__username();
  void set_has__shareurl();
  void clear_has__shareurl();
  void set_has__scopecount();
  void clear_has__scopecount();
  void set_has__antispamticket();
  void clear_has__antispamticket();
  void set_has__ssid();
  void clear_has__ssid();
  void set_has__mid();
  void clear_has__mid();
  void set_has__deeplinkbitset();
  void clear_has__deeplinkbitset();
  void set_has__jsapicontrolbytes();
  void clear_has__jsapicontrolbytes();
  void set_has__httpheadernumb();
  void clear_has__httpheadernumb();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo > _scopelist_;
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader > _httpheader_;
  ::google::protobuf::internal::ArenaStringPtr _fullurl_;
  ::google::protobuf::internal::ArenaStringPtr _a8key_;
  ::google::protobuf::internal::ArenaStringPtr _title_;
  ::google::protobuf::internal::ArenaStringPtr _content_;
  ::google::protobuf::internal::ArenaStringPtr _username_;
  ::google::protobuf::internal::ArenaStringPtr _shareurl_;
  ::google::protobuf::internal::ArenaStringPtr _antispamticket_;
  ::google::protobuf::internal::ArenaStringPtr _ssid_;
  ::google::protobuf::internal::ArenaStringPtr _mid_;
  ::MMPro::micromsg::BaseResponse* _baseresponse_;
  ::MMPro::micromsg::JSAPIPermissionBitSet* _jsapipermission_;
  ::MMPro::micromsg::GeneralControlBitSet* _generalcontrolbitset_;
  ::MMPro::micromsg::DeepLinkBitSet* _deeplinkbitset_;
  ::MMPro::micromsg::SKBuiltinBuffer_t* _jsapicontrolbytes_;
  ::google::protobuf::uint32 _actioncode_;
  ::google::protobuf::uint32 _scopecount_;
  ::google::protobuf::int32 _httpheadernumb_;
  friend struct protobuf_GetA8KeyResp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetA8KeyResp

// required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
inline bool GetA8KeyResp::has__baseresponse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetA8KeyResp::set_has__baseresponse() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetA8KeyResp::clear_has__baseresponse() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetA8KeyResp::clear__baseresponse() {
  if (_baseresponse_ != NULL) _baseresponse_->::MMPro::micromsg::BaseResponse::Clear();
  clear_has__baseresponse();
}
inline const ::MMPro::micromsg::BaseResponse& GetA8KeyResp::_baseresponse() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  return _baseresponse_ != NULL ? *_baseresponse_
                         : *::MMPro::micromsg::BaseResponse::internal_default_instance();
}
inline ::MMPro::micromsg::BaseResponse* GetA8KeyResp::mutable__baseresponse() {
  set_has__baseresponse();
  if (_baseresponse_ == NULL) {
    _baseresponse_ = new ::MMPro::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  return _baseresponse_;
}
inline ::MMPro::micromsg::BaseResponse* GetA8KeyResp::release__baseresponse() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  clear_has__baseresponse();
  ::MMPro::micromsg::BaseResponse* temp = _baseresponse_;
  _baseresponse_ = NULL;
  return temp;
}
inline void GetA8KeyResp::set_allocated__baseresponse(::MMPro::micromsg::BaseResponse* _baseresponse) {
  delete _baseresponse_;
  _baseresponse_ = _baseresponse;
  if (_baseresponse) {
    set_has__baseresponse();
  } else {
    clear_has__baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._BaseResponse)
}

// optional string _FullURL = 2;
inline bool GetA8KeyResp::has__fullurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetA8KeyResp::set_has__fullurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetA8KeyResp::clear_has__fullurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetA8KeyResp::clear__fullurl() {
  _fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__fullurl();
}
inline const ::std::string& GetA8KeyResp::_fullurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._FullURL)
  return _fullurl_.GetNoArena();
}
inline void GetA8KeyResp::set__fullurl(const ::std::string& value) {
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._FullURL)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__fullurl(::std::string&& value) {
  set_has__fullurl();
  _fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._FullURL)
}
#endif
inline void GetA8KeyResp::set__fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._FullURL)
}
inline void GetA8KeyResp::set__fullurl(const char* value, size_t size) {
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._FullURL)
}
inline ::std::string* GetA8KeyResp::mutable__fullurl() {
  set_has__fullurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._FullURL)
  return _fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__fullurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._FullURL)
  clear_has__fullurl();
  return _fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__fullurl(::std::string* _fullurl) {
  if (_fullurl != NULL) {
    set_has__fullurl();
  } else {
    clear_has__fullurl();
  }
  _fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _fullurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._FullURL)
}

// optional string _A8Key = 3;
inline bool GetA8KeyResp::has__a8key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetA8KeyResp::set_has__a8key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetA8KeyResp::clear_has__a8key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetA8KeyResp::clear__a8key() {
  _a8key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__a8key();
}
inline const ::std::string& GetA8KeyResp::_a8key() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._A8Key)
  return _a8key_.GetNoArena();
}
inline void GetA8KeyResp::set__a8key(const ::std::string& value) {
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._A8Key)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__a8key(::std::string&& value) {
  set_has__a8key();
  _a8key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._A8Key)
}
#endif
inline void GetA8KeyResp::set__a8key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._A8Key)
}
inline void GetA8KeyResp::set__a8key(const char* value, size_t size) {
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._A8Key)
}
inline ::std::string* GetA8KeyResp::mutable__a8key() {
  set_has__a8key();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._A8Key)
  return _a8key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__a8key() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._A8Key)
  clear_has__a8key();
  return _a8key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__a8key(::std::string* _a8key) {
  if (_a8key != NULL) {
    set_has__a8key();
  } else {
    clear_has__a8key();
  }
  _a8key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _a8key);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._A8Key)
}

// optional uint32 _ActionCode = 4;
inline bool GetA8KeyResp::has__actioncode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetA8KeyResp::set_has__actioncode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetA8KeyResp::clear_has__actioncode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetA8KeyResp::clear__actioncode() {
  _actioncode_ = 0u;
  clear_has__actioncode();
}
inline ::google::protobuf::uint32 GetA8KeyResp::_actioncode() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ActionCode)
  return _actioncode_;
}
inline void GetA8KeyResp::set__actioncode(::google::protobuf::uint32 value) {
  set_has__actioncode();
  _actioncode_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ActionCode)
}

// optional string _Title = 5;
inline bool GetA8KeyResp::has__title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetA8KeyResp::set_has__title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetA8KeyResp::clear_has__title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetA8KeyResp::clear__title() {
  _title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__title();
}
inline const ::std::string& GetA8KeyResp::_title() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._Title)
  return _title_.GetNoArena();
}
inline void GetA8KeyResp::set__title(const ::std::string& value) {
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._Title)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__title(::std::string&& value) {
  set_has__title();
  _title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._Title)
}
#endif
inline void GetA8KeyResp::set__title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._Title)
}
inline void GetA8KeyResp::set__title(const char* value, size_t size) {
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._Title)
}
inline ::std::string* GetA8KeyResp::mutable__title() {
  set_has__title();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._Title)
  return _title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__title() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._Title)
  clear_has__title();
  return _title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__title(::std::string* _title) {
  if (_title != NULL) {
    set_has__title();
  } else {
    clear_has__title();
  }
  _title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _title);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._Title)
}

// optional string _Content = 6;
inline bool GetA8KeyResp::has__content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetA8KeyResp::set_has__content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetA8KeyResp::clear_has__content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetA8KeyResp::clear__content() {
  _content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__content();
}
inline const ::std::string& GetA8KeyResp::_content() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._Content)
  return _content_.GetNoArena();
}
inline void GetA8KeyResp::set__content(const ::std::string& value) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._Content)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__content(::std::string&& value) {
  set_has__content();
  _content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._Content)
}
#endif
inline void GetA8KeyResp::set__content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._Content)
}
inline void GetA8KeyResp::set__content(const char* value, size_t size) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._Content)
}
inline ::std::string* GetA8KeyResp::mutable__content() {
  set_has__content();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._Content)
  return _content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__content() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._Content)
  clear_has__content();
  return _content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__content(::std::string* _content) {
  if (_content != NULL) {
    set_has__content();
  } else {
    clear_has__content();
  }
  _content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _content);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._Content)
}

// optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
inline bool GetA8KeyResp::has__jsapipermission() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetA8KeyResp::set_has__jsapipermission() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetA8KeyResp::clear_has__jsapipermission() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetA8KeyResp::clear__jsapipermission() {
  if (_jsapipermission_ != NULL) _jsapipermission_->::MMPro::micromsg::JSAPIPermissionBitSet::Clear();
  clear_has__jsapipermission();
}
inline const ::MMPro::micromsg::JSAPIPermissionBitSet& GetA8KeyResp::_jsapipermission() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  return _jsapipermission_ != NULL ? *_jsapipermission_
                         : *::MMPro::micromsg::JSAPIPermissionBitSet::internal_default_instance();
}
inline ::MMPro::micromsg::JSAPIPermissionBitSet* GetA8KeyResp::mutable__jsapipermission() {
  set_has__jsapipermission();
  if (_jsapipermission_ == NULL) {
    _jsapipermission_ = new ::MMPro::micromsg::JSAPIPermissionBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  return _jsapipermission_;
}
inline ::MMPro::micromsg::JSAPIPermissionBitSet* GetA8KeyResp::release__jsapipermission() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  clear_has__jsapipermission();
  ::MMPro::micromsg::JSAPIPermissionBitSet* temp = _jsapipermission_;
  _jsapipermission_ = NULL;
  return temp;
}
inline void GetA8KeyResp::set_allocated__jsapipermission(::MMPro::micromsg::JSAPIPermissionBitSet* _jsapipermission) {
  delete _jsapipermission_;
  _jsapipermission_ = _jsapipermission;
  if (_jsapipermission) {
    set_has__jsapipermission();
  } else {
    clear_has__jsapipermission();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
}

// optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
inline bool GetA8KeyResp::has__generalcontrolbitset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetA8KeyResp::set_has__generalcontrolbitset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetA8KeyResp::clear_has__generalcontrolbitset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetA8KeyResp::clear__generalcontrolbitset() {
  if (_generalcontrolbitset_ != NULL) _generalcontrolbitset_->::MMPro::micromsg::GeneralControlBitSet::Clear();
  clear_has__generalcontrolbitset();
}
inline const ::MMPro::micromsg::GeneralControlBitSet& GetA8KeyResp::_generalcontrolbitset() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  return _generalcontrolbitset_ != NULL ? *_generalcontrolbitset_
                         : *::MMPro::micromsg::GeneralControlBitSet::internal_default_instance();
}
inline ::MMPro::micromsg::GeneralControlBitSet* GetA8KeyResp::mutable__generalcontrolbitset() {
  set_has__generalcontrolbitset();
  if (_generalcontrolbitset_ == NULL) {
    _generalcontrolbitset_ = new ::MMPro::micromsg::GeneralControlBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  return _generalcontrolbitset_;
}
inline ::MMPro::micromsg::GeneralControlBitSet* GetA8KeyResp::release__generalcontrolbitset() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  clear_has__generalcontrolbitset();
  ::MMPro::micromsg::GeneralControlBitSet* temp = _generalcontrolbitset_;
  _generalcontrolbitset_ = NULL;
  return temp;
}
inline void GetA8KeyResp::set_allocated__generalcontrolbitset(::MMPro::micromsg::GeneralControlBitSet* _generalcontrolbitset) {
  delete _generalcontrolbitset_;
  _generalcontrolbitset_ = _generalcontrolbitset;
  if (_generalcontrolbitset) {
    set_has__generalcontrolbitset();
  } else {
    clear_has__generalcontrolbitset();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
}

// optional string _UserName = 9;
inline bool GetA8KeyResp::has__username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetA8KeyResp::set_has__username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetA8KeyResp::clear_has__username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetA8KeyResp::clear__username() {
  _username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__username();
}
inline const ::std::string& GetA8KeyResp::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._UserName)
  return _username_.GetNoArena();
}
inline void GetA8KeyResp::set__username(const ::std::string& value) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._UserName)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__username(::std::string&& value) {
  set_has__username();
  _username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._UserName)
}
#endif
inline void GetA8KeyResp::set__username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._UserName)
}
inline void GetA8KeyResp::set__username(const char* value, size_t size) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._UserName)
}
inline ::std::string* GetA8KeyResp::mutable__username() {
  set_has__username();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._UserName)
  return _username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._UserName)
  clear_has__username();
  return _username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__username(::std::string* _username) {
  if (_username != NULL) {
    set_has__username();
  } else {
    clear_has__username();
  }
  _username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _username);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._UserName)
}

// optional string _ShareURL = 15;
inline bool GetA8KeyResp::has__shareurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetA8KeyResp::set_has__shareurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetA8KeyResp::clear_has__shareurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetA8KeyResp::clear__shareurl() {
  _shareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__shareurl();
}
inline const ::std::string& GetA8KeyResp::_shareurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ShareURL)
  return _shareurl_.GetNoArena();
}
inline void GetA8KeyResp::set__shareurl(const ::std::string& value) {
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__shareurl(::std::string&& value) {
  set_has__shareurl();
  _shareurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
#endif
inline void GetA8KeyResp::set__shareurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
inline void GetA8KeyResp::set__shareurl(const char* value, size_t size) {
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
inline ::std::string* GetA8KeyResp::mutable__shareurl() {
  set_has__shareurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._ShareURL)
  return _shareurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__shareurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._ShareURL)
  clear_has__shareurl();
  return _shareurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__shareurl(::std::string* _shareurl) {
  if (_shareurl != NULL) {
    set_has__shareurl();
  } else {
    clear_has__shareurl();
  }
  _shareurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _shareurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._ShareURL)
}

// optional uint32 _ScopeCount = 16;
inline bool GetA8KeyResp::has__scopecount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GetA8KeyResp::set_has__scopecount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GetA8KeyResp::clear_has__scopecount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GetA8KeyResp::clear__scopecount() {
  _scopecount_ = 0u;
  clear_has__scopecount();
}
inline ::google::protobuf::uint32 GetA8KeyResp::_scopecount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ScopeCount)
  return _scopecount_;
}
inline void GetA8KeyResp::set__scopecount(::google::protobuf::uint32 value) {
  set_has__scopecount();
  _scopecount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ScopeCount)
}

// repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
inline int GetA8KeyResp::_scopelist_size() const {
  return _scopelist_.size();
}
inline void GetA8KeyResp::clear__scopelist() {
  _scopelist_.Clear();
}
inline const ::MMPro::micromsg::BizScopeInfo& GetA8KeyResp::_scopelist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Get(index);
}
inline ::MMPro::micromsg::BizScopeInfo* GetA8KeyResp::mutable__scopelist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Mutable(index);
}
inline ::MMPro::micromsg::BizScopeInfo* GetA8KeyResp::add__scopelist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >*
GetA8KeyResp::mutable__scopelist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return &_scopelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >&
GetA8KeyResp::_scopelist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_;
}

// optional string _AntispamTicket = 18;
inline bool GetA8KeyResp::has__antispamticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetA8KeyResp::set_has__antispamticket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetA8KeyResp::clear_has__antispamticket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetA8KeyResp::clear__antispamticket() {
  _antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__antispamticket();
}
inline const ::std::string& GetA8KeyResp::_antispamticket() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  return _antispamticket_.GetNoArena();
}
inline void GetA8KeyResp::set__antispamticket(const ::std::string& value) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__antispamticket(::std::string&& value) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
#endif
inline void GetA8KeyResp::set__antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
inline void GetA8KeyResp::set__antispamticket(const char* value, size_t size) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
inline ::std::string* GetA8KeyResp::mutable__antispamticket() {
  set_has__antispamticket();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  return _antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__antispamticket() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  clear_has__antispamticket();
  return _antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__antispamticket(::std::string* _antispamticket) {
  if (_antispamticket != NULL) {
    set_has__antispamticket();
  } else {
    clear_has__antispamticket();
  }
  _antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _antispamticket);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}

// optional string _SSID = 20;
inline bool GetA8KeyResp::has__ssid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetA8KeyResp::set_has__ssid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetA8KeyResp::clear_has__ssid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetA8KeyResp::clear__ssid() {
  _ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__ssid();
}
inline const ::std::string& GetA8KeyResp::_ssid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._SSID)
  return _ssid_.GetNoArena();
}
inline void GetA8KeyResp::set__ssid(const ::std::string& value) {
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._SSID)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__ssid(::std::string&& value) {
  set_has__ssid();
  _ssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._SSID)
}
#endif
inline void GetA8KeyResp::set__ssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._SSID)
}
inline void GetA8KeyResp::set__ssid(const char* value, size_t size) {
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._SSID)
}
inline ::std::string* GetA8KeyResp::mutable__ssid() {
  set_has__ssid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._SSID)
  return _ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__ssid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._SSID)
  clear_has__ssid();
  return _ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__ssid(::std::string* _ssid) {
  if (_ssid != NULL) {
    set_has__ssid();
  } else {
    clear_has__ssid();
  }
  _ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _ssid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._SSID)
}

// optional string _MID = 21;
inline bool GetA8KeyResp::has__mid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetA8KeyResp::set_has__mid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetA8KeyResp::clear_has__mid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetA8KeyResp::clear__mid() {
  _mid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mid();
}
inline const ::std::string& GetA8KeyResp::_mid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._MID)
  return _mid_.GetNoArena();
}
inline void GetA8KeyResp::set__mid(const ::std::string& value) {
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._MID)
}
#if LANG_CXX11
inline void GetA8KeyResp::set__mid(::std::string&& value) {
  set_has__mid();
  _mid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._MID)
}
#endif
inline void GetA8KeyResp::set__mid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._MID)
}
inline void GetA8KeyResp::set__mid(const char* value, size_t size) {
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._MID)
}
inline ::std::string* GetA8KeyResp::mutable__mid() {
  set_has__mid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._MID)
  return _mid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetA8KeyResp::release__mid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._MID)
  clear_has__mid();
  return _mid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetA8KeyResp::set_allocated__mid(::std::string* _mid) {
  if (_mid != NULL) {
    set_has__mid();
  } else {
    clear_has__mid();
  }
  _mid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._MID)
}

// optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
inline bool GetA8KeyResp::has__deeplinkbitset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetA8KeyResp::set_has__deeplinkbitset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetA8KeyResp::clear_has__deeplinkbitset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetA8KeyResp::clear__deeplinkbitset() {
  if (_deeplinkbitset_ != NULL) _deeplinkbitset_->::MMPro::micromsg::DeepLinkBitSet::Clear();
  clear_has__deeplinkbitset();
}
inline const ::MMPro::micromsg::DeepLinkBitSet& GetA8KeyResp::_deeplinkbitset() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  return _deeplinkbitset_ != NULL ? *_deeplinkbitset_
                         : *::MMPro::micromsg::DeepLinkBitSet::internal_default_instance();
}
inline ::MMPro::micromsg::DeepLinkBitSet* GetA8KeyResp::mutable__deeplinkbitset() {
  set_has__deeplinkbitset();
  if (_deeplinkbitset_ == NULL) {
    _deeplinkbitset_ = new ::MMPro::micromsg::DeepLinkBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  return _deeplinkbitset_;
}
inline ::MMPro::micromsg::DeepLinkBitSet* GetA8KeyResp::release__deeplinkbitset() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  clear_has__deeplinkbitset();
  ::MMPro::micromsg::DeepLinkBitSet* temp = _deeplinkbitset_;
  _deeplinkbitset_ = NULL;
  return temp;
}
inline void GetA8KeyResp::set_allocated__deeplinkbitset(::MMPro::micromsg::DeepLinkBitSet* _deeplinkbitset) {
  delete _deeplinkbitset_;
  _deeplinkbitset_ = _deeplinkbitset;
  if (_deeplinkbitset) {
    set_has__deeplinkbitset();
  } else {
    clear_has__deeplinkbitset();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
}

// optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
inline bool GetA8KeyResp::has__jsapicontrolbytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetA8KeyResp::set_has__jsapicontrolbytes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetA8KeyResp::clear_has__jsapicontrolbytes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetA8KeyResp::clear__jsapicontrolbytes() {
  if (_jsapicontrolbytes_ != NULL) _jsapicontrolbytes_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has__jsapicontrolbytes();
}
inline const ::MMPro::micromsg::SKBuiltinBuffer_t& GetA8KeyResp::_jsapicontrolbytes() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  return _jsapicontrolbytes_ != NULL ? *_jsapicontrolbytes_
                         : *::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinBuffer_t* GetA8KeyResp::mutable__jsapicontrolbytes() {
  set_has__jsapicontrolbytes();
  if (_jsapicontrolbytes_ == NULL) {
    _jsapicontrolbytes_ = new ::MMPro::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  return _jsapicontrolbytes_;
}
inline ::MMPro::micromsg::SKBuiltinBuffer_t* GetA8KeyResp::release__jsapicontrolbytes() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  clear_has__jsapicontrolbytes();
  ::MMPro::micromsg::SKBuiltinBuffer_t* temp = _jsapicontrolbytes_;
  _jsapicontrolbytes_ = NULL;
  return temp;
}
inline void GetA8KeyResp::set_allocated__jsapicontrolbytes(::MMPro::micromsg::SKBuiltinBuffer_t* _jsapicontrolbytes) {
  delete _jsapicontrolbytes_;
  _jsapicontrolbytes_ = _jsapicontrolbytes;
  if (_jsapicontrolbytes) {
    set_has__jsapicontrolbytes();
  } else {
    clear_has__jsapicontrolbytes();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
}

// optional int32 _HttpHeaderNumb = 24;
inline bool GetA8KeyResp::has__httpheadernumb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GetA8KeyResp::set_has__httpheadernumb() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GetA8KeyResp::clear_has__httpheadernumb() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GetA8KeyResp::clear__httpheadernumb() {
  _httpheadernumb_ = 0;
  clear_has__httpheadernumb();
}
inline ::google::protobuf::int32 GetA8KeyResp::_httpheadernumb() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._HttpHeaderNumb)
  return _httpheadernumb_;
}
inline void GetA8KeyResp::set__httpheadernumb(::google::protobuf::int32 value) {
  set_has__httpheadernumb();
  _httpheadernumb_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._HttpHeaderNumb)
}

// repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
inline int GetA8KeyResp::_httpheader_size() const {
  return _httpheader_.size();
}
inline void GetA8KeyResp::clear__httpheader() {
  _httpheader_.Clear();
}
inline const ::MMPro::micromsg::HTTPHeader& GetA8KeyResp::_httpheader(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Get(index);
}
inline ::MMPro::micromsg::HTTPHeader* GetA8KeyResp::mutable__httpheader(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Mutable(index);
}
inline ::MMPro::micromsg::HTTPHeader* GetA8KeyResp::add__httpheader() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >*
GetA8KeyResp::mutable__httpheader() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return &_httpheader_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >&
GetA8KeyResp::_httpheader() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GetA8KeyResp_2eproto__INCLUDED
