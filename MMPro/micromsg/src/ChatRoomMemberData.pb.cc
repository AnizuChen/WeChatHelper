// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoomMemberData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatRoomMemberData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class ChatRoomMemberDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMemberData> {
} _ChatRoomMemberData_default_instance_;

namespace protobuf_ChatRoomMemberData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _chatroommember_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _infomask_),
  0,
  ~0u,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(ChatRoomMemberData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMemberData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ChatRoomMemberData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChatRoomMemberData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::MMPro::micromsg::protobuf_ChatRoomMemberInfo_2eproto::InitDefaults();
  _ChatRoomMemberData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030ChatRoomMemberData.proto\022\016MMPro.microm"
      "sg\032\030ChatRoomMemberInfo.proto\"z\n\022ChatRoom"
      "MemberData\022\024\n\014_MemberCount\030\001 \002(\r\022;\n\017_Cha"
      "tRoomMember\030\002 \003(\0132\".MMPro.micromsg.ChatR"
      "oomMemberInfo\022\021\n\t_InfoMask\030\003 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatRoomMemberData.proto", &protobuf_RegisterTypes);
  ::MMPro::micromsg::protobuf_ChatRoomMemberInfo_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ChatRoomMemberData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMemberData::kMemberCountFieldNumber;
const int ChatRoomMemberData::kChatRoomMemberFieldNumber;
const int ChatRoomMemberData::kInfoMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMemberData::ChatRoomMemberData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoomMemberData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.ChatRoomMemberData)
}
ChatRoomMemberData::ChatRoomMemberData(const ChatRoomMemberData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      _chatroommember_(from._chatroommember_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&_membercount_, &from._membercount_,
    reinterpret_cast<char*>(&_infomask_) -
    reinterpret_cast<char*>(&_membercount_) + sizeof(_infomask_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.ChatRoomMemberData)
}

void ChatRoomMemberData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&_membercount_, 0, reinterpret_cast<char*>(&_infomask_) -
    reinterpret_cast<char*>(&_membercount_) + sizeof(_infomask_));
}

ChatRoomMemberData::~ChatRoomMemberData() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.ChatRoomMemberData)
  SharedDtor();
}

void ChatRoomMemberData::SharedDtor() {
}

void ChatRoomMemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMemberData::descriptor() {
  protobuf_ChatRoomMemberData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoomMemberData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMemberData& ChatRoomMemberData::default_instance() {
  protobuf_ChatRoomMemberData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMemberData* ChatRoomMemberData::New(::google::protobuf::Arena* arena) const {
  ChatRoomMemberData* n = new ChatRoomMemberData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMemberData::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.ChatRoomMemberData)
  _chatroommember_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&_membercount_, 0, reinterpret_cast<char*>(&_infomask_) -
      reinterpret_cast<char*>(&_membercount_) + sizeof(_infomask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.ChatRoomMemberData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _MemberCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has__membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMPro.micromsg.ChatRoomMemberInfo _ChatRoomMember = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__chatroommember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _InfoMask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has__infomask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_infomask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.ChatRoomMemberData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.ChatRoomMemberData)
  return false;
#undef DO_
}

void ChatRoomMemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.ChatRoomMemberData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 _MemberCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_membercount(), output);
  }

  // repeated .MMPro.micromsg.ChatRoomMemberInfo _ChatRoomMember = 2;
  for (unsigned int i = 0, n = this->_chatroommember_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_chatroommember(i), output);
  }

  // optional uint32 _InfoMask = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_infomask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.ChatRoomMemberData)
}

::google::protobuf::uint8* ChatRoomMemberData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.ChatRoomMemberData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 _MemberCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_membercount(), target);
  }

  // repeated .MMPro.micromsg.ChatRoomMemberInfo _ChatRoomMember = 2;
  for (unsigned int i = 0, n = this->_chatroommember_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->_chatroommember(i), deterministic, target);
  }

  // optional uint32 _InfoMask = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_infomask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.ChatRoomMemberData)
  return target;
}

size_t ChatRoomMemberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.ChatRoomMemberData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 _MemberCount = 1;
  if (has__membercount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_membercount());
  }
  // repeated .MMPro.micromsg.ChatRoomMemberInfo _ChatRoomMember = 2;
  {
    unsigned int count = this->_chatroommember_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chatroommember(i));
    }
  }

  // optional uint32 _InfoMask = 3;
  if (has__infomask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_infomask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMemberData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.ChatRoomMemberData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMemberData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMemberData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.ChatRoomMemberData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.ChatRoomMemberData)
    MergeFrom(*source);
  }
}

void ChatRoomMemberData::MergeFrom(const ChatRoomMemberData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.ChatRoomMemberData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _chatroommember_.MergeFrom(from._chatroommember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      _membercount_ = from._membercount_;
    }
    if (cached_has_bits & 0x00000002u) {
      _infomask_ = from._infomask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMemberData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.ChatRoomMemberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMemberData::CopyFrom(const ChatRoomMemberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.ChatRoomMemberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_chatroommember())) return false;
  return true;
}

void ChatRoomMemberData::Swap(ChatRoomMemberData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMemberData::InternalSwap(ChatRoomMemberData* other) {
  _chatroommember_.InternalSwap(&other->_chatroommember_);
  std::swap(_membercount_, other->_membercount_);
  std::swap(_infomask_, other->_infomask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMemberData::GetMetadata() const {
  protobuf_ChatRoomMemberData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoomMemberData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMemberData

// required uint32 _MemberCount = 1;
bool ChatRoomMemberData::has__membercount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMemberData::set_has__membercount() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMemberData::clear_has__membercount() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMemberData::clear__membercount() {
  _membercount_ = 0u;
  clear_has__membercount();
}
::google::protobuf::uint32 ChatRoomMemberData::_membercount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberData._MemberCount)
  return _membercount_;
}
void ChatRoomMemberData::set__membercount(::google::protobuf::uint32 value) {
  set_has__membercount();
  _membercount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberData._MemberCount)
}

// repeated .MMPro.micromsg.ChatRoomMemberInfo _ChatRoomMember = 2;
int ChatRoomMemberData::_chatroommember_size() const {
  return _chatroommember_.size();
}
void ChatRoomMemberData::clear__chatroommember() {
  _chatroommember_.Clear();
}
const ::MMPro::micromsg::ChatRoomMemberInfo& ChatRoomMemberData::_chatroommember(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberData._ChatRoomMember)
  return _chatroommember_.Get(index);
}
::MMPro::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::mutable__chatroommember(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberData._ChatRoomMember)
  return _chatroommember_.Mutable(index);
}
::MMPro::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::add__chatroommember() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.ChatRoomMemberData._ChatRoomMember)
  return _chatroommember_.Add();
}
::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ChatRoomMemberInfo >*
ChatRoomMemberData::mutable__chatroommember() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.ChatRoomMemberData._ChatRoomMember)
  return &_chatroommember_;
}
const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ChatRoomMemberInfo >&
ChatRoomMemberData::_chatroommember() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.ChatRoomMemberData._ChatRoomMember)
  return _chatroommember_;
}

// optional uint32 _InfoMask = 3;
bool ChatRoomMemberData::has__infomask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMemberData::set_has__infomask() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMemberData::clear_has__infomask() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMemberData::clear__infomask() {
  _infomask_ = 0u;
  clear_has__infomask();
}
::google::protobuf::uint32 ChatRoomMemberData::_infomask() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberData._InfoMask)
  return _infomask_;
}
void ChatRoomMemberData::set__infomask(::google::protobuf::uint32 value) {
  set_has__infomask();
  _infomask_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberData._InfoMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
