// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetA8KeyResp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GetA8KeyResp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class GetA8KeyRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetA8KeyResp> {
} _GetA8KeyResp_default_instance_;

namespace protobuf_GetA8KeyResp_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _fullurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _a8key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _actioncode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _jsapipermission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _generalcontrolbitset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _shareurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _scopecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _scopelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _antispamticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _deeplinkbitset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _jsapicontrolbytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _httpheadernumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetA8KeyResp, _httpheader_),
  9,
  0,
  1,
  14,
  2,
  3,
  10,
  11,
  4,
  5,
  15,
  ~0u,
  6,
  7,
  8,
  12,
  13,
  16,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 24, sizeof(GetA8KeyResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetA8KeyResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GetA8KeyResp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetA8KeyResp_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::MMPro::micromsg::protobuf_BaseResponse_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_JSAPIPermissionBitSet_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_GeneralControlBitSet_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_BizScopeInfo_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_DeepLinkBitSet_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_HTTPHeader_2eproto::InitDefaults();
  _GetA8KeyResp_default_instance_.DefaultConstruct();
  _GetA8KeyResp_default_instance_.get_mutable()->_baseresponse_ = const_cast< ::MMPro::micromsg::BaseResponse*>(
      ::MMPro::micromsg::BaseResponse::internal_default_instance());
  _GetA8KeyResp_default_instance_.get_mutable()->_jsapipermission_ = const_cast< ::MMPro::micromsg::JSAPIPermissionBitSet*>(
      ::MMPro::micromsg::JSAPIPermissionBitSet::internal_default_instance());
  _GetA8KeyResp_default_instance_.get_mutable()->_generalcontrolbitset_ = const_cast< ::MMPro::micromsg::GeneralControlBitSet*>(
      ::MMPro::micromsg::GeneralControlBitSet::internal_default_instance());
  _GetA8KeyResp_default_instance_.get_mutable()->_deeplinkbitset_ = const_cast< ::MMPro::micromsg::DeepLinkBitSet*>(
      ::MMPro::micromsg::DeepLinkBitSet::internal_default_instance());
  _GetA8KeyResp_default_instance_.get_mutable()->_jsapicontrolbytes_ = const_cast< ::MMPro::micromsg::SKBuiltinBuffer_t*>(
      ::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022GetA8KeyResp.proto\022\016MMPro.micromsg\032\022Ba"
      "seResponse.proto\032\033JSAPIPermissionBitSet."
      "proto\032\032GeneralControlBitSet.proto\032\022BizSc"
      "opeInfo.proto\032\024DeepLinkBitSet.proto\032\027SKB"
      "uiltinBuffer_t.proto\032\020HTTPHeader.proto\"\207"
      "\005\n\014GetA8KeyResp\0223\n\r_BaseResponse\030\001 \002(\0132\034"
      ".MMPro.micromsg.BaseResponse\022\020\n\010_FullURL"
      "\030\002 \001(\t\022\016\n\006_A8Key\030\003 \001(\t\022\023\n\013_ActionCode\030\004 "
      "\001(\r\022\016\n\006_Title\030\005 \001(\t\022\020\n\010_Content\030\006 \001(\t\022\?\n"
      "\020_JSAPIPermission\030\007 \001(\0132%.MMPro.micromsg"
      ".JSAPIPermissionBitSet\022C\n\025_GeneralContro"
      "lBitSet\030\010 \001(\0132$.MMPro.micromsg.GeneralCo"
      "ntrolBitSet\022\021\n\t_UserName\030\t \001(\t\022\021\n\t_Share"
      "URL\030\017 \001(\t\022\023\n\013_ScopeCount\030\020 \001(\r\0220\n\n_Scope"
      "List\030\021 \003(\0132\034.MMPro.micromsg.BizScopeInfo"
      "\022\027\n\017_AntispamTicket\030\022 \001(\t\022\r\n\005_SSID\030\024 \001(\t"
      "\022\014\n\004_MID\030\025 \001(\t\0227\n\017_DeepLinkBitSet\030\026 \001(\0132"
      "\036.MMPro.micromsg.DeepLinkBitSet\022=\n\022_JSAP"
      "IControlBytes\030\027 \001(\0132!.MMPro.micromsg.SKB"
      "uiltinBuffer_t\022\027\n\017_HttpHeaderNumb\030\030 \001(\005\022"
      "/\n\013_HttpHeader\030\031 \003(\0132\032.MMPro.micromsg.HT"
      "TPHeader"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GetA8KeyResp.proto", &protobuf_RegisterTypes);
  ::MMPro::micromsg::protobuf_BaseResponse_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_JSAPIPermissionBitSet_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_GeneralControlBitSet_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_BizScopeInfo_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_DeepLinkBitSet_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_HTTPHeader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_GetA8KeyResp_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetA8KeyResp::kBaseResponseFieldNumber;
const int GetA8KeyResp::kFullURLFieldNumber;
const int GetA8KeyResp::kA8KeyFieldNumber;
const int GetA8KeyResp::kActionCodeFieldNumber;
const int GetA8KeyResp::kTitleFieldNumber;
const int GetA8KeyResp::kContentFieldNumber;
const int GetA8KeyResp::kJSAPIPermissionFieldNumber;
const int GetA8KeyResp::kGeneralControlBitSetFieldNumber;
const int GetA8KeyResp::kUserNameFieldNumber;
const int GetA8KeyResp::kShareURLFieldNumber;
const int GetA8KeyResp::kScopeCountFieldNumber;
const int GetA8KeyResp::kScopeListFieldNumber;
const int GetA8KeyResp::kAntispamTicketFieldNumber;
const int GetA8KeyResp::kSSIDFieldNumber;
const int GetA8KeyResp::kMIDFieldNumber;
const int GetA8KeyResp::kDeepLinkBitSetFieldNumber;
const int GetA8KeyResp::kJSAPIControlBytesFieldNumber;
const int GetA8KeyResp::kHttpHeaderNumbFieldNumber;
const int GetA8KeyResp::kHttpHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetA8KeyResp::GetA8KeyResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GetA8KeyResp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.GetA8KeyResp)
}
GetA8KeyResp::GetA8KeyResp(const GetA8KeyResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      _scopelist_(from._scopelist_),
      _httpheader_(from._httpheader_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__fullurl()) {
    _fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._fullurl_);
  }
  _a8key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__a8key()) {
    _a8key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._a8key_);
  }
  _title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__title()) {
    _title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._title_);
  }
  _content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__content()) {
    _content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._content_);
  }
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__username()) {
    _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
  }
  _shareurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__shareurl()) {
    _shareurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._shareurl_);
  }
  _antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__antispamticket()) {
    _antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._antispamticket_);
  }
  _ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__ssid()) {
    _ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._ssid_);
  }
  _mid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__mid()) {
    _mid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mid_);
  }
  if (from.has__baseresponse()) {
    _baseresponse_ = new ::MMPro::micromsg::BaseResponse(*from._baseresponse_);
  } else {
    _baseresponse_ = NULL;
  }
  if (from.has__jsapipermission()) {
    _jsapipermission_ = new ::MMPro::micromsg::JSAPIPermissionBitSet(*from._jsapipermission_);
  } else {
    _jsapipermission_ = NULL;
  }
  if (from.has__generalcontrolbitset()) {
    _generalcontrolbitset_ = new ::MMPro::micromsg::GeneralControlBitSet(*from._generalcontrolbitset_);
  } else {
    _generalcontrolbitset_ = NULL;
  }
  if (from.has__deeplinkbitset()) {
    _deeplinkbitset_ = new ::MMPro::micromsg::DeepLinkBitSet(*from._deeplinkbitset_);
  } else {
    _deeplinkbitset_ = NULL;
  }
  if (from.has__jsapicontrolbytes()) {
    _jsapicontrolbytes_ = new ::MMPro::micromsg::SKBuiltinBuffer_t(*from._jsapicontrolbytes_);
  } else {
    _jsapicontrolbytes_ = NULL;
  }
  ::memcpy(&_actioncode_, &from._actioncode_,
    reinterpret_cast<char*>(&_httpheadernumb_) -
    reinterpret_cast<char*>(&_actioncode_) + sizeof(_httpheadernumb_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.GetA8KeyResp)
}

void GetA8KeyResp::SharedCtor() {
  _cached_size_ = 0;
  _fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _a8key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _shareurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&_baseresponse_, 0, reinterpret_cast<char*>(&_httpheadernumb_) -
    reinterpret_cast<char*>(&_baseresponse_) + sizeof(_httpheadernumb_));
}

GetA8KeyResp::~GetA8KeyResp() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.GetA8KeyResp)
  SharedDtor();
}

void GetA8KeyResp::SharedDtor() {
  _fullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _a8key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _shareurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _antispamticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete _baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete _jsapipermission_;
  }
  if (this != internal_default_instance()) {
    delete _generalcontrolbitset_;
  }
  if (this != internal_default_instance()) {
    delete _deeplinkbitset_;
  }
  if (this != internal_default_instance()) {
    delete _jsapicontrolbytes_;
  }
}

void GetA8KeyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetA8KeyResp::descriptor() {
  protobuf_GetA8KeyResp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GetA8KeyResp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetA8KeyResp& GetA8KeyResp::default_instance() {
  protobuf_GetA8KeyResp_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetA8KeyResp* GetA8KeyResp::New(::google::protobuf::Arena* arena) const {
  GetA8KeyResp* n = new GetA8KeyResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetA8KeyResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.GetA8KeyResp)
  _scopelist_.Clear();
  _httpheader_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has__fullurl()) {
      GOOGLE_DCHECK(!_fullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_fullurl_.UnsafeRawStringPointer())->clear();
    }
    if (has__a8key()) {
      GOOGLE_DCHECK(!_a8key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_a8key_.UnsafeRawStringPointer())->clear();
    }
    if (has__title()) {
      GOOGLE_DCHECK(!_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_title_.UnsafeRawStringPointer())->clear();
    }
    if (has__content()) {
      GOOGLE_DCHECK(!_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_content_.UnsafeRawStringPointer())->clear();
    }
    if (has__username()) {
      GOOGLE_DCHECK(!_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_username_.UnsafeRawStringPointer())->clear();
    }
    if (has__shareurl()) {
      GOOGLE_DCHECK(!_shareurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_shareurl_.UnsafeRawStringPointer())->clear();
    }
    if (has__antispamticket()) {
      GOOGLE_DCHECK(!_antispamticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_antispamticket_.UnsafeRawStringPointer())->clear();
    }
    if (has__ssid()) {
      GOOGLE_DCHECK(!_ssid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_ssid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has__mid()) {
      GOOGLE_DCHECK(!_mid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_mid_.UnsafeRawStringPointer())->clear();
    }
    if (has__baseresponse()) {
      GOOGLE_DCHECK(_baseresponse_ != NULL);
      _baseresponse_->::MMPro::micromsg::BaseResponse::Clear();
    }
    if (has__jsapipermission()) {
      GOOGLE_DCHECK(_jsapipermission_ != NULL);
      _jsapipermission_->::MMPro::micromsg::JSAPIPermissionBitSet::Clear();
    }
    if (has__generalcontrolbitset()) {
      GOOGLE_DCHECK(_generalcontrolbitset_ != NULL);
      _generalcontrolbitset_->::MMPro::micromsg::GeneralControlBitSet::Clear();
    }
    if (has__deeplinkbitset()) {
      GOOGLE_DCHECK(_deeplinkbitset_ != NULL);
      _deeplinkbitset_->::MMPro::micromsg::DeepLinkBitSet::Clear();
    }
    if (has__jsapicontrolbytes()) {
      GOOGLE_DCHECK(_jsapicontrolbytes_ != NULL);
      _jsapicontrolbytes_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 49152u) {
    ::memset(&_actioncode_, 0, reinterpret_cast<char*>(&_scopecount_) -
      reinterpret_cast<char*>(&_actioncode_) + sizeof(_scopecount_));
  }
  _httpheadernumb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetA8KeyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.GetA8KeyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _FullURL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__fullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_fullurl().data(), this->_fullurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._FullURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _A8Key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__a8key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_a8key().data(), this->_a8key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._A8Key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ActionCode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has__actioncode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_actioncode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_title().data(), this->_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._Title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__jsapipermission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__generalcontrolbitset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _UserName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_username().data(), this->_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ShareURL = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__shareurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_shareurl().data(), this->_shareurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._ShareURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ScopeCount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has__scopecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_scopecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__scopelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _AntispamTicket = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__antispamticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_antispamticket().data(), this->_antispamticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._AntispamTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _SSID = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__ssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_ssid().data(), this->_ssid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._SSID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _MID = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_mid().data(), this->_mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.GetA8KeyResp._MID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__deeplinkbitset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__jsapicontrolbytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _HttpHeaderNumb = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has__httpheadernumb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_httpheadernumb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__httpheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.GetA8KeyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.GetA8KeyResp)
  return false;
#undef DO_
}

void GetA8KeyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.GetA8KeyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->_baseresponse_, output);
  }

  // optional string _FullURL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_fullurl().data(), this->_fullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._FullURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_fullurl(), output);
  }

  // optional string _A8Key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_a8key().data(), this->_a8key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._A8Key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_a8key(), output);
  }

  // optional uint32 _ActionCode = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_actioncode(), output);
  }

  // optional string _Title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->_title(), output);
  }

  // optional string _Content = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->_content(), output);
  }

  // optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->_jsapipermission_, output);
  }

  // optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->_generalcontrolbitset_, output);
  }

  // optional string _UserName = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->_username(), output);
  }

  // optional string _ShareURL = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_shareurl().data(), this->_shareurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._ShareURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->_shareurl(), output);
  }

  // optional uint32 _ScopeCount = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->_scopecount(), output);
  }

  // repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
  for (unsigned int i = 0, n = this->_scopelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_scopelist(i), output);
  }

  // optional string _AntispamTicket = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_antispamticket().data(), this->_antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._AntispamTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->_antispamticket(), output);
  }

  // optional string _SSID = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_ssid().data(), this->_ssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._SSID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->_ssid(), output);
  }

  // optional string _MID = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mid().data(), this->_mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._MID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->_mid(), output);
  }

  // optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->_deeplinkbitset_, output);
  }

  // optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->_jsapicontrolbytes_, output);
  }

  // optional int32 _HttpHeaderNumb = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->_httpheadernumb(), output);
  }

  // repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
  for (unsigned int i = 0, n = this->_httpheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_httpheader(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.GetA8KeyResp)
}

::google::protobuf::uint8* GetA8KeyResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.GetA8KeyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->_baseresponse_, deterministic, target);
  }

  // optional string _FullURL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_fullurl().data(), this->_fullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._FullURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_fullurl(), target);
  }

  // optional string _A8Key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_a8key().data(), this->_a8key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._A8Key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_a8key(), target);
  }

  // optional uint32 _ActionCode = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_actioncode(), target);
  }

  // optional string _Title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_title().data(), this->_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_title(), target);
  }

  // optional string _Content = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->_content(), target);
  }

  // optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->_jsapipermission_, deterministic, target);
  }

  // optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->_generalcontrolbitset_, deterministic, target);
  }

  // optional string _UserName = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->_username(), target);
  }

  // optional string _ShareURL = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_shareurl().data(), this->_shareurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._ShareURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->_shareurl(), target);
  }

  // optional uint32 _ScopeCount = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->_scopecount(), target);
  }

  // repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
  for (unsigned int i = 0, n = this->_scopelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->_scopelist(i), deterministic, target);
  }

  // optional string _AntispamTicket = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_antispamticket().data(), this->_antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._AntispamTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->_antispamticket(), target);
  }

  // optional string _SSID = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_ssid().data(), this->_ssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._SSID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->_ssid(), target);
  }

  // optional string _MID = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mid().data(), this->_mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.GetA8KeyResp._MID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->_mid(), target);
  }

  // optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->_deeplinkbitset_, deterministic, target);
  }

  // optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->_jsapicontrolbytes_, deterministic, target);
  }

  // optional int32 _HttpHeaderNumb = 24;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->_httpheadernumb(), target);
  }

  // repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
  for (unsigned int i = 0, n = this->_httpheader_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->_httpheader(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.GetA8KeyResp)
  return target;
}

size_t GetA8KeyResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.GetA8KeyResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
  if (has__baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_baseresponse_);
  }
  // repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
  {
    unsigned int count = this->_scopelist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_scopelist(i));
    }
  }

  // repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
  {
    unsigned int count = this->_httpheader_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_httpheader(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string _FullURL = 2;
    if (has__fullurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_fullurl());
    }

    // optional string _A8Key = 3;
    if (has__a8key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_a8key());
    }

    // optional string _Title = 5;
    if (has__title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_title());
    }

    // optional string _Content = 6;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

    // optional string _UserName = 9;
    if (has__username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_username());
    }

    // optional string _ShareURL = 15;
    if (has__shareurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_shareurl());
    }

    // optional string _AntispamTicket = 18;
    if (has__antispamticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_antispamticket());
    }

    // optional string _SSID = 20;
    if (has__ssid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_ssid());
    }

  }
  // optional string _MID = 21;
  if (has__mid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->_mid());
  }

  if (_has_bits_[8 / 32] & 64512u) {
    // optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
    if (has__jsapipermission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_jsapipermission_);
    }

    // optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
    if (has__generalcontrolbitset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_generalcontrolbitset_);
    }

    // optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
    if (has__deeplinkbitset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_deeplinkbitset_);
    }

    // optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
    if (has__jsapicontrolbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_jsapicontrolbytes_);
    }

    // optional uint32 _ActionCode = 4;
    if (has__actioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_actioncode());
    }

    // optional uint32 _ScopeCount = 16;
    if (has__scopecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_scopecount());
    }

  }
  // optional int32 _HttpHeaderNumb = 24;
  if (has__httpheadernumb()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_httpheadernumb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetA8KeyResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.GetA8KeyResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetA8KeyResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetA8KeyResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.GetA8KeyResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.GetA8KeyResp)
    MergeFrom(*source);
  }
}

void GetA8KeyResp::MergeFrom(const GetA8KeyResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.GetA8KeyResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _scopelist_.MergeFrom(from._scopelist_);
  _httpheader_.MergeFrom(from._httpheader_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__fullurl();
      _fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._fullurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__a8key();
      _a8key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._a8key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has__title();
      _title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has__content();
      _content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._content_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has__username();
      _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has__shareurl();
      _shareurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._shareurl_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has__antispamticket();
      _antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._antispamticket_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has__ssid();
      _ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._ssid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has__mid();
      _mid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mid_);
    }
    if (cached_has_bits & 0x00000200u) {
      mutable__baseresponse()->::MMPro::micromsg::BaseResponse::MergeFrom(from._baseresponse());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable__jsapipermission()->::MMPro::micromsg::JSAPIPermissionBitSet::MergeFrom(from._jsapipermission());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable__generalcontrolbitset()->::MMPro::micromsg::GeneralControlBitSet::MergeFrom(from._generalcontrolbitset());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable__deeplinkbitset()->::MMPro::micromsg::DeepLinkBitSet::MergeFrom(from._deeplinkbitset());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable__jsapicontrolbytes()->::MMPro::micromsg::SKBuiltinBuffer_t::MergeFrom(from._jsapicontrolbytes());
    }
    if (cached_has_bits & 0x00004000u) {
      _actioncode_ = from._actioncode_;
    }
    if (cached_has_bits & 0x00008000u) {
      _scopecount_ = from._scopecount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set__httpheadernumb(from._httpheadernumb());
  }
}

void GetA8KeyResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.GetA8KeyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetA8KeyResp::CopyFrom(const GetA8KeyResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.GetA8KeyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetA8KeyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000200) != 0x00000200) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_scopelist())) return false;
  if (has__baseresponse()) {
    if (!this->_baseresponse_->IsInitialized()) return false;
  }
  if (has__jsapipermission()) {
    if (!this->_jsapipermission_->IsInitialized()) return false;
  }
  if (has__generalcontrolbitset()) {
    if (!this->_generalcontrolbitset_->IsInitialized()) return false;
  }
  if (has__deeplinkbitset()) {
    if (!this->_deeplinkbitset_->IsInitialized()) return false;
  }
  if (has__jsapicontrolbytes()) {
    if (!this->_jsapicontrolbytes_->IsInitialized()) return false;
  }
  return true;
}

void GetA8KeyResp::Swap(GetA8KeyResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetA8KeyResp::InternalSwap(GetA8KeyResp* other) {
  _scopelist_.InternalSwap(&other->_scopelist_);
  _httpheader_.InternalSwap(&other->_httpheader_);
  _fullurl_.Swap(&other->_fullurl_);
  _a8key_.Swap(&other->_a8key_);
  _title_.Swap(&other->_title_);
  _content_.Swap(&other->_content_);
  _username_.Swap(&other->_username_);
  _shareurl_.Swap(&other->_shareurl_);
  _antispamticket_.Swap(&other->_antispamticket_);
  _ssid_.Swap(&other->_ssid_);
  _mid_.Swap(&other->_mid_);
  std::swap(_baseresponse_, other->_baseresponse_);
  std::swap(_jsapipermission_, other->_jsapipermission_);
  std::swap(_generalcontrolbitset_, other->_generalcontrolbitset_);
  std::swap(_deeplinkbitset_, other->_deeplinkbitset_);
  std::swap(_jsapicontrolbytes_, other->_jsapicontrolbytes_);
  std::swap(_actioncode_, other->_actioncode_);
  std::swap(_scopecount_, other->_scopecount_);
  std::swap(_httpheadernumb_, other->_httpheadernumb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetA8KeyResp::GetMetadata() const {
  protobuf_GetA8KeyResp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GetA8KeyResp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetA8KeyResp

// required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
bool GetA8KeyResp::has__baseresponse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GetA8KeyResp::set_has__baseresponse() {
  _has_bits_[0] |= 0x00000200u;
}
void GetA8KeyResp::clear_has__baseresponse() {
  _has_bits_[0] &= ~0x00000200u;
}
void GetA8KeyResp::clear__baseresponse() {
  if (_baseresponse_ != NULL) _baseresponse_->::MMPro::micromsg::BaseResponse::Clear();
  clear_has__baseresponse();
}
const ::MMPro::micromsg::BaseResponse& GetA8KeyResp::_baseresponse() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  return _baseresponse_ != NULL ? *_baseresponse_
                         : *::MMPro::micromsg::BaseResponse::internal_default_instance();
}
::MMPro::micromsg::BaseResponse* GetA8KeyResp::mutable__baseresponse() {
  set_has__baseresponse();
  if (_baseresponse_ == NULL) {
    _baseresponse_ = new ::MMPro::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  return _baseresponse_;
}
::MMPro::micromsg::BaseResponse* GetA8KeyResp::release__baseresponse() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._BaseResponse)
  clear_has__baseresponse();
  ::MMPro::micromsg::BaseResponse* temp = _baseresponse_;
  _baseresponse_ = NULL;
  return temp;
}
void GetA8KeyResp::set_allocated__baseresponse(::MMPro::micromsg::BaseResponse* _baseresponse) {
  delete _baseresponse_;
  _baseresponse_ = _baseresponse;
  if (_baseresponse) {
    set_has__baseresponse();
  } else {
    clear_has__baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._BaseResponse)
}

// optional string _FullURL = 2;
bool GetA8KeyResp::has__fullurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetA8KeyResp::set_has__fullurl() {
  _has_bits_[0] |= 0x00000001u;
}
void GetA8KeyResp::clear_has__fullurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetA8KeyResp::clear__fullurl() {
  _fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__fullurl();
}
const ::std::string& GetA8KeyResp::_fullurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._FullURL)
  return _fullurl_.GetNoArena();
}
void GetA8KeyResp::set__fullurl(const ::std::string& value) {
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._FullURL)
}
#if LANG_CXX11
void GetA8KeyResp::set__fullurl(::std::string&& value) {
  set_has__fullurl();
  _fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._FullURL)
}
#endif
void GetA8KeyResp::set__fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._FullURL)
}
void GetA8KeyResp::set__fullurl(const char* value, size_t size) {
  set_has__fullurl();
  _fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._FullURL)
}
::std::string* GetA8KeyResp::mutable__fullurl() {
  set_has__fullurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._FullURL)
  return _fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__fullurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._FullURL)
  clear_has__fullurl();
  return _fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__fullurl(::std::string* _fullurl) {
  if (_fullurl != NULL) {
    set_has__fullurl();
  } else {
    clear_has__fullurl();
  }
  _fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _fullurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._FullURL)
}

// optional string _A8Key = 3;
bool GetA8KeyResp::has__a8key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetA8KeyResp::set_has__a8key() {
  _has_bits_[0] |= 0x00000002u;
}
void GetA8KeyResp::clear_has__a8key() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetA8KeyResp::clear__a8key() {
  _a8key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__a8key();
}
const ::std::string& GetA8KeyResp::_a8key() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._A8Key)
  return _a8key_.GetNoArena();
}
void GetA8KeyResp::set__a8key(const ::std::string& value) {
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._A8Key)
}
#if LANG_CXX11
void GetA8KeyResp::set__a8key(::std::string&& value) {
  set_has__a8key();
  _a8key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._A8Key)
}
#endif
void GetA8KeyResp::set__a8key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._A8Key)
}
void GetA8KeyResp::set__a8key(const char* value, size_t size) {
  set_has__a8key();
  _a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._A8Key)
}
::std::string* GetA8KeyResp::mutable__a8key() {
  set_has__a8key();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._A8Key)
  return _a8key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__a8key() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._A8Key)
  clear_has__a8key();
  return _a8key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__a8key(::std::string* _a8key) {
  if (_a8key != NULL) {
    set_has__a8key();
  } else {
    clear_has__a8key();
  }
  _a8key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _a8key);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._A8Key)
}

// optional uint32 _ActionCode = 4;
bool GetA8KeyResp::has__actioncode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GetA8KeyResp::set_has__actioncode() {
  _has_bits_[0] |= 0x00004000u;
}
void GetA8KeyResp::clear_has__actioncode() {
  _has_bits_[0] &= ~0x00004000u;
}
void GetA8KeyResp::clear__actioncode() {
  _actioncode_ = 0u;
  clear_has__actioncode();
}
::google::protobuf::uint32 GetA8KeyResp::_actioncode() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ActionCode)
  return _actioncode_;
}
void GetA8KeyResp::set__actioncode(::google::protobuf::uint32 value) {
  set_has__actioncode();
  _actioncode_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ActionCode)
}

// optional string _Title = 5;
bool GetA8KeyResp::has__title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetA8KeyResp::set_has__title() {
  _has_bits_[0] |= 0x00000004u;
}
void GetA8KeyResp::clear_has__title() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetA8KeyResp::clear__title() {
  _title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__title();
}
const ::std::string& GetA8KeyResp::_title() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._Title)
  return _title_.GetNoArena();
}
void GetA8KeyResp::set__title(const ::std::string& value) {
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._Title)
}
#if LANG_CXX11
void GetA8KeyResp::set__title(::std::string&& value) {
  set_has__title();
  _title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._Title)
}
#endif
void GetA8KeyResp::set__title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._Title)
}
void GetA8KeyResp::set__title(const char* value, size_t size) {
  set_has__title();
  _title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._Title)
}
::std::string* GetA8KeyResp::mutable__title() {
  set_has__title();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._Title)
  return _title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__title() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._Title)
  clear_has__title();
  return _title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__title(::std::string* _title) {
  if (_title != NULL) {
    set_has__title();
  } else {
    clear_has__title();
  }
  _title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _title);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._Title)
}

// optional string _Content = 6;
bool GetA8KeyResp::has__content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetA8KeyResp::set_has__content() {
  _has_bits_[0] |= 0x00000008u;
}
void GetA8KeyResp::clear_has__content() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetA8KeyResp::clear__content() {
  _content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__content();
}
const ::std::string& GetA8KeyResp::_content() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._Content)
  return _content_.GetNoArena();
}
void GetA8KeyResp::set__content(const ::std::string& value) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._Content)
}
#if LANG_CXX11
void GetA8KeyResp::set__content(::std::string&& value) {
  set_has__content();
  _content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._Content)
}
#endif
void GetA8KeyResp::set__content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._Content)
}
void GetA8KeyResp::set__content(const char* value, size_t size) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._Content)
}
::std::string* GetA8KeyResp::mutable__content() {
  set_has__content();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._Content)
  return _content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__content() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._Content)
  clear_has__content();
  return _content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__content(::std::string* _content) {
  if (_content != NULL) {
    set_has__content();
  } else {
    clear_has__content();
  }
  _content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _content);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._Content)
}

// optional .MMPro.micromsg.JSAPIPermissionBitSet _JSAPIPermission = 7;
bool GetA8KeyResp::has__jsapipermission() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GetA8KeyResp::set_has__jsapipermission() {
  _has_bits_[0] |= 0x00000400u;
}
void GetA8KeyResp::clear_has__jsapipermission() {
  _has_bits_[0] &= ~0x00000400u;
}
void GetA8KeyResp::clear__jsapipermission() {
  if (_jsapipermission_ != NULL) _jsapipermission_->::MMPro::micromsg::JSAPIPermissionBitSet::Clear();
  clear_has__jsapipermission();
}
const ::MMPro::micromsg::JSAPIPermissionBitSet& GetA8KeyResp::_jsapipermission() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  return _jsapipermission_ != NULL ? *_jsapipermission_
                         : *::MMPro::micromsg::JSAPIPermissionBitSet::internal_default_instance();
}
::MMPro::micromsg::JSAPIPermissionBitSet* GetA8KeyResp::mutable__jsapipermission() {
  set_has__jsapipermission();
  if (_jsapipermission_ == NULL) {
    _jsapipermission_ = new ::MMPro::micromsg::JSAPIPermissionBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  return _jsapipermission_;
}
::MMPro::micromsg::JSAPIPermissionBitSet* GetA8KeyResp::release__jsapipermission() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
  clear_has__jsapipermission();
  ::MMPro::micromsg::JSAPIPermissionBitSet* temp = _jsapipermission_;
  _jsapipermission_ = NULL;
  return temp;
}
void GetA8KeyResp::set_allocated__jsapipermission(::MMPro::micromsg::JSAPIPermissionBitSet* _jsapipermission) {
  delete _jsapipermission_;
  _jsapipermission_ = _jsapipermission;
  if (_jsapipermission) {
    set_has__jsapipermission();
  } else {
    clear_has__jsapipermission();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._JSAPIPermission)
}

// optional .MMPro.micromsg.GeneralControlBitSet _GeneralControlBitSet = 8;
bool GetA8KeyResp::has__generalcontrolbitset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GetA8KeyResp::set_has__generalcontrolbitset() {
  _has_bits_[0] |= 0x00000800u;
}
void GetA8KeyResp::clear_has__generalcontrolbitset() {
  _has_bits_[0] &= ~0x00000800u;
}
void GetA8KeyResp::clear__generalcontrolbitset() {
  if (_generalcontrolbitset_ != NULL) _generalcontrolbitset_->::MMPro::micromsg::GeneralControlBitSet::Clear();
  clear_has__generalcontrolbitset();
}
const ::MMPro::micromsg::GeneralControlBitSet& GetA8KeyResp::_generalcontrolbitset() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  return _generalcontrolbitset_ != NULL ? *_generalcontrolbitset_
                         : *::MMPro::micromsg::GeneralControlBitSet::internal_default_instance();
}
::MMPro::micromsg::GeneralControlBitSet* GetA8KeyResp::mutable__generalcontrolbitset() {
  set_has__generalcontrolbitset();
  if (_generalcontrolbitset_ == NULL) {
    _generalcontrolbitset_ = new ::MMPro::micromsg::GeneralControlBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  return _generalcontrolbitset_;
}
::MMPro::micromsg::GeneralControlBitSet* GetA8KeyResp::release__generalcontrolbitset() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
  clear_has__generalcontrolbitset();
  ::MMPro::micromsg::GeneralControlBitSet* temp = _generalcontrolbitset_;
  _generalcontrolbitset_ = NULL;
  return temp;
}
void GetA8KeyResp::set_allocated__generalcontrolbitset(::MMPro::micromsg::GeneralControlBitSet* _generalcontrolbitset) {
  delete _generalcontrolbitset_;
  _generalcontrolbitset_ = _generalcontrolbitset;
  if (_generalcontrolbitset) {
    set_has__generalcontrolbitset();
  } else {
    clear_has__generalcontrolbitset();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._GeneralControlBitSet)
}

// optional string _UserName = 9;
bool GetA8KeyResp::has__username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetA8KeyResp::set_has__username() {
  _has_bits_[0] |= 0x00000010u;
}
void GetA8KeyResp::clear_has__username() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetA8KeyResp::clear__username() {
  _username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__username();
}
const ::std::string& GetA8KeyResp::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._UserName)
  return _username_.GetNoArena();
}
void GetA8KeyResp::set__username(const ::std::string& value) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._UserName)
}
#if LANG_CXX11
void GetA8KeyResp::set__username(::std::string&& value) {
  set_has__username();
  _username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._UserName)
}
#endif
void GetA8KeyResp::set__username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._UserName)
}
void GetA8KeyResp::set__username(const char* value, size_t size) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._UserName)
}
::std::string* GetA8KeyResp::mutable__username() {
  set_has__username();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._UserName)
  return _username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._UserName)
  clear_has__username();
  return _username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__username(::std::string* _username) {
  if (_username != NULL) {
    set_has__username();
  } else {
    clear_has__username();
  }
  _username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _username);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._UserName)
}

// optional string _ShareURL = 15;
bool GetA8KeyResp::has__shareurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetA8KeyResp::set_has__shareurl() {
  _has_bits_[0] |= 0x00000020u;
}
void GetA8KeyResp::clear_has__shareurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetA8KeyResp::clear__shareurl() {
  _shareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__shareurl();
}
const ::std::string& GetA8KeyResp::_shareurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ShareURL)
  return _shareurl_.GetNoArena();
}
void GetA8KeyResp::set__shareurl(const ::std::string& value) {
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
#if LANG_CXX11
void GetA8KeyResp::set__shareurl(::std::string&& value) {
  set_has__shareurl();
  _shareurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
#endif
void GetA8KeyResp::set__shareurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
void GetA8KeyResp::set__shareurl(const char* value, size_t size) {
  set_has__shareurl();
  _shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._ShareURL)
}
::std::string* GetA8KeyResp::mutable__shareurl() {
  set_has__shareurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._ShareURL)
  return _shareurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__shareurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._ShareURL)
  clear_has__shareurl();
  return _shareurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__shareurl(::std::string* _shareurl) {
  if (_shareurl != NULL) {
    set_has__shareurl();
  } else {
    clear_has__shareurl();
  }
  _shareurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _shareurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._ShareURL)
}

// optional uint32 _ScopeCount = 16;
bool GetA8KeyResp::has__scopecount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GetA8KeyResp::set_has__scopecount() {
  _has_bits_[0] |= 0x00008000u;
}
void GetA8KeyResp::clear_has__scopecount() {
  _has_bits_[0] &= ~0x00008000u;
}
void GetA8KeyResp::clear__scopecount() {
  _scopecount_ = 0u;
  clear_has__scopecount();
}
::google::protobuf::uint32 GetA8KeyResp::_scopecount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ScopeCount)
  return _scopecount_;
}
void GetA8KeyResp::set__scopecount(::google::protobuf::uint32 value) {
  set_has__scopecount();
  _scopecount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._ScopeCount)
}

// repeated .MMPro.micromsg.BizScopeInfo _ScopeList = 17;
int GetA8KeyResp::_scopelist_size() const {
  return _scopelist_.size();
}
void GetA8KeyResp::clear__scopelist() {
  _scopelist_.Clear();
}
const ::MMPro::micromsg::BizScopeInfo& GetA8KeyResp::_scopelist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Get(index);
}
::MMPro::micromsg::BizScopeInfo* GetA8KeyResp::mutable__scopelist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Mutable(index);
}
::MMPro::micromsg::BizScopeInfo* GetA8KeyResp::add__scopelist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >*
GetA8KeyResp::mutable__scopelist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return &_scopelist_;
}
const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizScopeInfo >&
GetA8KeyResp::_scopelist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.GetA8KeyResp._ScopeList)
  return _scopelist_;
}

// optional string _AntispamTicket = 18;
bool GetA8KeyResp::has__antispamticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetA8KeyResp::set_has__antispamticket() {
  _has_bits_[0] |= 0x00000040u;
}
void GetA8KeyResp::clear_has__antispamticket() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetA8KeyResp::clear__antispamticket() {
  _antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__antispamticket();
}
const ::std::string& GetA8KeyResp::_antispamticket() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  return _antispamticket_.GetNoArena();
}
void GetA8KeyResp::set__antispamticket(const ::std::string& value) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
#if LANG_CXX11
void GetA8KeyResp::set__antispamticket(::std::string&& value) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
#endif
void GetA8KeyResp::set__antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
void GetA8KeyResp::set__antispamticket(const char* value, size_t size) {
  set_has__antispamticket();
  _antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}
::std::string* GetA8KeyResp::mutable__antispamticket() {
  set_has__antispamticket();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  return _antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__antispamticket() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
  clear_has__antispamticket();
  return _antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__antispamticket(::std::string* _antispamticket) {
  if (_antispamticket != NULL) {
    set_has__antispamticket();
  } else {
    clear_has__antispamticket();
  }
  _antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _antispamticket);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._AntispamTicket)
}

// optional string _SSID = 20;
bool GetA8KeyResp::has__ssid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetA8KeyResp::set_has__ssid() {
  _has_bits_[0] |= 0x00000080u;
}
void GetA8KeyResp::clear_has__ssid() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetA8KeyResp::clear__ssid() {
  _ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__ssid();
}
const ::std::string& GetA8KeyResp::_ssid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._SSID)
  return _ssid_.GetNoArena();
}
void GetA8KeyResp::set__ssid(const ::std::string& value) {
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._SSID)
}
#if LANG_CXX11
void GetA8KeyResp::set__ssid(::std::string&& value) {
  set_has__ssid();
  _ssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._SSID)
}
#endif
void GetA8KeyResp::set__ssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._SSID)
}
void GetA8KeyResp::set__ssid(const char* value, size_t size) {
  set_has__ssid();
  _ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._SSID)
}
::std::string* GetA8KeyResp::mutable__ssid() {
  set_has__ssid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._SSID)
  return _ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__ssid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._SSID)
  clear_has__ssid();
  return _ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__ssid(::std::string* _ssid) {
  if (_ssid != NULL) {
    set_has__ssid();
  } else {
    clear_has__ssid();
  }
  _ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _ssid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._SSID)
}

// optional string _MID = 21;
bool GetA8KeyResp::has__mid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetA8KeyResp::set_has__mid() {
  _has_bits_[0] |= 0x00000100u;
}
void GetA8KeyResp::clear_has__mid() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetA8KeyResp::clear__mid() {
  _mid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mid();
}
const ::std::string& GetA8KeyResp::_mid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._MID)
  return _mid_.GetNoArena();
}
void GetA8KeyResp::set__mid(const ::std::string& value) {
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._MID)
}
#if LANG_CXX11
void GetA8KeyResp::set__mid(::std::string&& value) {
  set_has__mid();
  _mid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.GetA8KeyResp._MID)
}
#endif
void GetA8KeyResp::set__mid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.GetA8KeyResp._MID)
}
void GetA8KeyResp::set__mid(const char* value, size_t size) {
  set_has__mid();
  _mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.GetA8KeyResp._MID)
}
::std::string* GetA8KeyResp::mutable__mid() {
  set_has__mid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._MID)
  return _mid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetA8KeyResp::release__mid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._MID)
  clear_has__mid();
  return _mid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetA8KeyResp::set_allocated__mid(::std::string* _mid) {
  if (_mid != NULL) {
    set_has__mid();
  } else {
    clear_has__mid();
  }
  _mid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._MID)
}

// optional .MMPro.micromsg.DeepLinkBitSet _DeepLinkBitSet = 22;
bool GetA8KeyResp::has__deeplinkbitset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GetA8KeyResp::set_has__deeplinkbitset() {
  _has_bits_[0] |= 0x00001000u;
}
void GetA8KeyResp::clear_has__deeplinkbitset() {
  _has_bits_[0] &= ~0x00001000u;
}
void GetA8KeyResp::clear__deeplinkbitset() {
  if (_deeplinkbitset_ != NULL) _deeplinkbitset_->::MMPro::micromsg::DeepLinkBitSet::Clear();
  clear_has__deeplinkbitset();
}
const ::MMPro::micromsg::DeepLinkBitSet& GetA8KeyResp::_deeplinkbitset() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  return _deeplinkbitset_ != NULL ? *_deeplinkbitset_
                         : *::MMPro::micromsg::DeepLinkBitSet::internal_default_instance();
}
::MMPro::micromsg::DeepLinkBitSet* GetA8KeyResp::mutable__deeplinkbitset() {
  set_has__deeplinkbitset();
  if (_deeplinkbitset_ == NULL) {
    _deeplinkbitset_ = new ::MMPro::micromsg::DeepLinkBitSet;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  return _deeplinkbitset_;
}
::MMPro::micromsg::DeepLinkBitSet* GetA8KeyResp::release__deeplinkbitset() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
  clear_has__deeplinkbitset();
  ::MMPro::micromsg::DeepLinkBitSet* temp = _deeplinkbitset_;
  _deeplinkbitset_ = NULL;
  return temp;
}
void GetA8KeyResp::set_allocated__deeplinkbitset(::MMPro::micromsg::DeepLinkBitSet* _deeplinkbitset) {
  delete _deeplinkbitset_;
  _deeplinkbitset_ = _deeplinkbitset;
  if (_deeplinkbitset) {
    set_has__deeplinkbitset();
  } else {
    clear_has__deeplinkbitset();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._DeepLinkBitSet)
}

// optional .MMPro.micromsg.SKBuiltinBuffer_t _JSAPIControlBytes = 23;
bool GetA8KeyResp::has__jsapicontrolbytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GetA8KeyResp::set_has__jsapicontrolbytes() {
  _has_bits_[0] |= 0x00002000u;
}
void GetA8KeyResp::clear_has__jsapicontrolbytes() {
  _has_bits_[0] &= ~0x00002000u;
}
void GetA8KeyResp::clear__jsapicontrolbytes() {
  if (_jsapicontrolbytes_ != NULL) _jsapicontrolbytes_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has__jsapicontrolbytes();
}
const ::MMPro::micromsg::SKBuiltinBuffer_t& GetA8KeyResp::_jsapicontrolbytes() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  return _jsapicontrolbytes_ != NULL ? *_jsapicontrolbytes_
                         : *::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinBuffer_t* GetA8KeyResp::mutable__jsapicontrolbytes() {
  set_has__jsapicontrolbytes();
  if (_jsapicontrolbytes_ == NULL) {
    _jsapicontrolbytes_ = new ::MMPro::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  return _jsapicontrolbytes_;
}
::MMPro::micromsg::SKBuiltinBuffer_t* GetA8KeyResp::release__jsapicontrolbytes() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
  clear_has__jsapicontrolbytes();
  ::MMPro::micromsg::SKBuiltinBuffer_t* temp = _jsapicontrolbytes_;
  _jsapicontrolbytes_ = NULL;
  return temp;
}
void GetA8KeyResp::set_allocated__jsapicontrolbytes(::MMPro::micromsg::SKBuiltinBuffer_t* _jsapicontrolbytes) {
  delete _jsapicontrolbytes_;
  _jsapicontrolbytes_ = _jsapicontrolbytes;
  if (_jsapicontrolbytes) {
    set_has__jsapicontrolbytes();
  } else {
    clear_has__jsapicontrolbytes();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.GetA8KeyResp._JSAPIControlBytes)
}

// optional int32 _HttpHeaderNumb = 24;
bool GetA8KeyResp::has__httpheadernumb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GetA8KeyResp::set_has__httpheadernumb() {
  _has_bits_[0] |= 0x00010000u;
}
void GetA8KeyResp::clear_has__httpheadernumb() {
  _has_bits_[0] &= ~0x00010000u;
}
void GetA8KeyResp::clear__httpheadernumb() {
  _httpheadernumb_ = 0;
  clear_has__httpheadernumb();
}
::google::protobuf::int32 GetA8KeyResp::_httpheadernumb() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._HttpHeaderNumb)
  return _httpheadernumb_;
}
void GetA8KeyResp::set__httpheadernumb(::google::protobuf::int32 value) {
  set_has__httpheadernumb();
  _httpheadernumb_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.GetA8KeyResp._HttpHeaderNumb)
}

// repeated .MMPro.micromsg.HTTPHeader _HttpHeader = 25;
int GetA8KeyResp::_httpheader_size() const {
  return _httpheader_.size();
}
void GetA8KeyResp::clear__httpheader() {
  _httpheader_.Clear();
}
const ::MMPro::micromsg::HTTPHeader& GetA8KeyResp::_httpheader(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Get(index);
}
::MMPro::micromsg::HTTPHeader* GetA8KeyResp::mutable__httpheader(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Mutable(index);
}
::MMPro::micromsg::HTTPHeader* GetA8KeyResp::add__httpheader() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_.Add();
}
::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >*
GetA8KeyResp::mutable__httpheader() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return &_httpheader_;
}
const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::HTTPHeader >&
GetA8KeyResp::_httpheader() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.GetA8KeyResp._HttpHeader)
  return _httpheader_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
