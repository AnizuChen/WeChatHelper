// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModContact.proto

#ifndef PROTOBUF_ModContact_2eproto__INCLUDED
#define PROTOBUF_ModContact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SKBuiltinString_t.pb.h"
#include "SKBuiltinBuffer_t.pb.h"
#include "RoomInfo.pb.h"
#include "SnsUserInfo.pb.h"
#include "CustomizedInfo.pb.h"
#include "AdditionalContactList.pb.h"
#include "ChatRoomMemberData.pb.h"
#include "PhoneNumberList.pb.h"
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class PhoneNumber;
class PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
class PhoneNumberList;
class PhoneNumberListDefaultTypeInternal;
extern PhoneNumberListDefaultTypeInternal _PhoneNumberList_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_ModContact_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ModContact_2eproto

// ===================================================================

class ModContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.ModContact) */ {
 public:
  ModContact();
  virtual ~ModContact();

  ModContact(const ModContact& from);

  inline ModContact& operator=(const ModContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModContact& default_instance();

  static inline const ModContact* internal_default_instance() {
    return reinterpret_cast<const ModContact*>(
               &_ModContact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ModContact* other);

  // implements Message ----------------------------------------------

  inline ModContact* New() const PROTOBUF_FINAL { return New(NULL); }

  ModContact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModContact& from);
  void MergeFrom(const ModContact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
  int _roominfolist_size() const;
  void clear__roominfolist();
  static const int kRoomInfoListFieldNumber = 15;
  const ::MMPro::micromsg::RoomInfo& _roominfolist(int index) const;
  ::MMPro::micromsg::RoomInfo* mutable__roominfolist(int index);
  ::MMPro::micromsg::RoomInfo* add__roominfolist();
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >*
      mutable__roominfolist();
  const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >&
      _roominfolist() const;

  // optional string _Province = 19;
  bool has__province() const;
  void clear__province();
  static const int kProvinceFieldNumber = 19;
  const ::std::string& _province() const;
  void set__province(const ::std::string& value);
  #if LANG_CXX11
  void set__province(::std::string&& value);
  #endif
  void set__province(const char* value);
  void set__province(const char* value, size_t size);
  ::std::string* mutable__province();
  ::std::string* release__province();
  void set_allocated__province(::std::string* _province);

  // optional string _City = 20;
  bool has__city() const;
  void clear__city();
  static const int kCityFieldNumber = 20;
  const ::std::string& _city() const;
  void set__city(const ::std::string& value);
  #if LANG_CXX11
  void set__city(::std::string&& value);
  #endif
  void set__city(const char* value);
  void set__city(const char* value, size_t size);
  ::std::string* mutable__city();
  ::std::string* release__city();
  void set_allocated__city(::std::string* _city);

  // optional string _Signature = 21;
  bool has__signature() const;
  void clear__signature();
  static const int kSignatureFieldNumber = 21;
  const ::std::string& _signature() const;
  void set__signature(const ::std::string& value);
  #if LANG_CXX11
  void set__signature(::std::string&& value);
  #endif
  void set__signature(const char* value);
  void set__signature(const char* value, size_t size);
  ::std::string* mutable__signature();
  ::std::string* release__signature();
  void set_allocated__signature(::std::string* _signature);

  // optional string _VerifyInfo = 25;
  bool has__verifyinfo() const;
  void clear__verifyinfo();
  static const int kVerifyInfoFieldNumber = 25;
  const ::std::string& _verifyinfo() const;
  void set__verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set__verifyinfo(::std::string&& value);
  #endif
  void set__verifyinfo(const char* value);
  void set__verifyinfo(const char* value, size_t size);
  ::std::string* mutable__verifyinfo();
  ::std::string* release__verifyinfo();
  void set_allocated__verifyinfo(::std::string* _verifyinfo);

  // optional string _Weibo = 28;
  bool has__weibo() const;
  void clear__weibo();
  static const int kWeiboFieldNumber = 28;
  const ::std::string& _weibo() const;
  void set__weibo(const ::std::string& value);
  #if LANG_CXX11
  void set__weibo(::std::string&& value);
  #endif
  void set__weibo(const char* value);
  void set__weibo(const char* value, size_t size);
  ::std::string* mutable__weibo();
  ::std::string* release__weibo();
  void set_allocated__weibo(::std::string* _weibo);

  // optional string _VerifyContent = 29;
  bool has__verifycontent() const;
  void clear__verifycontent();
  static const int kVerifyContentFieldNumber = 29;
  const ::std::string& _verifycontent() const;
  void set__verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set__verifycontent(::std::string&& value);
  #endif
  void set__verifycontent(const char* value);
  void set__verifycontent(const char* value, size_t size);
  ::std::string* mutable__verifycontent();
  ::std::string* release__verifycontent();
  void set_allocated__verifycontent(::std::string* _verifycontent);

  // optional string _Alias = 30;
  bool has__alias() const;
  void clear__alias();
  static const int kAliasFieldNumber = 30;
  const ::std::string& _alias() const;
  void set__alias(const ::std::string& value);
  #if LANG_CXX11
  void set__alias(::std::string&& value);
  #endif
  void set__alias(const char* value);
  void set__alias(const char* value, size_t size);
  ::std::string* mutable__alias();
  ::std::string* release__alias();
  void set_allocated__alias(::std::string* _alias);

  // optional string _ChatRoomOwner = 31;
  bool has__chatroomowner() const;
  void clear__chatroomowner();
  static const int kChatRoomOwnerFieldNumber = 31;
  const ::std::string& _chatroomowner() const;
  void set__chatroomowner(const ::std::string& value);
  #if LANG_CXX11
  void set__chatroomowner(::std::string&& value);
  #endif
  void set__chatroomowner(const char* value);
  void set__chatroomowner(const char* value, size_t size);
  ::std::string* mutable__chatroomowner();
  ::std::string* release__chatroomowner();
  void set_allocated__chatroomowner(::std::string* _chatroomowner);

  // optional string _WeiboNickname = 32;
  bool has__weibonickname() const;
  void clear__weibonickname();
  static const int kWeiboNicknameFieldNumber = 32;
  const ::std::string& _weibonickname() const;
  void set__weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set__weibonickname(::std::string&& value);
  #endif
  void set__weibonickname(const char* value);
  void set__weibonickname(const char* value, size_t size);
  ::std::string* mutable__weibonickname();
  ::std::string* release__weibonickname();
  void set_allocated__weibonickname(::std::string* _weibonickname);

  // optional string _AlbumBGImgID = 36;
  bool has__albumbgimgid() const;
  void clear__albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 36;
  const ::std::string& _albumbgimgid() const;
  void set__albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set__albumbgimgid(::std::string&& value);
  #endif
  void set__albumbgimgid(const char* value);
  void set__albumbgimgid(const char* value, size_t size);
  ::std::string* mutable__albumbgimgid();
  ::std::string* release__albumbgimgid();
  void set_allocated__albumbgimgid(::std::string* _albumbgimgid);

  // optional string _Country = 38;
  bool has__country() const;
  void clear__country();
  static const int kCountryFieldNumber = 38;
  const ::std::string& _country() const;
  void set__country(const ::std::string& value);
  #if LANG_CXX11
  void set__country(::std::string&& value);
  #endif
  void set__country(const char* value);
  void set__country(const char* value, size_t size);
  ::std::string* mutable__country();
  ::std::string* release__country();
  void set_allocated__country(::std::string* _country);

  // optional string _BigHeadImgUrl = 39;
  bool has__bigheadimgurl() const;
  void clear__bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 39;
  const ::std::string& _bigheadimgurl() const;
  void set__bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set__bigheadimgurl(::std::string&& value);
  #endif
  void set__bigheadimgurl(const char* value);
  void set__bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable__bigheadimgurl();
  ::std::string* release__bigheadimgurl();
  void set_allocated__bigheadimgurl(::std::string* _bigheadimgurl);

  // optional string _SmallHeadImgUrl = 40;
  bool has__smallheadimgurl() const;
  void clear__smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 40;
  const ::std::string& _smallheadimgurl() const;
  void set__smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set__smallheadimgurl(::std::string&& value);
  #endif
  void set__smallheadimgurl(const char* value);
  void set__smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable__smallheadimgurl();
  ::std::string* release__smallheadimgurl();
  void set_allocated__smallheadimgurl(::std::string* _smallheadimgurl);

  // optional string _MyBrandList = 41;
  bool has__mybrandlist() const;
  void clear__mybrandlist();
  static const int kMyBrandListFieldNumber = 41;
  const ::std::string& _mybrandlist() const;
  void set__mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set__mybrandlist(::std::string&& value);
  #endif
  void set__mybrandlist(const char* value);
  void set__mybrandlist(const char* value, size_t size);
  ::std::string* mutable__mybrandlist();
  ::std::string* release__mybrandlist();
  void set_allocated__mybrandlist(::std::string* _mybrandlist);

  // optional string _ChatRoomData = 43;
  bool has__chatroomdata() const;
  void clear__chatroomdata();
  static const int kChatRoomDataFieldNumber = 43;
  const ::std::string& _chatroomdata() const;
  void set__chatroomdata(const ::std::string& value);
  #if LANG_CXX11
  void set__chatroomdata(::std::string&& value);
  #endif
  void set__chatroomdata(const char* value);
  void set__chatroomdata(const char* value, size_t size);
  ::std::string* mutable__chatroomdata();
  ::std::string* release__chatroomdata();
  void set_allocated__chatroomdata(::std::string* _chatroomdata);

  // optional string _HeadImgMd5 = 44;
  bool has__headimgmd5() const;
  void clear__headimgmd5();
  static const int kHeadImgMd5FieldNumber = 44;
  const ::std::string& _headimgmd5() const;
  void set__headimgmd5(const ::std::string& value);
  #if LANG_CXX11
  void set__headimgmd5(::std::string&& value);
  #endif
  void set__headimgmd5(const char* value);
  void set__headimgmd5(const char* value, size_t size);
  ::std::string* mutable__headimgmd5();
  ::std::string* release__headimgmd5();
  void set_allocated__headimgmd5(::std::string* _headimgmd5);

  // optional string _EncryptUserName = 45;
  bool has__encryptusername() const;
  void clear__encryptusername();
  static const int kEncryptUserNameFieldNumber = 45;
  const ::std::string& _encryptusername() const;
  void set__encryptusername(const ::std::string& value);
  #if LANG_CXX11
  void set__encryptusername(::std::string&& value);
  #endif
  void set__encryptusername(const char* value);
  void set__encryptusername(const char* value, size_t size);
  ::std::string* mutable__encryptusername();
  ::std::string* release__encryptusername();
  void set_allocated__encryptusername(::std::string* _encryptusername);

  // optional string _IDCardNum = 46;
  bool has__idcardnum() const;
  void clear__idcardnum();
  static const int kIDCardNumFieldNumber = 46;
  const ::std::string& _idcardnum() const;
  void set__idcardnum(const ::std::string& value);
  #if LANG_CXX11
  void set__idcardnum(::std::string&& value);
  #endif
  void set__idcardnum(const char* value);
  void set__idcardnum(const char* value, size_t size);
  ::std::string* mutable__idcardnum();
  ::std::string* release__idcardnum();
  void set_allocated__idcardnum(::std::string* _idcardnum);

  // optional string _RealName = 47;
  bool has__realname() const;
  void clear__realname();
  static const int kRealNameFieldNumber = 47;
  const ::std::string& _realname() const;
  void set__realname(const ::std::string& value);
  #if LANG_CXX11
  void set__realname(::std::string&& value);
  #endif
  void set__realname(const char* value);
  void set__realname(const char* value, size_t size);
  ::std::string* mutable__realname();
  ::std::string* release__realname();
  void set_allocated__realname(::std::string* _realname);

  // optional string _MobileHash = 48;
  bool has__mobilehash() const;
  void clear__mobilehash();
  static const int kMobileHashFieldNumber = 48;
  const ::std::string& _mobilehash() const;
  void set__mobilehash(const ::std::string& value);
  #if LANG_CXX11
  void set__mobilehash(::std::string&& value);
  #endif
  void set__mobilehash(const char* value);
  void set__mobilehash(const char* value, size_t size);
  ::std::string* mutable__mobilehash();
  ::std::string* release__mobilehash();
  void set_allocated__mobilehash(::std::string* _mobilehash);

  // optional string _MobileFullHash = 49;
  bool has__mobilefullhash() const;
  void clear__mobilefullhash();
  static const int kMobileFullHashFieldNumber = 49;
  const ::std::string& _mobilefullhash() const;
  void set__mobilefullhash(const ::std::string& value);
  #if LANG_CXX11
  void set__mobilefullhash(::std::string&& value);
  #endif
  void set__mobilefullhash(const char* value);
  void set__mobilefullhash(const char* value, size_t size);
  ::std::string* mutable__mobilefullhash();
  ::std::string* release__mobilefullhash();
  void set_allocated__mobilefullhash(::std::string* _mobilefullhash);

  // optional string _ExtInfo = 54;
  bool has__extinfo() const;
  void clear__extinfo();
  static const int kExtInfoFieldNumber = 54;
  const ::std::string& _extinfo() const;
  void set__extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set__extinfo(::std::string&& value);
  #endif
  void set__extinfo(const char* value);
  void set__extinfo(const char* value, size_t size);
  ::std::string* mutable__extinfo();
  ::std::string* release__extinfo();
  void set_allocated__extinfo(::std::string* _extinfo);

  // optional string _Description = 59;
  bool has__description() const;
  void clear__description();
  static const int kDescriptionFieldNumber = 59;
  const ::std::string& _description() const;
  void set__description(const ::std::string& value);
  #if LANG_CXX11
  void set__description(::std::string&& value);
  #endif
  void set__description(const char* value);
  void set__description(const char* value, size_t size);
  ::std::string* mutable__description();
  ::std::string* release__description();
  void set_allocated__description(::std::string* _description);

  // optional string _CardImgUrl = 60;
  bool has__cardimgurl() const;
  void clear__cardimgurl();
  static const int kCardImgUrlFieldNumber = 60;
  const ::std::string& _cardimgurl() const;
  void set__cardimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set__cardimgurl(::std::string&& value);
  #endif
  void set__cardimgurl(const char* value);
  void set__cardimgurl(const char* value, size_t size);
  ::std::string* mutable__cardimgurl();
  ::std::string* release__cardimgurl();
  void set_allocated__cardimgurl(::std::string* _cardimgurl);

  // optional string _LabelIDList = 61;
  bool has__labelidlist() const;
  void clear__labelidlist();
  static const int kLabelIDListFieldNumber = 61;
  const ::std::string& _labelidlist() const;
  void set__labelidlist(const ::std::string& value);
  #if LANG_CXX11
  void set__labelidlist(::std::string&& value);
  #endif
  void set__labelidlist(const char* value);
  void set__labelidlist(const char* value, size_t size);
  ::std::string* mutable__labelidlist();
  ::std::string* release__labelidlist();
  void set_allocated__labelidlist(::std::string* _labelidlist);

  // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
  bool has__username() const;
  void clear__username();
  static const int kUserNameFieldNumber = 1;
  const ::MMPro::micromsg::SKBuiltinString_t& _username() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__username();
  ::MMPro::micromsg::SKBuiltinString_t* release__username();
  void set_allocated__username(::MMPro::micromsg::SKBuiltinString_t* _username);

  // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
  bool has__nickname() const;
  void clear__nickname();
  static const int kNickNameFieldNumber = 2;
  const ::MMPro::micromsg::SKBuiltinString_t& _nickname() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__nickname();
  ::MMPro::micromsg::SKBuiltinString_t* release__nickname();
  void set_allocated__nickname(::MMPro::micromsg::SKBuiltinString_t* _nickname);

  // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
  bool has__pyinitial() const;
  void clear__pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::MMPro::micromsg::SKBuiltinString_t& _pyinitial() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__pyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* release__pyinitial();
  void set_allocated__pyinitial(::MMPro::micromsg::SKBuiltinString_t* _pyinitial);

  // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
  bool has__quanpin() const;
  void clear__quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::MMPro::micromsg::SKBuiltinString_t& _quanpin() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__quanpin();
  ::MMPro::micromsg::SKBuiltinString_t* release__quanpin();
  void set_allocated__quanpin(::MMPro::micromsg::SKBuiltinString_t* _quanpin);

  // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
  bool has__imgbuf() const;
  void clear__imgbuf();
  static const int kImgBufFieldNumber = 6;
  const ::MMPro::micromsg::SKBuiltinBuffer_t& _imgbuf() const;
  ::MMPro::micromsg::SKBuiltinBuffer_t* mutable__imgbuf();
  ::MMPro::micromsg::SKBuiltinBuffer_t* release__imgbuf();
  void set_allocated__imgbuf(::MMPro::micromsg::SKBuiltinBuffer_t* _imgbuf);

  // optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
  bool has__remark() const;
  void clear__remark();
  static const int kRemarkFieldNumber = 10;
  const ::MMPro::micromsg::SKBuiltinString_t& _remark() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__remark();
  ::MMPro::micromsg::SKBuiltinString_t* release__remark();
  void set_allocated__remark(::MMPro::micromsg::SKBuiltinString_t* _remark);

  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
  bool has__remarkpyinitial() const;
  void clear__remarkpyinitial();
  static const int kRemarkPYInitialFieldNumber = 11;
  const ::MMPro::micromsg::SKBuiltinString_t& _remarkpyinitial() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__remarkpyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* release__remarkpyinitial();
  void set_allocated__remarkpyinitial(::MMPro::micromsg::SKBuiltinString_t* _remarkpyinitial);

  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
  bool has__remarkquanpin() const;
  void clear__remarkquanpin();
  static const int kRemarkQuanPinFieldNumber = 12;
  const ::MMPro::micromsg::SKBuiltinString_t& _remarkquanpin() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__remarkquanpin();
  ::MMPro::micromsg::SKBuiltinString_t* release__remarkquanpin();
  void set_allocated__remarkquanpin(::MMPro::micromsg::SKBuiltinString_t* _remarkquanpin);

  // optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
  bool has__domainlist() const;
  void clear__domainlist();
  static const int kDomainListFieldNumber = 16;
  const ::MMPro::micromsg::SKBuiltinString_t& _domainlist() const;
  ::MMPro::micromsg::SKBuiltinString_t* mutable__domainlist();
  ::MMPro::micromsg::SKBuiltinString_t* release__domainlist();
  void set_allocated__domainlist(::MMPro::micromsg::SKBuiltinString_t* _domainlist);

  // optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
  bool has__snsuserinfo() const;
  void clear__snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 37;
  const ::MMPro::micromsg::SnsUserInfo& _snsuserinfo() const;
  ::MMPro::micromsg::SnsUserInfo* mutable__snsuserinfo();
  ::MMPro::micromsg::SnsUserInfo* release__snsuserinfo();
  void set_allocated__snsuserinfo(::MMPro::micromsg::SnsUserInfo* _snsuserinfo);

  // optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
  bool has__customizedinfo() const;
  void clear__customizedinfo();
  static const int kCustomizedInfoFieldNumber = 42;
  const ::MMPro::micromsg::CustomizedInfo& _customizedinfo() const;
  ::MMPro::micromsg::CustomizedInfo* mutable__customizedinfo();
  ::MMPro::micromsg::CustomizedInfo* release__customizedinfo();
  void set_allocated__customizedinfo(::MMPro::micromsg::CustomizedInfo* _customizedinfo);

  // optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
  bool has__additionalcontactlist() const;
  void clear__additionalcontactlist();
  static const int kAdditionalContactListFieldNumber = 50;
  const ::MMPro::micromsg::AdditionalContactList& _additionalcontactlist() const;
  ::MMPro::micromsg::AdditionalContactList* mutable__additionalcontactlist();
  ::MMPro::micromsg::AdditionalContactList* release__additionalcontactlist();
  void set_allocated__additionalcontactlist(::MMPro::micromsg::AdditionalContactList* _additionalcontactlist);

  // optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
  bool has__newchatroomdata() const;
  void clear__newchatroomdata();
  static const int kNewChatroomDataFieldNumber = 57;
  const ::MMPro::micromsg::ChatRoomMemberData& _newchatroomdata() const;
  ::MMPro::micromsg::ChatRoomMemberData* mutable__newchatroomdata();
  ::MMPro::micromsg::ChatRoomMemberData* release__newchatroomdata();
  void set_allocated__newchatroomdata(::MMPro::micromsg::ChatRoomMemberData* _newchatroomdata);

  // optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
  bool has__phonenumberlist() const;
  void clear__phonenumberlist();
  static const int kPhoneNumberListFieldNumber = 62;
  const ::MMPro::micromsg::PhoneNumberList& _phonenumberlist() const;
  ::MMPro::micromsg::PhoneNumberList* mutable__phonenumberlist();
  ::MMPro::micromsg::PhoneNumberList* release__phonenumberlist();
  void set_allocated__phonenumberlist(::MMPro::micromsg::PhoneNumberList* _phonenumberlist);

  // required int32 _Sex = 5;
  bool has__sex() const;
  void clear__sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 _sex() const;
  void set__sex(::google::protobuf::int32 value);

  // required uint32 _BitMask = 7;
  bool has__bitmask() const;
  void clear__bitmask();
  static const int kBitMaskFieldNumber = 7;
  ::google::protobuf::uint32 _bitmask() const;
  void set__bitmask(::google::protobuf::uint32 value);

  // required uint32 _BitVal = 8;
  bool has__bitval() const;
  void clear__bitval();
  static const int kBitValFieldNumber = 8;
  ::google::protobuf::uint32 _bitval() const;
  void set__bitval(::google::protobuf::uint32 value);

  // required uint32 _ImgFlag = 9;
  bool has__imgflag() const;
  void clear__imgflag();
  static const int kImgFlagFieldNumber = 9;
  ::google::protobuf::uint32 _imgflag() const;
  void set__imgflag(::google::protobuf::uint32 value);

  // optional uint32 _ContactType = 13;
  bool has__contacttype() const;
  void clear__contacttype();
  static const int kContactTypeFieldNumber = 13;
  ::google::protobuf::uint32 _contacttype() const;
  void set__contacttype(::google::protobuf::uint32 value);

  // optional uint32 _RoomInfoCount = 14;
  bool has__roominfocount() const;
  void clear__roominfocount();
  static const int kRoomInfoCountFieldNumber = 14;
  ::google::protobuf::uint32 _roominfocount() const;
  void set__roominfocount(::google::protobuf::uint32 value);

  // optional uint32 _ChatRoomNotify = 17;
  bool has__chatroomnotify() const;
  void clear__chatroomnotify();
  static const int kChatRoomNotifyFieldNumber = 17;
  ::google::protobuf::uint32 _chatroomnotify() const;
  void set__chatroomnotify(::google::protobuf::uint32 value);

  // optional uint32 _AddContactScene = 18;
  bool has__addcontactscene() const;
  void clear__addcontactscene();
  static const int kAddContactSceneFieldNumber = 18;
  ::google::protobuf::uint32 _addcontactscene() const;
  void set__addcontactscene(::google::protobuf::uint32 value);

  // optional uint32 _PersonalCard = 22;
  bool has__personalcard() const;
  void clear__personalcard();
  static const int kPersonalCardFieldNumber = 22;
  ::google::protobuf::uint32 _personalcard() const;
  void set__personalcard(::google::protobuf::uint32 value);

  // optional uint32 _HasWeiXinHdHeadImg = 23;
  bool has__hasweixinhdheadimg() const;
  void clear__hasweixinhdheadimg();
  static const int kHasWeiXinHdHeadImgFieldNumber = 23;
  ::google::protobuf::uint32 _hasweixinhdheadimg() const;
  void set__hasweixinhdheadimg(::google::protobuf::uint32 value);

  // optional uint32 _VerifyFlag = 24;
  bool has__verifyflag() const;
  void clear__verifyflag();
  static const int kVerifyFlagFieldNumber = 24;
  ::google::protobuf::uint32 _verifyflag() const;
  void set__verifyflag(::google::protobuf::uint32 value);

  // optional int32 _Level = 26;
  bool has__level() const;
  void clear__level();
  static const int kLevelFieldNumber = 26;
  ::google::protobuf::int32 _level() const;
  void set__level(::google::protobuf::int32 value);

  // optional uint32 _Source = 27;
  bool has__source() const;
  void clear__source();
  static const int kSourceFieldNumber = 27;
  ::google::protobuf::uint32 _source() const;
  void set__source(::google::protobuf::uint32 value);

  // optional uint32 _WeiboFlag = 33;
  bool has__weiboflag() const;
  void clear__weiboflag();
  static const int kWeiboFlagFieldNumber = 33;
  ::google::protobuf::uint32 _weiboflag() const;
  void set__weiboflag(::google::protobuf::uint32 value);

  // optional int32 _AlbumStyle = 34;
  bool has__albumstyle() const;
  void clear__albumstyle();
  static const int kAlbumStyleFieldNumber = 34;
  ::google::protobuf::int32 _albumstyle() const;
  void set__albumstyle(::google::protobuf::int32 value);

  // optional int32 _AlbumFlag = 35;
  bool has__albumflag() const;
  void clear__albumflag();
  static const int kAlbumFlagFieldNumber = 35;
  ::google::protobuf::int32 _albumflag() const;
  void set__albumflag(::google::protobuf::int32 value);

  // optional uint32 _ChatroomVersion = 53;
  bool has__chatroomversion() const;
  void clear__chatroomversion();
  static const int kChatroomVersionFieldNumber = 53;
  ::google::protobuf::uint32 _chatroomversion() const;
  void set__chatroomversion(::google::protobuf::uint32 value);

  // optional uint32 _ChatroomMaxCount = 55;
  bool has__chatroommaxcount() const;
  void clear__chatroommaxcount();
  static const int kChatroomMaxCountFieldNumber = 55;
  ::google::protobuf::uint32 _chatroommaxcount() const;
  void set__chatroommaxcount(::google::protobuf::uint32 value);

  // optional uint32 _ChatroomType = 56;
  bool has__chatroomtype() const;
  void clear__chatroomtype();
  static const int kChatroomTypeFieldNumber = 56;
  ::google::protobuf::uint32 _chatroomtype() const;
  void set__chatroomtype(::google::protobuf::uint32 value);

  // optional int32 _DeleteFlag = 58;
  bool has__deleteflag() const;
  void clear__deleteflag();
  static const int kDeleteFlagFieldNumber = 58;
  ::google::protobuf::int32 _deleteflag() const;
  void set__deleteflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.ModContact)
 private:
  void set_has__username();
  void clear_has__username();
  void set_has__nickname();
  void clear_has__nickname();
  void set_has__pyinitial();
  void clear_has__pyinitial();
  void set_has__quanpin();
  void clear_has__quanpin();
  void set_has__sex();
  void clear_has__sex();
  void set_has__imgbuf();
  void clear_has__imgbuf();
  void set_has__bitmask();
  void clear_has__bitmask();
  void set_has__bitval();
  void clear_has__bitval();
  void set_has__imgflag();
  void clear_has__imgflag();
  void set_has__remark();
  void clear_has__remark();
  void set_has__remarkpyinitial();
  void clear_has__remarkpyinitial();
  void set_has__remarkquanpin();
  void clear_has__remarkquanpin();
  void set_has__contacttype();
  void clear_has__contacttype();
  void set_has__roominfocount();
  void clear_has__roominfocount();
  void set_has__domainlist();
  void clear_has__domainlist();
  void set_has__chatroomnotify();
  void clear_has__chatroomnotify();
  void set_has__addcontactscene();
  void clear_has__addcontactscene();
  void set_has__province();
  void clear_has__province();
  void set_has__city();
  void clear_has__city();
  void set_has__signature();
  void clear_has__signature();
  void set_has__personalcard();
  void clear_has__personalcard();
  void set_has__hasweixinhdheadimg();
  void clear_has__hasweixinhdheadimg();
  void set_has__verifyflag();
  void clear_has__verifyflag();
  void set_has__verifyinfo();
  void clear_has__verifyinfo();
  void set_has__level();
  void clear_has__level();
  void set_has__source();
  void clear_has__source();
  void set_has__weibo();
  void clear_has__weibo();
  void set_has__verifycontent();
  void clear_has__verifycontent();
  void set_has__alias();
  void clear_has__alias();
  void set_has__chatroomowner();
  void clear_has__chatroomowner();
  void set_has__weibonickname();
  void clear_has__weibonickname();
  void set_has__weiboflag();
  void clear_has__weiboflag();
  void set_has__albumstyle();
  void clear_has__albumstyle();
  void set_has__albumflag();
  void clear_has__albumflag();
  void set_has__albumbgimgid();
  void clear_has__albumbgimgid();
  void set_has__snsuserinfo();
  void clear_has__snsuserinfo();
  void set_has__country();
  void clear_has__country();
  void set_has__bigheadimgurl();
  void clear_has__bigheadimgurl();
  void set_has__smallheadimgurl();
  void clear_has__smallheadimgurl();
  void set_has__mybrandlist();
  void clear_has__mybrandlist();
  void set_has__customizedinfo();
  void clear_has__customizedinfo();
  void set_has__chatroomdata();
  void clear_has__chatroomdata();
  void set_has__headimgmd5();
  void clear_has__headimgmd5();
  void set_has__encryptusername();
  void clear_has__encryptusername();
  void set_has__idcardnum();
  void clear_has__idcardnum();
  void set_has__realname();
  void clear_has__realname();
  void set_has__mobilehash();
  void clear_has__mobilehash();
  void set_has__mobilefullhash();
  void clear_has__mobilefullhash();
  void set_has__additionalcontactlist();
  void clear_has__additionalcontactlist();
  void set_has__chatroomversion();
  void clear_has__chatroomversion();
  void set_has__extinfo();
  void clear_has__extinfo();
  void set_has__chatroommaxcount();
  void clear_has__chatroommaxcount();
  void set_has__chatroomtype();
  void clear_has__chatroomtype();
  void set_has__newchatroomdata();
  void clear_has__newchatroomdata();
  void set_has__deleteflag();
  void clear_has__deleteflag();
  void set_has__description();
  void clear_has__description();
  void set_has__cardimgurl();
  void clear_has__cardimgurl();
  void set_has__labelidlist();
  void clear_has__labelidlist();
  void set_has__phonenumberlist();
  void clear_has__phonenumberlist();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo > _roominfolist_;
  ::google::protobuf::internal::ArenaStringPtr _province_;
  ::google::protobuf::internal::ArenaStringPtr _city_;
  ::google::protobuf::internal::ArenaStringPtr _signature_;
  ::google::protobuf::internal::ArenaStringPtr _verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr _weibo_;
  ::google::protobuf::internal::ArenaStringPtr _verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr _alias_;
  ::google::protobuf::internal::ArenaStringPtr _chatroomowner_;
  ::google::protobuf::internal::ArenaStringPtr _weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr _albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr _country_;
  ::google::protobuf::internal::ArenaStringPtr _bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr _smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr _mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr _chatroomdata_;
  ::google::protobuf::internal::ArenaStringPtr _headimgmd5_;
  ::google::protobuf::internal::ArenaStringPtr _encryptusername_;
  ::google::protobuf::internal::ArenaStringPtr _idcardnum_;
  ::google::protobuf::internal::ArenaStringPtr _realname_;
  ::google::protobuf::internal::ArenaStringPtr _mobilehash_;
  ::google::protobuf::internal::ArenaStringPtr _mobilefullhash_;
  ::google::protobuf::internal::ArenaStringPtr _extinfo_;
  ::google::protobuf::internal::ArenaStringPtr _description_;
  ::google::protobuf::internal::ArenaStringPtr _cardimgurl_;
  ::google::protobuf::internal::ArenaStringPtr _labelidlist_;
  ::MMPro::micromsg::SKBuiltinString_t* _username_;
  ::MMPro::micromsg::SKBuiltinString_t* _nickname_;
  ::MMPro::micromsg::SKBuiltinString_t* _pyinitial_;
  ::MMPro::micromsg::SKBuiltinString_t* _quanpin_;
  ::MMPro::micromsg::SKBuiltinBuffer_t* _imgbuf_;
  ::MMPro::micromsg::SKBuiltinString_t* _remark_;
  ::MMPro::micromsg::SKBuiltinString_t* _remarkpyinitial_;
  ::MMPro::micromsg::SKBuiltinString_t* _remarkquanpin_;
  ::MMPro::micromsg::SKBuiltinString_t* _domainlist_;
  ::MMPro::micromsg::SnsUserInfo* _snsuserinfo_;
  ::MMPro::micromsg::CustomizedInfo* _customizedinfo_;
  ::MMPro::micromsg::AdditionalContactList* _additionalcontactlist_;
  ::MMPro::micromsg::ChatRoomMemberData* _newchatroomdata_;
  ::MMPro::micromsg::PhoneNumberList* _phonenumberlist_;
  ::google::protobuf::int32 _sex_;
  ::google::protobuf::uint32 _bitmask_;
  ::google::protobuf::uint32 _bitval_;
  ::google::protobuf::uint32 _imgflag_;
  ::google::protobuf::uint32 _contacttype_;
  ::google::protobuf::uint32 _roominfocount_;
  ::google::protobuf::uint32 _chatroomnotify_;
  ::google::protobuf::uint32 _addcontactscene_;
  ::google::protobuf::uint32 _personalcard_;
  ::google::protobuf::uint32 _hasweixinhdheadimg_;
  ::google::protobuf::uint32 _verifyflag_;
  ::google::protobuf::int32 _level_;
  ::google::protobuf::uint32 _source_;
  ::google::protobuf::uint32 _weiboflag_;
  ::google::protobuf::int32 _albumstyle_;
  ::google::protobuf::int32 _albumflag_;
  ::google::protobuf::uint32 _chatroomversion_;
  ::google::protobuf::uint32 _chatroommaxcount_;
  ::google::protobuf::uint32 _chatroomtype_;
  ::google::protobuf::int32 _deleteflag_;
  mutable int _cached_size_;
  friend struct protobuf_ModContact_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModContact

// required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
inline bool ModContact::has__username() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModContact::set_has__username() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModContact::clear_has__username() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModContact::clear__username() {
  if (_username_ != NULL) _username_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__username();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._UserName)
  return _username_ != NULL ? *_username_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__username() {
  set_has__username();
  if (_username_ == NULL) {
    _username_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._UserName)
  return _username_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._UserName)
  clear_has__username();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _username_;
  _username_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__username(::MMPro::micromsg::SKBuiltinString_t* _username) {
  delete _username_;
  _username_ = _username;
  if (_username) {
    set_has__username();
  } else {
    clear_has__username();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._UserName)
}

// required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
inline bool ModContact::has__nickname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ModContact::set_has__nickname() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ModContact::clear_has__nickname() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ModContact::clear__nickname() {
  if (_nickname_ != NULL) _nickname_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__nickname();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_nickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._NickName)
  return _nickname_ != NULL ? *_nickname_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__nickname() {
  set_has__nickname();
  if (_nickname_ == NULL) {
    _nickname_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._NickName)
  return _nickname_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__nickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._NickName)
  clear_has__nickname();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _nickname_;
  _nickname_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__nickname(::MMPro::micromsg::SKBuiltinString_t* _nickname) {
  delete _nickname_;
  _nickname_ = _nickname;
  if (_nickname) {
    set_has__nickname();
  } else {
    clear_has__nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._NickName)
}

// required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
inline bool ModContact::has__pyinitial() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ModContact::set_has__pyinitial() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ModContact::clear_has__pyinitial() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ModContact::clear__pyinitial() {
  if (_pyinitial_ != NULL) _pyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__pyinitial();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_pyinitial() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PYInitial)
  return _pyinitial_ != NULL ? *_pyinitial_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__pyinitial() {
  set_has__pyinitial();
  if (_pyinitial_ == NULL) {
    _pyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._PYInitial)
  return _pyinitial_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__pyinitial() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._PYInitial)
  clear_has__pyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _pyinitial_;
  _pyinitial_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__pyinitial(::MMPro::micromsg::SKBuiltinString_t* _pyinitial) {
  delete _pyinitial_;
  _pyinitial_ = _pyinitial;
  if (_pyinitial) {
    set_has__pyinitial();
  } else {
    clear_has__pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._PYInitial)
}

// required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
inline bool ModContact::has__quanpin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ModContact::set_has__quanpin() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ModContact::clear_has__quanpin() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ModContact::clear__quanpin() {
  if (_quanpin_ != NULL) _quanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__quanpin();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_quanpin() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._QuanPin)
  return _quanpin_ != NULL ? *_quanpin_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__quanpin() {
  set_has__quanpin();
  if (_quanpin_ == NULL) {
    _quanpin_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._QuanPin)
  return _quanpin_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__quanpin() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._QuanPin)
  clear_has__quanpin();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _quanpin_;
  _quanpin_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__quanpin(::MMPro::micromsg::SKBuiltinString_t* _quanpin) {
  delete _quanpin_;
  _quanpin_ = _quanpin;
  if (_quanpin) {
    set_has__quanpin();
  } else {
    clear_has__quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._QuanPin)
}

// required int32 _Sex = 5;
inline bool ModContact::has__sex() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ModContact::set_has__sex() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ModContact::clear_has__sex() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ModContact::clear__sex() {
  _sex_ = 0;
  clear_has__sex();
}
inline ::google::protobuf::int32 ModContact::_sex() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Sex)
  return _sex_;
}
inline void ModContact::set__sex(::google::protobuf::int32 value) {
  set_has__sex();
  _sex_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Sex)
}

// required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
inline bool ModContact::has__imgbuf() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ModContact::set_has__imgbuf() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ModContact::clear_has__imgbuf() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ModContact::clear__imgbuf() {
  if (_imgbuf_ != NULL) _imgbuf_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has__imgbuf();
}
inline const ::MMPro::micromsg::SKBuiltinBuffer_t& ModContact::_imgbuf() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ImgBuf)
  return _imgbuf_ != NULL ? *_imgbuf_
                         : *::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinBuffer_t* ModContact::mutable__imgbuf() {
  set_has__imgbuf();
  if (_imgbuf_ == NULL) {
    _imgbuf_ = new ::MMPro::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ImgBuf)
  return _imgbuf_;
}
inline ::MMPro::micromsg::SKBuiltinBuffer_t* ModContact::release__imgbuf() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ImgBuf)
  clear_has__imgbuf();
  ::MMPro::micromsg::SKBuiltinBuffer_t* temp = _imgbuf_;
  _imgbuf_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__imgbuf(::MMPro::micromsg::SKBuiltinBuffer_t* _imgbuf) {
  delete _imgbuf_;
  _imgbuf_ = _imgbuf;
  if (_imgbuf) {
    set_has__imgbuf();
  } else {
    clear_has__imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ImgBuf)
}

// required uint32 _BitMask = 7;
inline bool ModContact::has__bitmask() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ModContact::set_has__bitmask() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ModContact::clear_has__bitmask() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ModContact::clear__bitmask() {
  _bitmask_ = 0u;
  clear_has__bitmask();
}
inline ::google::protobuf::uint32 ModContact::_bitmask() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BitMask)
  return _bitmask_;
}
inline void ModContact::set__bitmask(::google::protobuf::uint32 value) {
  set_has__bitmask();
  _bitmask_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BitMask)
}

// required uint32 _BitVal = 8;
inline bool ModContact::has__bitval() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ModContact::set_has__bitval() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ModContact::clear_has__bitval() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ModContact::clear__bitval() {
  _bitval_ = 0u;
  clear_has__bitval();
}
inline ::google::protobuf::uint32 ModContact::_bitval() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BitVal)
  return _bitval_;
}
inline void ModContact::set__bitval(::google::protobuf::uint32 value) {
  set_has__bitval();
  _bitval_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BitVal)
}

// required uint32 _ImgFlag = 9;
inline bool ModContact::has__imgflag() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ModContact::set_has__imgflag() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ModContact::clear_has__imgflag() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ModContact::clear__imgflag() {
  _imgflag_ = 0u;
  clear_has__imgflag();
}
inline ::google::protobuf::uint32 ModContact::_imgflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ImgFlag)
  return _imgflag_;
}
inline void ModContact::set__imgflag(::google::protobuf::uint32 value) {
  set_has__imgflag();
  _imgflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ImgFlag)
}

// optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
inline bool ModContact::has__remark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ModContact::set_has__remark() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ModContact::clear_has__remark() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ModContact::clear__remark() {
  if (_remark_ != NULL) _remark_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remark();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remark() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Remark)
  return _remark_ != NULL ? *_remark_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remark() {
  set_has__remark();
  if (_remark_ == NULL) {
    _remark_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Remark)
  return _remark_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remark() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Remark)
  clear_has__remark();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remark_;
  _remark_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__remark(::MMPro::micromsg::SKBuiltinString_t* _remark) {
  delete _remark_;
  _remark_ = _remark;
  if (_remark) {
    set_has__remark();
  } else {
    clear_has__remark();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Remark)
}

// optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
inline bool ModContact::has__remarkpyinitial() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ModContact::set_has__remarkpyinitial() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ModContact::clear_has__remarkpyinitial() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ModContact::clear__remarkpyinitial() {
  if (_remarkpyinitial_ != NULL) _remarkpyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remarkpyinitial();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RemarkPYInitial)
  return _remarkpyinitial_ != NULL ? *_remarkpyinitial_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remarkpyinitial() {
  set_has__remarkpyinitial();
  if (_remarkpyinitial_ == NULL) {
    _remarkpyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RemarkPYInitial)
  return _remarkpyinitial_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remarkpyinitial() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RemarkPYInitial)
  clear_has__remarkpyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remarkpyinitial_;
  _remarkpyinitial_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__remarkpyinitial(::MMPro::micromsg::SKBuiltinString_t* _remarkpyinitial) {
  delete _remarkpyinitial_;
  _remarkpyinitial_ = _remarkpyinitial;
  if (_remarkpyinitial) {
    set_has__remarkpyinitial();
  } else {
    clear_has__remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RemarkPYInitial)
}

// optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
inline bool ModContact::has__remarkquanpin() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ModContact::set_has__remarkquanpin() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ModContact::clear_has__remarkquanpin() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ModContact::clear__remarkquanpin() {
  if (_remarkquanpin_ != NULL) _remarkquanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remarkquanpin();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remarkquanpin() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RemarkQuanPin)
  return _remarkquanpin_ != NULL ? *_remarkquanpin_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remarkquanpin() {
  set_has__remarkquanpin();
  if (_remarkquanpin_ == NULL) {
    _remarkquanpin_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RemarkQuanPin)
  return _remarkquanpin_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remarkquanpin() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RemarkQuanPin)
  clear_has__remarkquanpin();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remarkquanpin_;
  _remarkquanpin_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__remarkquanpin(::MMPro::micromsg::SKBuiltinString_t* _remarkquanpin) {
  delete _remarkquanpin_;
  _remarkquanpin_ = _remarkquanpin;
  if (_remarkquanpin) {
    set_has__remarkquanpin();
  } else {
    clear_has__remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RemarkQuanPin)
}

// optional uint32 _ContactType = 13;
inline bool ModContact::has__contacttype() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ModContact::set_has__contacttype() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ModContact::clear_has__contacttype() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ModContact::clear__contacttype() {
  _contacttype_ = 0u;
  clear_has__contacttype();
}
inline ::google::protobuf::uint32 ModContact::_contacttype() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ContactType)
  return _contacttype_;
}
inline void ModContact::set__contacttype(::google::protobuf::uint32 value) {
  set_has__contacttype();
  _contacttype_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ContactType)
}

// optional uint32 _RoomInfoCount = 14;
inline bool ModContact::has__roominfocount() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ModContact::set_has__roominfocount() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ModContact::clear_has__roominfocount() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ModContact::clear__roominfocount() {
  _roominfocount_ = 0u;
  clear_has__roominfocount();
}
inline ::google::protobuf::uint32 ModContact::_roominfocount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RoomInfoCount)
  return _roominfocount_;
}
inline void ModContact::set__roominfocount(::google::protobuf::uint32 value) {
  set_has__roominfocount();
  _roominfocount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._RoomInfoCount)
}

// repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
inline int ModContact::_roominfolist_size() const {
  return _roominfolist_.size();
}
inline void ModContact::clear__roominfolist() {
  _roominfolist_.Clear();
}
inline const ::MMPro::micromsg::RoomInfo& ModContact::_roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Get(index);
}
inline ::MMPro::micromsg::RoomInfo* ModContact::mutable__roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Mutable(index);
}
inline ::MMPro::micromsg::RoomInfo* ModContact::add__roominfolist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >*
ModContact::mutable__roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.ModContact._RoomInfoList)
  return &_roominfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >&
ModContact::_roominfolist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_;
}

// optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
inline bool ModContact::has__domainlist() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ModContact::set_has__domainlist() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ModContact::clear_has__domainlist() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ModContact::clear__domainlist() {
  if (_domainlist_ != NULL) _domainlist_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__domainlist();
}
inline const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_domainlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._DomainList)
  return _domainlist_ != NULL ? *_domainlist_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__domainlist() {
  set_has__domainlist();
  if (_domainlist_ == NULL) {
    _domainlist_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._DomainList)
  return _domainlist_;
}
inline ::MMPro::micromsg::SKBuiltinString_t* ModContact::release__domainlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._DomainList)
  clear_has__domainlist();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _domainlist_;
  _domainlist_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__domainlist(::MMPro::micromsg::SKBuiltinString_t* _domainlist) {
  delete _domainlist_;
  _domainlist_ = _domainlist;
  if (_domainlist) {
    set_has__domainlist();
  } else {
    clear_has__domainlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._DomainList)
}

// optional uint32 _ChatRoomNotify = 17;
inline bool ModContact::has__chatroomnotify() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ModContact::set_has__chatroomnotify() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ModContact::clear_has__chatroomnotify() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ModContact::clear__chatroomnotify() {
  _chatroomnotify_ = 0u;
  clear_has__chatroomnotify();
}
inline ::google::protobuf::uint32 ModContact::_chatroomnotify() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomNotify)
  return _chatroomnotify_;
}
inline void ModContact::set__chatroomnotify(::google::protobuf::uint32 value) {
  set_has__chatroomnotify();
  _chatroomnotify_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomNotify)
}

// optional uint32 _AddContactScene = 18;
inline bool ModContact::has__addcontactscene() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ModContact::set_has__addcontactscene() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ModContact::clear_has__addcontactscene() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ModContact::clear__addcontactscene() {
  _addcontactscene_ = 0u;
  clear_has__addcontactscene();
}
inline ::google::protobuf::uint32 ModContact::_addcontactscene() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AddContactScene)
  return _addcontactscene_;
}
inline void ModContact::set__addcontactscene(::google::protobuf::uint32 value) {
  set_has__addcontactscene();
  _addcontactscene_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AddContactScene)
}

// optional string _Province = 19;
inline bool ModContact::has__province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModContact::set_has__province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModContact::clear_has__province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModContact::clear__province() {
  _province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__province();
}
inline const ::std::string& ModContact::_province() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Province)
  return _province_.GetNoArena();
}
inline void ModContact::set__province(const ::std::string& value) {
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Province)
}
#if LANG_CXX11
inline void ModContact::set__province(::std::string&& value) {
  set_has__province();
  _province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Province)
}
#endif
inline void ModContact::set__province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Province)
}
inline void ModContact::set__province(const char* value, size_t size) {
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Province)
}
inline ::std::string* ModContact::mutable__province() {
  set_has__province();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Province)
  return _province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__province() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Province)
  clear_has__province();
  return _province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__province(::std::string* _province) {
  if (_province != NULL) {
    set_has__province();
  } else {
    clear_has__province();
  }
  _province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _province);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Province)
}

// optional string _City = 20;
inline bool ModContact::has__city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModContact::set_has__city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModContact::clear_has__city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModContact::clear__city() {
  _city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__city();
}
inline const ::std::string& ModContact::_city() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._City)
  return _city_.GetNoArena();
}
inline void ModContact::set__city(const ::std::string& value) {
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._City)
}
#if LANG_CXX11
inline void ModContact::set__city(::std::string&& value) {
  set_has__city();
  _city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._City)
}
#endif
inline void ModContact::set__city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._City)
}
inline void ModContact::set__city(const char* value, size_t size) {
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._City)
}
inline ::std::string* ModContact::mutable__city() {
  set_has__city();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._City)
  return _city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__city() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._City)
  clear_has__city();
  return _city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__city(::std::string* _city) {
  if (_city != NULL) {
    set_has__city();
  } else {
    clear_has__city();
  }
  _city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _city);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._City)
}

// optional string _Signature = 21;
inline bool ModContact::has__signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModContact::set_has__signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModContact::clear_has__signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModContact::clear__signature() {
  _signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__signature();
}
inline const ::std::string& ModContact::_signature() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Signature)
  return _signature_.GetNoArena();
}
inline void ModContact::set__signature(const ::std::string& value) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Signature)
}
#if LANG_CXX11
inline void ModContact::set__signature(::std::string&& value) {
  set_has__signature();
  _signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Signature)
}
#endif
inline void ModContact::set__signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Signature)
}
inline void ModContact::set__signature(const char* value, size_t size) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Signature)
}
inline ::std::string* ModContact::mutable__signature() {
  set_has__signature();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Signature)
  return _signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__signature() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Signature)
  clear_has__signature();
  return _signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__signature(::std::string* _signature) {
  if (_signature != NULL) {
    set_has__signature();
  } else {
    clear_has__signature();
  }
  _signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _signature);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Signature)
}

// optional uint32 _PersonalCard = 22;
inline bool ModContact::has__personalcard() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ModContact::set_has__personalcard() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ModContact::clear_has__personalcard() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ModContact::clear__personalcard() {
  _personalcard_ = 0u;
  clear_has__personalcard();
}
inline ::google::protobuf::uint32 ModContact::_personalcard() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PersonalCard)
  return _personalcard_;
}
inline void ModContact::set__personalcard(::google::protobuf::uint32 value) {
  set_has__personalcard();
  _personalcard_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._PersonalCard)
}

// optional uint32 _HasWeiXinHdHeadImg = 23;
inline bool ModContact::has__hasweixinhdheadimg() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ModContact::set_has__hasweixinhdheadimg() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ModContact::clear_has__hasweixinhdheadimg() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ModContact::clear__hasweixinhdheadimg() {
  _hasweixinhdheadimg_ = 0u;
  clear_has__hasweixinhdheadimg();
}
inline ::google::protobuf::uint32 ModContact::_hasweixinhdheadimg() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._HasWeiXinHdHeadImg)
  return _hasweixinhdheadimg_;
}
inline void ModContact::set__hasweixinhdheadimg(::google::protobuf::uint32 value) {
  set_has__hasweixinhdheadimg();
  _hasweixinhdheadimg_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._HasWeiXinHdHeadImg)
}

// optional uint32 _VerifyFlag = 24;
inline bool ModContact::has__verifyflag() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ModContact::set_has__verifyflag() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ModContact::clear_has__verifyflag() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ModContact::clear__verifyflag() {
  _verifyflag_ = 0u;
  clear_has__verifyflag();
}
inline ::google::protobuf::uint32 ModContact::_verifyflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyFlag)
  return _verifyflag_;
}
inline void ModContact::set__verifyflag(::google::protobuf::uint32 value) {
  set_has__verifyflag();
  _verifyflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyFlag)
}

// optional string _VerifyInfo = 25;
inline bool ModContact::has__verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModContact::set_has__verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModContact::clear_has__verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModContact::clear__verifyinfo() {
  _verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__verifyinfo();
}
inline const ::std::string& ModContact::_verifyinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyInfo)
  return _verifyinfo_.GetNoArena();
}
inline void ModContact::set__verifyinfo(const ::std::string& value) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyInfo)
}
#if LANG_CXX11
inline void ModContact::set__verifyinfo(::std::string&& value) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._VerifyInfo)
}
#endif
inline void ModContact::set__verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._VerifyInfo)
}
inline void ModContact::set__verifyinfo(const char* value, size_t size) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._VerifyInfo)
}
inline ::std::string* ModContact::mutable__verifyinfo() {
  set_has__verifyinfo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._VerifyInfo)
  return _verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__verifyinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._VerifyInfo)
  clear_has__verifyinfo();
  return _verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__verifyinfo(::std::string* _verifyinfo) {
  if (_verifyinfo != NULL) {
    set_has__verifyinfo();
  } else {
    clear_has__verifyinfo();
  }
  _verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._VerifyInfo)
}

// optional int32 _Level = 26;
inline bool ModContact::has__level() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void ModContact::set_has__level() {
  _has_bits_[1] |= 0x00040000u;
}
inline void ModContact::clear_has__level() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void ModContact::clear__level() {
  _level_ = 0;
  clear_has__level();
}
inline ::google::protobuf::int32 ModContact::_level() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Level)
  return _level_;
}
inline void ModContact::set__level(::google::protobuf::int32 value) {
  set_has__level();
  _level_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Level)
}

// optional uint32 _Source = 27;
inline bool ModContact::has__source() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void ModContact::set_has__source() {
  _has_bits_[1] |= 0x00080000u;
}
inline void ModContact::clear_has__source() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void ModContact::clear__source() {
  _source_ = 0u;
  clear_has__source();
}
inline ::google::protobuf::uint32 ModContact::_source() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Source)
  return _source_;
}
inline void ModContact::set__source(::google::protobuf::uint32 value) {
  set_has__source();
  _source_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Source)
}

// optional string _Weibo = 28;
inline bool ModContact::has__weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModContact::set_has__weibo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModContact::clear_has__weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModContact::clear__weibo() {
  _weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__weibo();
}
inline const ::std::string& ModContact::_weibo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Weibo)
  return _weibo_.GetNoArena();
}
inline void ModContact::set__weibo(const ::std::string& value) {
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Weibo)
}
#if LANG_CXX11
inline void ModContact::set__weibo(::std::string&& value) {
  set_has__weibo();
  _weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Weibo)
}
#endif
inline void ModContact::set__weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Weibo)
}
inline void ModContact::set__weibo(const char* value, size_t size) {
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Weibo)
}
inline ::std::string* ModContact::mutable__weibo() {
  set_has__weibo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Weibo)
  return _weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__weibo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Weibo)
  clear_has__weibo();
  return _weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__weibo(::std::string* _weibo) {
  if (_weibo != NULL) {
    set_has__weibo();
  } else {
    clear_has__weibo();
  }
  _weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _weibo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Weibo)
}

// optional string _VerifyContent = 29;
inline bool ModContact::has__verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModContact::set_has__verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModContact::clear_has__verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModContact::clear__verifycontent() {
  _verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__verifycontent();
}
inline const ::std::string& ModContact::_verifycontent() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyContent)
  return _verifycontent_.GetNoArena();
}
inline void ModContact::set__verifycontent(const ::std::string& value) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyContent)
}
#if LANG_CXX11
inline void ModContact::set__verifycontent(::std::string&& value) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._VerifyContent)
}
#endif
inline void ModContact::set__verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._VerifyContent)
}
inline void ModContact::set__verifycontent(const char* value, size_t size) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._VerifyContent)
}
inline ::std::string* ModContact::mutable__verifycontent() {
  set_has__verifycontent();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._VerifyContent)
  return _verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__verifycontent() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._VerifyContent)
  clear_has__verifycontent();
  return _verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__verifycontent(::std::string* _verifycontent) {
  if (_verifycontent != NULL) {
    set_has__verifycontent();
  } else {
    clear_has__verifycontent();
  }
  _verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _verifycontent);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._VerifyContent)
}

// optional string _Alias = 30;
inline bool ModContact::has__alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModContact::set_has__alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModContact::clear_has__alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModContact::clear__alias() {
  _alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__alias();
}
inline const ::std::string& ModContact::_alias() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Alias)
  return _alias_.GetNoArena();
}
inline void ModContact::set__alias(const ::std::string& value) {
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Alias)
}
#if LANG_CXX11
inline void ModContact::set__alias(::std::string&& value) {
  set_has__alias();
  _alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Alias)
}
#endif
inline void ModContact::set__alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Alias)
}
inline void ModContact::set__alias(const char* value, size_t size) {
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Alias)
}
inline ::std::string* ModContact::mutable__alias() {
  set_has__alias();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Alias)
  return _alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__alias() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Alias)
  clear_has__alias();
  return _alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__alias(::std::string* _alias) {
  if (_alias != NULL) {
    set_has__alias();
  } else {
    clear_has__alias();
  }
  _alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _alias);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Alias)
}

// optional string _ChatRoomOwner = 31;
inline bool ModContact::has__chatroomowner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModContact::set_has__chatroomowner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModContact::clear_has__chatroomowner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModContact::clear__chatroomowner() {
  _chatroomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__chatroomowner();
}
inline const ::std::string& ModContact::_chatroomowner() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomOwner)
  return _chatroomowner_.GetNoArena();
}
inline void ModContact::set__chatroomowner(const ::std::string& value) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomOwner)
}
#if LANG_CXX11
inline void ModContact::set__chatroomowner(::std::string&& value) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ChatRoomOwner)
}
#endif
inline void ModContact::set__chatroomowner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ChatRoomOwner)
}
inline void ModContact::set__chatroomowner(const char* value, size_t size) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ChatRoomOwner)
}
inline ::std::string* ModContact::mutable__chatroomowner() {
  set_has__chatroomowner();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ChatRoomOwner)
  return _chatroomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__chatroomowner() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ChatRoomOwner)
  clear_has__chatroomowner();
  return _chatroomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__chatroomowner(::std::string* _chatroomowner) {
  if (_chatroomowner != NULL) {
    set_has__chatroomowner();
  } else {
    clear_has__chatroomowner();
  }
  _chatroomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _chatroomowner);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ChatRoomOwner)
}

// optional string _WeiboNickname = 32;
inline bool ModContact::has__weibonickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModContact::set_has__weibonickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModContact::clear_has__weibonickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModContact::clear__weibonickname() {
  _weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__weibonickname();
}
inline const ::std::string& ModContact::_weibonickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._WeiboNickname)
  return _weibonickname_.GetNoArena();
}
inline void ModContact::set__weibonickname(const ::std::string& value) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._WeiboNickname)
}
#if LANG_CXX11
inline void ModContact::set__weibonickname(::std::string&& value) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._WeiboNickname)
}
#endif
inline void ModContact::set__weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._WeiboNickname)
}
inline void ModContact::set__weibonickname(const char* value, size_t size) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._WeiboNickname)
}
inline ::std::string* ModContact::mutable__weibonickname() {
  set_has__weibonickname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._WeiboNickname)
  return _weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__weibonickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._WeiboNickname)
  clear_has__weibonickname();
  return _weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__weibonickname(::std::string* _weibonickname) {
  if (_weibonickname != NULL) {
    set_has__weibonickname();
  } else {
    clear_has__weibonickname();
  }
  _weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _weibonickname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._WeiboNickname)
}

// optional uint32 _WeiboFlag = 33;
inline bool ModContact::has__weiboflag() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void ModContact::set_has__weiboflag() {
  _has_bits_[1] |= 0x00100000u;
}
inline void ModContact::clear_has__weiboflag() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void ModContact::clear__weiboflag() {
  _weiboflag_ = 0u;
  clear_has__weiboflag();
}
inline ::google::protobuf::uint32 ModContact::_weiboflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._WeiboFlag)
  return _weiboflag_;
}
inline void ModContact::set__weiboflag(::google::protobuf::uint32 value) {
  set_has__weiboflag();
  _weiboflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._WeiboFlag)
}

// optional int32 _AlbumStyle = 34;
inline bool ModContact::has__albumstyle() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void ModContact::set_has__albumstyle() {
  _has_bits_[1] |= 0x00200000u;
}
inline void ModContact::clear_has__albumstyle() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void ModContact::clear__albumstyle() {
  _albumstyle_ = 0;
  clear_has__albumstyle();
}
inline ::google::protobuf::int32 ModContact::_albumstyle() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumStyle)
  return _albumstyle_;
}
inline void ModContact::set__albumstyle(::google::protobuf::int32 value) {
  set_has__albumstyle();
  _albumstyle_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumStyle)
}

// optional int32 _AlbumFlag = 35;
inline bool ModContact::has__albumflag() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void ModContact::set_has__albumflag() {
  _has_bits_[1] |= 0x00400000u;
}
inline void ModContact::clear_has__albumflag() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void ModContact::clear__albumflag() {
  _albumflag_ = 0;
  clear_has__albumflag();
}
inline ::google::protobuf::int32 ModContact::_albumflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumFlag)
  return _albumflag_;
}
inline void ModContact::set__albumflag(::google::protobuf::int32 value) {
  set_has__albumflag();
  _albumflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumFlag)
}

// optional string _AlbumBGImgID = 36;
inline bool ModContact::has__albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModContact::set_has__albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModContact::clear_has__albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModContact::clear__albumbgimgid() {
  _albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__albumbgimgid();
}
inline const ::std::string& ModContact::_albumbgimgid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumBGImgID)
  return _albumbgimgid_.GetNoArena();
}
inline void ModContact::set__albumbgimgid(const ::std::string& value) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumBGImgID)
}
#if LANG_CXX11
inline void ModContact::set__albumbgimgid(::std::string&& value) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._AlbumBGImgID)
}
#endif
inline void ModContact::set__albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._AlbumBGImgID)
}
inline void ModContact::set__albumbgimgid(const char* value, size_t size) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._AlbumBGImgID)
}
inline ::std::string* ModContact::mutable__albumbgimgid() {
  set_has__albumbgimgid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._AlbumBGImgID)
  return _albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__albumbgimgid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._AlbumBGImgID)
  clear_has__albumbgimgid();
  return _albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__albumbgimgid(::std::string* _albumbgimgid) {
  if (_albumbgimgid != NULL) {
    set_has__albumbgimgid();
  } else {
    clear_has__albumbgimgid();
  }
  _albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._AlbumBGImgID)
}

// optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
inline bool ModContact::has__snsuserinfo() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ModContact::set_has__snsuserinfo() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ModContact::clear_has__snsuserinfo() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ModContact::clear__snsuserinfo() {
  if (_snsuserinfo_ != NULL) _snsuserinfo_->::MMPro::micromsg::SnsUserInfo::Clear();
  clear_has__snsuserinfo();
}
inline const ::MMPro::micromsg::SnsUserInfo& ModContact::_snsuserinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._SnsUserInfo)
  return _snsuserinfo_ != NULL ? *_snsuserinfo_
                         : *::MMPro::micromsg::SnsUserInfo::internal_default_instance();
}
inline ::MMPro::micromsg::SnsUserInfo* ModContact::mutable__snsuserinfo() {
  set_has__snsuserinfo();
  if (_snsuserinfo_ == NULL) {
    _snsuserinfo_ = new ::MMPro::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._SnsUserInfo)
  return _snsuserinfo_;
}
inline ::MMPro::micromsg::SnsUserInfo* ModContact::release__snsuserinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._SnsUserInfo)
  clear_has__snsuserinfo();
  ::MMPro::micromsg::SnsUserInfo* temp = _snsuserinfo_;
  _snsuserinfo_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__snsuserinfo(::MMPro::micromsg::SnsUserInfo* _snsuserinfo) {
  delete _snsuserinfo_;
  _snsuserinfo_ = _snsuserinfo;
  if (_snsuserinfo) {
    set_has__snsuserinfo();
  } else {
    clear_has__snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._SnsUserInfo)
}

// optional string _Country = 38;
inline bool ModContact::has__country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModContact::set_has__country() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModContact::clear_has__country() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModContact::clear__country() {
  _country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__country();
}
inline const ::std::string& ModContact::_country() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Country)
  return _country_.GetNoArena();
}
inline void ModContact::set__country(const ::std::string& value) {
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Country)
}
#if LANG_CXX11
inline void ModContact::set__country(::std::string&& value) {
  set_has__country();
  _country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Country)
}
#endif
inline void ModContact::set__country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Country)
}
inline void ModContact::set__country(const char* value, size_t size) {
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Country)
}
inline ::std::string* ModContact::mutable__country() {
  set_has__country();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Country)
  return _country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__country() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Country)
  clear_has__country();
  return _country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__country(::std::string* _country) {
  if (_country != NULL) {
    set_has__country();
  } else {
    clear_has__country();
  }
  _country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _country);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Country)
}

// optional string _BigHeadImgUrl = 39;
inline bool ModContact::has__bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModContact::set_has__bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModContact::clear_has__bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModContact::clear__bigheadimgurl() {
  _bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__bigheadimgurl();
}
inline const ::std::string& ModContact::_bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BigHeadImgUrl)
  return _bigheadimgurl_.GetNoArena();
}
inline void ModContact::set__bigheadimgurl(const ::std::string& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
#if LANG_CXX11
inline void ModContact::set__bigheadimgurl(::std::string&& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
#endif
inline void ModContact::set__bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
inline void ModContact::set__bigheadimgurl(const char* value, size_t size) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
inline ::std::string* ModContact::mutable__bigheadimgurl() {
  set_has__bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._BigHeadImgUrl)
  return _bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__bigheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._BigHeadImgUrl)
  clear_has__bigheadimgurl();
  return _bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__bigheadimgurl(::std::string* _bigheadimgurl) {
  if (_bigheadimgurl != NULL) {
    set_has__bigheadimgurl();
  } else {
    clear_has__bigheadimgurl();
  }
  _bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._BigHeadImgUrl)
}

// optional string _SmallHeadImgUrl = 40;
inline bool ModContact::has__smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModContact::set_has__smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModContact::clear_has__smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModContact::clear__smallheadimgurl() {
  _smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__smallheadimgurl();
}
inline const ::std::string& ModContact::_smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  return _smallheadimgurl_.GetNoArena();
}
inline void ModContact::set__smallheadimgurl(const ::std::string& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ModContact::set__smallheadimgurl(::std::string&& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
#endif
inline void ModContact::set__smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
inline void ModContact::set__smallheadimgurl(const char* value, size_t size) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
inline ::std::string* ModContact::mutable__smallheadimgurl() {
  set_has__smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  return _smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__smallheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  clear_has__smallheadimgurl();
  return _smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__smallheadimgurl(::std::string* _smallheadimgurl) {
  if (_smallheadimgurl != NULL) {
    set_has__smallheadimgurl();
  } else {
    clear_has__smallheadimgurl();
  }
  _smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}

// optional string _MyBrandList = 41;
inline bool ModContact::has__mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModContact::set_has__mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModContact::clear_has__mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModContact::clear__mybrandlist() {
  _mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mybrandlist();
}
inline const ::std::string& ModContact::_mybrandlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MyBrandList)
  return _mybrandlist_.GetNoArena();
}
inline void ModContact::set__mybrandlist(const ::std::string& value) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MyBrandList)
}
#if LANG_CXX11
inline void ModContact::set__mybrandlist(::std::string&& value) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MyBrandList)
}
#endif
inline void ModContact::set__mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MyBrandList)
}
inline void ModContact::set__mybrandlist(const char* value, size_t size) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MyBrandList)
}
inline ::std::string* ModContact::mutable__mybrandlist() {
  set_has__mybrandlist();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MyBrandList)
  return _mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__mybrandlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MyBrandList)
  clear_has__mybrandlist();
  return _mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__mybrandlist(::std::string* _mybrandlist) {
  if (_mybrandlist != NULL) {
    set_has__mybrandlist();
  } else {
    clear_has__mybrandlist();
  }
  _mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MyBrandList)
}

// optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
inline bool ModContact::has__customizedinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ModContact::set_has__customizedinfo() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ModContact::clear_has__customizedinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ModContact::clear__customizedinfo() {
  if (_customizedinfo_ != NULL) _customizedinfo_->::MMPro::micromsg::CustomizedInfo::Clear();
  clear_has__customizedinfo();
}
inline const ::MMPro::micromsg::CustomizedInfo& ModContact::_customizedinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._CustomizedInfo)
  return _customizedinfo_ != NULL ? *_customizedinfo_
                         : *::MMPro::micromsg::CustomizedInfo::internal_default_instance();
}
inline ::MMPro::micromsg::CustomizedInfo* ModContact::mutable__customizedinfo() {
  set_has__customizedinfo();
  if (_customizedinfo_ == NULL) {
    _customizedinfo_ = new ::MMPro::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._CustomizedInfo)
  return _customizedinfo_;
}
inline ::MMPro::micromsg::CustomizedInfo* ModContact::release__customizedinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._CustomizedInfo)
  clear_has__customizedinfo();
  ::MMPro::micromsg::CustomizedInfo* temp = _customizedinfo_;
  _customizedinfo_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__customizedinfo(::MMPro::micromsg::CustomizedInfo* _customizedinfo) {
  delete _customizedinfo_;
  _customizedinfo_ = _customizedinfo;
  if (_customizedinfo) {
    set_has__customizedinfo();
  } else {
    clear_has__customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._CustomizedInfo)
}

// optional string _ChatRoomData = 43;
inline bool ModContact::has__chatroomdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModContact::set_has__chatroomdata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModContact::clear_has__chatroomdata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModContact::clear__chatroomdata() {
  _chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__chatroomdata();
}
inline const ::std::string& ModContact::_chatroomdata() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomData)
  return _chatroomdata_.GetNoArena();
}
inline void ModContact::set__chatroomdata(const ::std::string& value) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomData)
}
#if LANG_CXX11
inline void ModContact::set__chatroomdata(::std::string&& value) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ChatRoomData)
}
#endif
inline void ModContact::set__chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ChatRoomData)
}
inline void ModContact::set__chatroomdata(const char* value, size_t size) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ChatRoomData)
}
inline ::std::string* ModContact::mutable__chatroomdata() {
  set_has__chatroomdata();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ChatRoomData)
  return _chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__chatroomdata() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ChatRoomData)
  clear_has__chatroomdata();
  return _chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__chatroomdata(::std::string* _chatroomdata) {
  if (_chatroomdata != NULL) {
    set_has__chatroomdata();
  } else {
    clear_has__chatroomdata();
  }
  _chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ChatRoomData)
}

// optional string _HeadImgMd5 = 44;
inline bool ModContact::has__headimgmd5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModContact::set_has__headimgmd5() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModContact::clear_has__headimgmd5() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModContact::clear__headimgmd5() {
  _headimgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__headimgmd5();
}
inline const ::std::string& ModContact::_headimgmd5() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._HeadImgMd5)
  return _headimgmd5_.GetNoArena();
}
inline void ModContact::set__headimgmd5(const ::std::string& value) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._HeadImgMd5)
}
#if LANG_CXX11
inline void ModContact::set__headimgmd5(::std::string&& value) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._HeadImgMd5)
}
#endif
inline void ModContact::set__headimgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._HeadImgMd5)
}
inline void ModContact::set__headimgmd5(const char* value, size_t size) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._HeadImgMd5)
}
inline ::std::string* ModContact::mutable__headimgmd5() {
  set_has__headimgmd5();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._HeadImgMd5)
  return _headimgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__headimgmd5() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._HeadImgMd5)
  clear_has__headimgmd5();
  return _headimgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__headimgmd5(::std::string* _headimgmd5) {
  if (_headimgmd5 != NULL) {
    set_has__headimgmd5();
  } else {
    clear_has__headimgmd5();
  }
  _headimgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _headimgmd5);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._HeadImgMd5)
}

// optional string _EncryptUserName = 45;
inline bool ModContact::has__encryptusername() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModContact::set_has__encryptusername() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModContact::clear_has__encryptusername() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModContact::clear__encryptusername() {
  _encryptusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__encryptusername();
}
inline const ::std::string& ModContact::_encryptusername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._EncryptUserName)
  return _encryptusername_.GetNoArena();
}
inline void ModContact::set__encryptusername(const ::std::string& value) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._EncryptUserName)
}
#if LANG_CXX11
inline void ModContact::set__encryptusername(::std::string&& value) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._EncryptUserName)
}
#endif
inline void ModContact::set__encryptusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._EncryptUserName)
}
inline void ModContact::set__encryptusername(const char* value, size_t size) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._EncryptUserName)
}
inline ::std::string* ModContact::mutable__encryptusername() {
  set_has__encryptusername();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._EncryptUserName)
  return _encryptusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__encryptusername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._EncryptUserName)
  clear_has__encryptusername();
  return _encryptusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__encryptusername(::std::string* _encryptusername) {
  if (_encryptusername != NULL) {
    set_has__encryptusername();
  } else {
    clear_has__encryptusername();
  }
  _encryptusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _encryptusername);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._EncryptUserName)
}

// optional string _IDCardNum = 46;
inline bool ModContact::has__idcardnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModContact::set_has__idcardnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModContact::clear_has__idcardnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModContact::clear__idcardnum() {
  _idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__idcardnum();
}
inline const ::std::string& ModContact::_idcardnum() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._IDCardNum)
  return _idcardnum_.GetNoArena();
}
inline void ModContact::set__idcardnum(const ::std::string& value) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._IDCardNum)
}
#if LANG_CXX11
inline void ModContact::set__idcardnum(::std::string&& value) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._IDCardNum)
}
#endif
inline void ModContact::set__idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._IDCardNum)
}
inline void ModContact::set__idcardnum(const char* value, size_t size) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._IDCardNum)
}
inline ::std::string* ModContact::mutable__idcardnum() {
  set_has__idcardnum();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._IDCardNum)
  return _idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__idcardnum() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._IDCardNum)
  clear_has__idcardnum();
  return _idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__idcardnum(::std::string* _idcardnum) {
  if (_idcardnum != NULL) {
    set_has__idcardnum();
  } else {
    clear_has__idcardnum();
  }
  _idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _idcardnum);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._IDCardNum)
}

// optional string _RealName = 47;
inline bool ModContact::has__realname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModContact::set_has__realname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModContact::clear_has__realname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModContact::clear__realname() {
  _realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__realname();
}
inline const ::std::string& ModContact::_realname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RealName)
  return _realname_.GetNoArena();
}
inline void ModContact::set__realname(const ::std::string& value) {
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._RealName)
}
#if LANG_CXX11
inline void ModContact::set__realname(::std::string&& value) {
  set_has__realname();
  _realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._RealName)
}
#endif
inline void ModContact::set__realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._RealName)
}
inline void ModContact::set__realname(const char* value, size_t size) {
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._RealName)
}
inline ::std::string* ModContact::mutable__realname() {
  set_has__realname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RealName)
  return _realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__realname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RealName)
  clear_has__realname();
  return _realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__realname(::std::string* _realname) {
  if (_realname != NULL) {
    set_has__realname();
  } else {
    clear_has__realname();
  }
  _realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _realname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RealName)
}

// optional string _MobileHash = 48;
inline bool ModContact::has__mobilehash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModContact::set_has__mobilehash() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModContact::clear_has__mobilehash() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModContact::clear__mobilehash() {
  _mobilehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mobilehash();
}
inline const ::std::string& ModContact::_mobilehash() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MobileHash)
  return _mobilehash_.GetNoArena();
}
inline void ModContact::set__mobilehash(const ::std::string& value) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MobileHash)
}
#if LANG_CXX11
inline void ModContact::set__mobilehash(::std::string&& value) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MobileHash)
}
#endif
inline void ModContact::set__mobilehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MobileHash)
}
inline void ModContact::set__mobilehash(const char* value, size_t size) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MobileHash)
}
inline ::std::string* ModContact::mutable__mobilehash() {
  set_has__mobilehash();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MobileHash)
  return _mobilehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__mobilehash() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MobileHash)
  clear_has__mobilehash();
  return _mobilehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__mobilehash(::std::string* _mobilehash) {
  if (_mobilehash != NULL) {
    set_has__mobilehash();
  } else {
    clear_has__mobilehash();
  }
  _mobilehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mobilehash);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MobileHash)
}

// optional string _MobileFullHash = 49;
inline bool ModContact::has__mobilefullhash() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModContact::set_has__mobilefullhash() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModContact::clear_has__mobilefullhash() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModContact::clear__mobilefullhash() {
  _mobilefullhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mobilefullhash();
}
inline const ::std::string& ModContact::_mobilefullhash() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MobileFullHash)
  return _mobilefullhash_.GetNoArena();
}
inline void ModContact::set__mobilefullhash(const ::std::string& value) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MobileFullHash)
}
#if LANG_CXX11
inline void ModContact::set__mobilefullhash(::std::string&& value) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MobileFullHash)
}
#endif
inline void ModContact::set__mobilefullhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MobileFullHash)
}
inline void ModContact::set__mobilefullhash(const char* value, size_t size) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MobileFullHash)
}
inline ::std::string* ModContact::mutable__mobilefullhash() {
  set_has__mobilefullhash();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MobileFullHash)
  return _mobilefullhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__mobilefullhash() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MobileFullHash)
  clear_has__mobilefullhash();
  return _mobilefullhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__mobilefullhash(::std::string* _mobilefullhash) {
  if (_mobilefullhash != NULL) {
    set_has__mobilefullhash();
  } else {
    clear_has__mobilefullhash();
  }
  _mobilefullhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mobilefullhash);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MobileFullHash)
}

// optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
inline bool ModContact::has__additionalcontactlist() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ModContact::set_has__additionalcontactlist() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ModContact::clear_has__additionalcontactlist() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ModContact::clear__additionalcontactlist() {
  if (_additionalcontactlist_ != NULL) _additionalcontactlist_->::MMPro::micromsg::AdditionalContactList::Clear();
  clear_has__additionalcontactlist();
}
inline const ::MMPro::micromsg::AdditionalContactList& ModContact::_additionalcontactlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AdditionalContactList)
  return _additionalcontactlist_ != NULL ? *_additionalcontactlist_
                         : *::MMPro::micromsg::AdditionalContactList::internal_default_instance();
}
inline ::MMPro::micromsg::AdditionalContactList* ModContact::mutable__additionalcontactlist() {
  set_has__additionalcontactlist();
  if (_additionalcontactlist_ == NULL) {
    _additionalcontactlist_ = new ::MMPro::micromsg::AdditionalContactList;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._AdditionalContactList)
  return _additionalcontactlist_;
}
inline ::MMPro::micromsg::AdditionalContactList* ModContact::release__additionalcontactlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._AdditionalContactList)
  clear_has__additionalcontactlist();
  ::MMPro::micromsg::AdditionalContactList* temp = _additionalcontactlist_;
  _additionalcontactlist_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__additionalcontactlist(::MMPro::micromsg::AdditionalContactList* _additionalcontactlist) {
  delete _additionalcontactlist_;
  _additionalcontactlist_ = _additionalcontactlist;
  if (_additionalcontactlist) {
    set_has__additionalcontactlist();
  } else {
    clear_has__additionalcontactlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._AdditionalContactList)
}

// optional uint32 _ChatroomVersion = 53;
inline bool ModContact::has__chatroomversion() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void ModContact::set_has__chatroomversion() {
  _has_bits_[1] |= 0x00800000u;
}
inline void ModContact::clear_has__chatroomversion() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void ModContact::clear__chatroomversion() {
  _chatroomversion_ = 0u;
  clear_has__chatroomversion();
}
inline ::google::protobuf::uint32 ModContact::_chatroomversion() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomVersion)
  return _chatroomversion_;
}
inline void ModContact::set__chatroomversion(::google::protobuf::uint32 value) {
  set_has__chatroomversion();
  _chatroomversion_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomVersion)
}

// optional string _ExtInfo = 54;
inline bool ModContact::has__extinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModContact::set_has__extinfo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModContact::clear_has__extinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModContact::clear__extinfo() {
  _extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__extinfo();
}
inline const ::std::string& ModContact::_extinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ExtInfo)
  return _extinfo_.GetNoArena();
}
inline void ModContact::set__extinfo(const ::std::string& value) {
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ExtInfo)
}
#if LANG_CXX11
inline void ModContact::set__extinfo(::std::string&& value) {
  set_has__extinfo();
  _extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ExtInfo)
}
#endif
inline void ModContact::set__extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ExtInfo)
}
inline void ModContact::set__extinfo(const char* value, size_t size) {
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ExtInfo)
}
inline ::std::string* ModContact::mutable__extinfo() {
  set_has__extinfo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ExtInfo)
  return _extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__extinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ExtInfo)
  clear_has__extinfo();
  return _extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__extinfo(::std::string* _extinfo) {
  if (_extinfo != NULL) {
    set_has__extinfo();
  } else {
    clear_has__extinfo();
  }
  _extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _extinfo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ExtInfo)
}

// optional uint32 _ChatroomMaxCount = 55;
inline bool ModContact::has__chatroommaxcount() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void ModContact::set_has__chatroommaxcount() {
  _has_bits_[1] |= 0x01000000u;
}
inline void ModContact::clear_has__chatroommaxcount() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void ModContact::clear__chatroommaxcount() {
  _chatroommaxcount_ = 0u;
  clear_has__chatroommaxcount();
}
inline ::google::protobuf::uint32 ModContact::_chatroommaxcount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomMaxCount)
  return _chatroommaxcount_;
}
inline void ModContact::set__chatroommaxcount(::google::protobuf::uint32 value) {
  set_has__chatroommaxcount();
  _chatroommaxcount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomMaxCount)
}

// optional uint32 _ChatroomType = 56;
inline bool ModContact::has__chatroomtype() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void ModContact::set_has__chatroomtype() {
  _has_bits_[1] |= 0x02000000u;
}
inline void ModContact::clear_has__chatroomtype() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void ModContact::clear__chatroomtype() {
  _chatroomtype_ = 0u;
  clear_has__chatroomtype();
}
inline ::google::protobuf::uint32 ModContact::_chatroomtype() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomType)
  return _chatroomtype_;
}
inline void ModContact::set__chatroomtype(::google::protobuf::uint32 value) {
  set_has__chatroomtype();
  _chatroomtype_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomType)
}

// optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
inline bool ModContact::has__newchatroomdata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ModContact::set_has__newchatroomdata() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ModContact::clear_has__newchatroomdata() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ModContact::clear__newchatroomdata() {
  if (_newchatroomdata_ != NULL) _newchatroomdata_->::MMPro::micromsg::ChatRoomMemberData::Clear();
  clear_has__newchatroomdata();
}
inline const ::MMPro::micromsg::ChatRoomMemberData& ModContact::_newchatroomdata() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._NewChatroomData)
  return _newchatroomdata_ != NULL ? *_newchatroomdata_
                         : *::MMPro::micromsg::ChatRoomMemberData::internal_default_instance();
}
inline ::MMPro::micromsg::ChatRoomMemberData* ModContact::mutable__newchatroomdata() {
  set_has__newchatroomdata();
  if (_newchatroomdata_ == NULL) {
    _newchatroomdata_ = new ::MMPro::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._NewChatroomData)
  return _newchatroomdata_;
}
inline ::MMPro::micromsg::ChatRoomMemberData* ModContact::release__newchatroomdata() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._NewChatroomData)
  clear_has__newchatroomdata();
  ::MMPro::micromsg::ChatRoomMemberData* temp = _newchatroomdata_;
  _newchatroomdata_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__newchatroomdata(::MMPro::micromsg::ChatRoomMemberData* _newchatroomdata) {
  delete _newchatroomdata_;
  _newchatroomdata_ = _newchatroomdata;
  if (_newchatroomdata) {
    set_has__newchatroomdata();
  } else {
    clear_has__newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._NewChatroomData)
}

// optional int32 _DeleteFlag = 58;
inline bool ModContact::has__deleteflag() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void ModContact::set_has__deleteflag() {
  _has_bits_[1] |= 0x04000000u;
}
inline void ModContact::clear_has__deleteflag() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void ModContact::clear__deleteflag() {
  _deleteflag_ = 0;
  clear_has__deleteflag();
}
inline ::google::protobuf::int32 ModContact::_deleteflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._DeleteFlag)
  return _deleteflag_;
}
inline void ModContact::set__deleteflag(::google::protobuf::int32 value) {
  set_has__deleteflag();
  _deleteflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._DeleteFlag)
}

// optional string _Description = 59;
inline bool ModContact::has__description() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModContact::set_has__description() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModContact::clear_has__description() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModContact::clear__description() {
  _description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__description();
}
inline const ::std::string& ModContact::_description() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Description)
  return _description_.GetNoArena();
}
inline void ModContact::set__description(const ::std::string& value) {
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Description)
}
#if LANG_CXX11
inline void ModContact::set__description(::std::string&& value) {
  set_has__description();
  _description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Description)
}
#endif
inline void ModContact::set__description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Description)
}
inline void ModContact::set__description(const char* value, size_t size) {
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Description)
}
inline ::std::string* ModContact::mutable__description() {
  set_has__description();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Description)
  return _description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__description() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Description)
  clear_has__description();
  return _description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__description(::std::string* _description) {
  if (_description != NULL) {
    set_has__description();
  } else {
    clear_has__description();
  }
  _description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _description);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Description)
}

// optional string _CardImgUrl = 60;
inline bool ModContact::has__cardimgurl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModContact::set_has__cardimgurl() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModContact::clear_has__cardimgurl() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModContact::clear__cardimgurl() {
  _cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__cardimgurl();
}
inline const ::std::string& ModContact::_cardimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._CardImgUrl)
  return _cardimgurl_.GetNoArena();
}
inline void ModContact::set__cardimgurl(const ::std::string& value) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._CardImgUrl)
}
#if LANG_CXX11
inline void ModContact::set__cardimgurl(::std::string&& value) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._CardImgUrl)
}
#endif
inline void ModContact::set__cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._CardImgUrl)
}
inline void ModContact::set__cardimgurl(const char* value, size_t size) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._CardImgUrl)
}
inline ::std::string* ModContact::mutable__cardimgurl() {
  set_has__cardimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._CardImgUrl)
  return _cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__cardimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._CardImgUrl)
  clear_has__cardimgurl();
  return _cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__cardimgurl(::std::string* _cardimgurl) {
  if (_cardimgurl != NULL) {
    set_has__cardimgurl();
  } else {
    clear_has__cardimgurl();
  }
  _cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._CardImgUrl)
}

// optional string _LabelIDList = 61;
inline bool ModContact::has__labelidlist() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModContact::set_has__labelidlist() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModContact::clear_has__labelidlist() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModContact::clear__labelidlist() {
  _labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__labelidlist();
}
inline const ::std::string& ModContact::_labelidlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._LabelIDList)
  return _labelidlist_.GetNoArena();
}
inline void ModContact::set__labelidlist(const ::std::string& value) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._LabelIDList)
}
#if LANG_CXX11
inline void ModContact::set__labelidlist(::std::string&& value) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._LabelIDList)
}
#endif
inline void ModContact::set__labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._LabelIDList)
}
inline void ModContact::set__labelidlist(const char* value, size_t size) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._LabelIDList)
}
inline ::std::string* ModContact::mutable__labelidlist() {
  set_has__labelidlist();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._LabelIDList)
  return _labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release__labelidlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._LabelIDList)
  clear_has__labelidlist();
  return _labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated__labelidlist(::std::string* _labelidlist) {
  if (_labelidlist != NULL) {
    set_has__labelidlist();
  } else {
    clear_has__labelidlist();
  }
  _labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _labelidlist);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._LabelIDList)
}

// optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
inline bool ModContact::has__phonenumberlist() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ModContact::set_has__phonenumberlist() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ModContact::clear_has__phonenumberlist() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ModContact::clear__phonenumberlist() {
  if (_phonenumberlist_ != NULL) _phonenumberlist_->::MMPro::micromsg::PhoneNumberList::Clear();
  clear_has__phonenumberlist();
}
inline const ::MMPro::micromsg::PhoneNumberList& ModContact::_phonenumberlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PhoneNumberList)
  return _phonenumberlist_ != NULL ? *_phonenumberlist_
                         : *::MMPro::micromsg::PhoneNumberList::internal_default_instance();
}
inline ::MMPro::micromsg::PhoneNumberList* ModContact::mutable__phonenumberlist() {
  set_has__phonenumberlist();
  if (_phonenumberlist_ == NULL) {
    _phonenumberlist_ = new ::MMPro::micromsg::PhoneNumberList;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._PhoneNumberList)
  return _phonenumberlist_;
}
inline ::MMPro::micromsg::PhoneNumberList* ModContact::release__phonenumberlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._PhoneNumberList)
  clear_has__phonenumberlist();
  ::MMPro::micromsg::PhoneNumberList* temp = _phonenumberlist_;
  _phonenumberlist_ = NULL;
  return temp;
}
inline void ModContact::set_allocated__phonenumberlist(::MMPro::micromsg::PhoneNumberList* _phonenumberlist) {
  delete _phonenumberlist_;
  _phonenumberlist_ = _phonenumberlist;
  if (_phonenumberlist) {
    set_has__phonenumberlist();
  } else {
    clear_has__phonenumberlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._PhoneNumberList)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ModContact_2eproto__INCLUDED
