// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BizScopeInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BizScopeInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class BizScopeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BizScopeInfo> {
} _BizScopeInfo_default_instance_;

namespace protobuf_BizScopeInfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _scopestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _scopedesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _apicount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BizScopeInfo, _apilist_),
  0,
  2,
  1,
  3,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(BizScopeInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BizScopeInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "BizScopeInfo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _BizScopeInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::MMPro::micromsg::protobuf_BizApiInfo_2eproto::InitDefaults();
  _BizScopeInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022BizScopeInfo.proto\022\016MMPro.micromsg\032\020Bi"
      "zApiInfo.proto\"\211\001\n\014BizScopeInfo\022\016\n\006_Scop"
      "e\030\001 \001(\t\022\024\n\014_ScopeStatus\030\002 \002(\r\022\022\n\n_ScopeD"
      "esc\030\003 \001(\t\022\021\n\t_ApiCount\030\004 \002(\r\022,\n\010_ApiList"
      "\030\005 \003(\0132\032.MMPro.micromsg.BizApiInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BizScopeInfo.proto", &protobuf_RegisterTypes);
  ::MMPro::micromsg::protobuf_BizApiInfo_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_BizScopeInfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BizScopeInfo::kScopeFieldNumber;
const int BizScopeInfo::kScopeStatusFieldNumber;
const int BizScopeInfo::kScopeDescFieldNumber;
const int BizScopeInfo::kApiCountFieldNumber;
const int BizScopeInfo::kApiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BizScopeInfo::BizScopeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_BizScopeInfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.BizScopeInfo)
}
BizScopeInfo::BizScopeInfo(const BizScopeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      _apilist_(from._apilist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__scope()) {
    _scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._scope_);
  }
  _scopedesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__scopedesc()) {
    _scopedesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._scopedesc_);
  }
  ::memcpy(&_scopestatus_, &from._scopestatus_,
    reinterpret_cast<char*>(&_apicount_) -
    reinterpret_cast<char*>(&_scopestatus_) + sizeof(_apicount_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.BizScopeInfo)
}

void BizScopeInfo::SharedCtor() {
  _cached_size_ = 0;
  _scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _scopedesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&_scopestatus_, 0, reinterpret_cast<char*>(&_apicount_) -
    reinterpret_cast<char*>(&_scopestatus_) + sizeof(_apicount_));
}

BizScopeInfo::~BizScopeInfo() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.BizScopeInfo)
  SharedDtor();
}

void BizScopeInfo::SharedDtor() {
  _scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _scopedesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BizScopeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BizScopeInfo::descriptor() {
  protobuf_BizScopeInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BizScopeInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BizScopeInfo& BizScopeInfo::default_instance() {
  protobuf_BizScopeInfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

BizScopeInfo* BizScopeInfo::New(::google::protobuf::Arena* arena) const {
  BizScopeInfo* n = new BizScopeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BizScopeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.BizScopeInfo)
  _apilist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has__scope()) {
      GOOGLE_DCHECK(!_scope_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_scope_.UnsafeRawStringPointer())->clear();
    }
    if (has__scopedesc()) {
      GOOGLE_DCHECK(!_scopedesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_scopedesc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&_scopestatus_, 0, reinterpret_cast<char*>(&_apicount_) -
      reinterpret_cast<char*>(&_scopestatus_) + sizeof(_apicount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BizScopeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.BizScopeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string _Scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_scope().data(), this->_scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.BizScopeInfo._Scope");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _ScopeStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has__scopestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_scopestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ScopeDesc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__scopedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_scopedesc().data(), this->_scopedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.BizScopeInfo._ScopeDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _ApiCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has__apicount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_apicount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMPro.micromsg.BizApiInfo _ApiList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__apilist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.BizScopeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.BizScopeInfo)
  return false;
#undef DO_
}

void BizScopeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.BizScopeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _Scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_scope().data(), this->_scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.BizScopeInfo._Scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_scope(), output);
  }

  // required uint32 _ScopeStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_scopestatus(), output);
  }

  // optional string _ScopeDesc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_scopedesc().data(), this->_scopedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.BizScopeInfo._ScopeDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_scopedesc(), output);
  }

  // required uint32 _ApiCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_apicount(), output);
  }

  // repeated .MMPro.micromsg.BizApiInfo _ApiList = 5;
  for (unsigned int i = 0, n = this->_apilist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_apilist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.BizScopeInfo)
}

::google::protobuf::uint8* BizScopeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.BizScopeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _Scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_scope().data(), this->_scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.BizScopeInfo._Scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_scope(), target);
  }

  // required uint32 _ScopeStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_scopestatus(), target);
  }

  // optional string _ScopeDesc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_scopedesc().data(), this->_scopedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.BizScopeInfo._ScopeDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_scopedesc(), target);
  }

  // required uint32 _ApiCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_apicount(), target);
  }

  // repeated .MMPro.micromsg.BizApiInfo _ApiList = 5;
  for (unsigned int i = 0, n = this->_apilist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->_apilist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.BizScopeInfo)
  return target;
}

size_t BizScopeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMPro.micromsg.BizScopeInfo)
  size_t total_size = 0;

  if (has__scopestatus()) {
    // required uint32 _ScopeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_scopestatus());
  }

  if (has__apicount()) {
    // required uint32 _ApiCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_apicount());
  }

  return total_size;
}
size_t BizScopeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.BizScopeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 _ScopeStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_scopestatus());

    // required uint32 _ApiCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_apicount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MMPro.micromsg.BizApiInfo _ApiList = 5;
  {
    unsigned int count = this->_apilist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_apilist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string _Scope = 1;
    if (has__scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_scope());
    }

    // optional string _ScopeDesc = 3;
    if (has__scopedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_scopedesc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BizScopeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.BizScopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BizScopeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BizScopeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.BizScopeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.BizScopeInfo)
    MergeFrom(*source);
  }
}

void BizScopeInfo::MergeFrom(const BizScopeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.BizScopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _apilist_.MergeFrom(from._apilist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__scope();
      _scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._scope_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__scopedesc();
      _scopedesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._scopedesc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _scopestatus_ = from._scopestatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      _apicount_ = from._apicount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BizScopeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.BizScopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BizScopeInfo::CopyFrom(const BizScopeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.BizScopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BizScopeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void BizScopeInfo::Swap(BizScopeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BizScopeInfo::InternalSwap(BizScopeInfo* other) {
  _apilist_.InternalSwap(&other->_apilist_);
  _scope_.Swap(&other->_scope_);
  _scopedesc_.Swap(&other->_scopedesc_);
  std::swap(_scopestatus_, other->_scopestatus_);
  std::swap(_apicount_, other->_apicount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BizScopeInfo::GetMetadata() const {
  protobuf_BizScopeInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BizScopeInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BizScopeInfo

// optional string _Scope = 1;
bool BizScopeInfo::has__scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BizScopeInfo::set_has__scope() {
  _has_bits_[0] |= 0x00000001u;
}
void BizScopeInfo::clear_has__scope() {
  _has_bits_[0] &= ~0x00000001u;
}
void BizScopeInfo::clear__scope() {
  _scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__scope();
}
const ::std::string& BizScopeInfo::_scope() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.BizScopeInfo._Scope)
  return _scope_.GetNoArena();
}
void BizScopeInfo::set__scope(const ::std::string& value) {
  set_has__scope();
  _scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.BizScopeInfo._Scope)
}
#if LANG_CXX11
void BizScopeInfo::set__scope(::std::string&& value) {
  set_has__scope();
  _scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.BizScopeInfo._Scope)
}
#endif
void BizScopeInfo::set__scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__scope();
  _scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.BizScopeInfo._Scope)
}
void BizScopeInfo::set__scope(const char* value, size_t size) {
  set_has__scope();
  _scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.BizScopeInfo._Scope)
}
::std::string* BizScopeInfo::mutable__scope() {
  set_has__scope();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.BizScopeInfo._Scope)
  return _scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BizScopeInfo::release__scope() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.BizScopeInfo._Scope)
  clear_has__scope();
  return _scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BizScopeInfo::set_allocated__scope(::std::string* _scope) {
  if (_scope != NULL) {
    set_has__scope();
  } else {
    clear_has__scope();
  }
  _scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _scope);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.BizScopeInfo._Scope)
}

// required uint32 _ScopeStatus = 2;
bool BizScopeInfo::has__scopestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BizScopeInfo::set_has__scopestatus() {
  _has_bits_[0] |= 0x00000004u;
}
void BizScopeInfo::clear_has__scopestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void BizScopeInfo::clear__scopestatus() {
  _scopestatus_ = 0u;
  clear_has__scopestatus();
}
::google::protobuf::uint32 BizScopeInfo::_scopestatus() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.BizScopeInfo._ScopeStatus)
  return _scopestatus_;
}
void BizScopeInfo::set__scopestatus(::google::protobuf::uint32 value) {
  set_has__scopestatus();
  _scopestatus_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.BizScopeInfo._ScopeStatus)
}

// optional string _ScopeDesc = 3;
bool BizScopeInfo::has__scopedesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BizScopeInfo::set_has__scopedesc() {
  _has_bits_[0] |= 0x00000002u;
}
void BizScopeInfo::clear_has__scopedesc() {
  _has_bits_[0] &= ~0x00000002u;
}
void BizScopeInfo::clear__scopedesc() {
  _scopedesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__scopedesc();
}
const ::std::string& BizScopeInfo::_scopedesc() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.BizScopeInfo._ScopeDesc)
  return _scopedesc_.GetNoArena();
}
void BizScopeInfo::set__scopedesc(const ::std::string& value) {
  set_has__scopedesc();
  _scopedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.BizScopeInfo._ScopeDesc)
}
#if LANG_CXX11
void BizScopeInfo::set__scopedesc(::std::string&& value) {
  set_has__scopedesc();
  _scopedesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.BizScopeInfo._ScopeDesc)
}
#endif
void BizScopeInfo::set__scopedesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__scopedesc();
  _scopedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.BizScopeInfo._ScopeDesc)
}
void BizScopeInfo::set__scopedesc(const char* value, size_t size) {
  set_has__scopedesc();
  _scopedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.BizScopeInfo._ScopeDesc)
}
::std::string* BizScopeInfo::mutable__scopedesc() {
  set_has__scopedesc();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.BizScopeInfo._ScopeDesc)
  return _scopedesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BizScopeInfo::release__scopedesc() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.BizScopeInfo._ScopeDesc)
  clear_has__scopedesc();
  return _scopedesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BizScopeInfo::set_allocated__scopedesc(::std::string* _scopedesc) {
  if (_scopedesc != NULL) {
    set_has__scopedesc();
  } else {
    clear_has__scopedesc();
  }
  _scopedesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _scopedesc);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.BizScopeInfo._ScopeDesc)
}

// required uint32 _ApiCount = 4;
bool BizScopeInfo::has__apicount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BizScopeInfo::set_has__apicount() {
  _has_bits_[0] |= 0x00000008u;
}
void BizScopeInfo::clear_has__apicount() {
  _has_bits_[0] &= ~0x00000008u;
}
void BizScopeInfo::clear__apicount() {
  _apicount_ = 0u;
  clear_has__apicount();
}
::google::protobuf::uint32 BizScopeInfo::_apicount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.BizScopeInfo._ApiCount)
  return _apicount_;
}
void BizScopeInfo::set__apicount(::google::protobuf::uint32 value) {
  set_has__apicount();
  _apicount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.BizScopeInfo._ApiCount)
}

// repeated .MMPro.micromsg.BizApiInfo _ApiList = 5;
int BizScopeInfo::_apilist_size() const {
  return _apilist_.size();
}
void BizScopeInfo::clear__apilist() {
  _apilist_.Clear();
}
const ::MMPro::micromsg::BizApiInfo& BizScopeInfo::_apilist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.BizScopeInfo._ApiList)
  return _apilist_.Get(index);
}
::MMPro::micromsg::BizApiInfo* BizScopeInfo::mutable__apilist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.BizScopeInfo._ApiList)
  return _apilist_.Mutable(index);
}
::MMPro::micromsg::BizApiInfo* BizScopeInfo::add__apilist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.BizScopeInfo._ApiList)
  return _apilist_.Add();
}
::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizApiInfo >*
BizScopeInfo::mutable__apilist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.BizScopeInfo._ApiList)
  return &_apilist_;
}
const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::BizApiInfo >&
BizScopeInfo::_apilist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.BizScopeInfo._ApiList)
  return _apilist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
