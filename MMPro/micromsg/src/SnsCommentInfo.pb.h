// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnsCommentInfo.proto

#ifndef PROTOBUF_SnsCommentInfo_2eproto__INCLUDED
#define PROTOBUF_SnsCommentInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class SnsCommentInfo;
class SnsCommentInfoDefaultTypeInternal;
extern SnsCommentInfoDefaultTypeInternal _SnsCommentInfo_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_SnsCommentInfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SnsCommentInfo_2eproto

// ===================================================================

class SnsCommentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.SnsCommentInfo) */ {
 public:
  SnsCommentInfo();
  virtual ~SnsCommentInfo();

  SnsCommentInfo(const SnsCommentInfo& from);

  inline SnsCommentInfo& operator=(const SnsCommentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnsCommentInfo& default_instance();

  static inline const SnsCommentInfo* internal_default_instance() {
    return reinterpret_cast<const SnsCommentInfo*>(
               &_SnsCommentInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SnsCommentInfo* other);

  // implements Message ----------------------------------------------

  inline SnsCommentInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SnsCommentInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnsCommentInfo& from);
  void MergeFrom(const SnsCommentInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnsCommentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string _Username = 1;
  bool has__username() const;
  void clear__username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& _username() const;
  void set__username(const ::std::string& value);
  #if LANG_CXX11
  void set__username(::std::string&& value);
  #endif
  void set__username(const char* value);
  void set__username(const char* value, size_t size);
  ::std::string* mutable__username();
  ::std::string* release__username();
  void set_allocated__username(::std::string* _username);

  // optional string _Nickname = 2;
  bool has__nickname() const;
  void clear__nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& _nickname() const;
  void set__nickname(const ::std::string& value);
  #if LANG_CXX11
  void set__nickname(::std::string&& value);
  #endif
  void set__nickname(const char* value);
  void set__nickname(const char* value, size_t size);
  ::std::string* mutable__nickname();
  ::std::string* release__nickname();
  void set_allocated__nickname(::std::string* _nickname);

  // optional string _Content = 5;
  bool has__content() const;
  void clear__content();
  static const int kContentFieldNumber = 5;
  const ::std::string& _content() const;
  void set__content(const ::std::string& value);
  #if LANG_CXX11
  void set__content(::std::string&& value);
  #endif
  void set__content(const char* value);
  void set__content(const char* value, size_t size);
  ::std::string* mutable__content();
  ::std::string* release__content();
  void set_allocated__content(::std::string* _content);

  // optional string _ReplyUsername = 9;
  bool has__replyusername() const;
  void clear__replyusername();
  static const int kReplyUsernameFieldNumber = 9;
  const ::std::string& _replyusername() const;
  void set__replyusername(const ::std::string& value);
  #if LANG_CXX11
  void set__replyusername(::std::string&& value);
  #endif
  void set__replyusername(const char* value);
  void set__replyusername(const char* value, size_t size);
  ::std::string* mutable__replyusername();
  ::std::string* release__replyusername();
  void set_allocated__replyusername(::std::string* _replyusername);

  // required uint32 _Source = 3;
  bool has__source() const;
  void clear__source();
  static const int kSourceFieldNumber = 3;
  ::google::protobuf::uint32 _source() const;
  void set__source(::google::protobuf::uint32 value);

  // required uint32 _Type = 4;
  bool has__type() const;
  void clear__type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint32 _type() const;
  void set__type(::google::protobuf::uint32 value);

  // required uint32 _CreateTime = 6;
  bool has__createtime() const;
  void clear__createtime();
  static const int kCreateTimeFieldNumber = 6;
  ::google::protobuf::uint32 _createtime() const;
  void set__createtime(::google::protobuf::uint32 value);

  // optional int32 _CommentId = 7;
  bool has__commentid() const;
  void clear__commentid();
  static const int kCommentIdFieldNumber = 7;
  ::google::protobuf::int32 _commentid() const;
  void set__commentid(::google::protobuf::int32 value);

  // optional int32 _ReplyCommentId = 8;
  bool has__replycommentid() const;
  void clear__replycommentid();
  static const int kReplyCommentIdFieldNumber = 8;
  ::google::protobuf::int32 _replycommentid() const;
  void set__replycommentid(::google::protobuf::int32 value);

  // optional uint32 _IsNotRichText = 10;
  bool has__isnotrichtext() const;
  void clear__isnotrichtext();
  static const int kIsNotRichTextFieldNumber = 10;
  ::google::protobuf::uint32 _isnotrichtext() const;
  void set__isnotrichtext(::google::protobuf::uint32 value);

  // optional uint64 _ReplyCommentId2 = 11;
  bool has__replycommentid2() const;
  void clear__replycommentid2();
  static const int kReplyCommentId2FieldNumber = 11;
  ::google::protobuf::uint64 _replycommentid2() const;
  void set__replycommentid2(::google::protobuf::uint64 value);

  // optional uint64 _CommentId2 = 12;
  bool has__commentid2() const;
  void clear__commentid2();
  static const int kCommentId2FieldNumber = 12;
  ::google::protobuf::uint64 _commentid2() const;
  void set__commentid2(::google::protobuf::uint64 value);

  // optional uint32 _DeleteFlag = 13;
  bool has__deleteflag() const;
  void clear__deleteflag();
  static const int kDeleteFlagFieldNumber = 13;
  ::google::protobuf::uint32 _deleteflag() const;
  void set__deleteflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.SnsCommentInfo)
 private:
  void set_has__username();
  void clear_has__username();
  void set_has__nickname();
  void clear_has__nickname();
  void set_has__source();
  void clear_has__source();
  void set_has__type();
  void clear_has__type();
  void set_has__content();
  void clear_has__content();
  void set_has__createtime();
  void clear_has__createtime();
  void set_has__commentid();
  void clear_has__commentid();
  void set_has__replycommentid();
  void clear_has__replycommentid();
  void set_has__replyusername();
  void clear_has__replyusername();
  void set_has__isnotrichtext();
  void clear_has__isnotrichtext();
  void set_has__replycommentid2();
  void clear_has__replycommentid2();
  void set_has__commentid2();
  void clear_has__commentid2();
  void set_has__deleteflag();
  void clear_has__deleteflag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr _username_;
  ::google::protobuf::internal::ArenaStringPtr _nickname_;
  ::google::protobuf::internal::ArenaStringPtr _content_;
  ::google::protobuf::internal::ArenaStringPtr _replyusername_;
  ::google::protobuf::uint32 _source_;
  ::google::protobuf::uint32 _type_;
  ::google::protobuf::uint32 _createtime_;
  ::google::protobuf::int32 _commentid_;
  ::google::protobuf::int32 _replycommentid_;
  ::google::protobuf::uint32 _isnotrichtext_;
  ::google::protobuf::uint64 _replycommentid2_;
  ::google::protobuf::uint64 _commentid2_;
  ::google::protobuf::uint32 _deleteflag_;
  friend struct protobuf_SnsCommentInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsCommentInfo

// optional string _Username = 1;
inline bool SnsCommentInfo::has__username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnsCommentInfo::set_has__username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnsCommentInfo::clear_has__username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnsCommentInfo::clear__username() {
  _username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__username();
}
inline const ::std::string& SnsCommentInfo::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Username)
  return _username_.GetNoArena();
}
inline void SnsCommentInfo::set__username(const ::std::string& value) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Username)
}
#if LANG_CXX11
inline void SnsCommentInfo::set__username(::std::string&& value) {
  set_has__username();
  _username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Username)
}
#endif
inline void SnsCommentInfo::set__username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Username)
}
inline void SnsCommentInfo::set__username(const char* value, size_t size) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Username)
}
inline ::std::string* SnsCommentInfo::mutable__username() {
  set_has__username();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Username)
  return _username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsCommentInfo::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Username)
  clear_has__username();
  return _username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsCommentInfo::set_allocated__username(::std::string* _username) {
  if (_username != NULL) {
    set_has__username();
  } else {
    clear_has__username();
  }
  _username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _username);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Username)
}

// optional string _Nickname = 2;
inline bool SnsCommentInfo::has__nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnsCommentInfo::set_has__nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnsCommentInfo::clear_has__nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnsCommentInfo::clear__nickname() {
  _nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__nickname();
}
inline const ::std::string& SnsCommentInfo::_nickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Nickname)
  return _nickname_.GetNoArena();
}
inline void SnsCommentInfo::set__nickname(const ::std::string& value) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Nickname)
}
#if LANG_CXX11
inline void SnsCommentInfo::set__nickname(::std::string&& value) {
  set_has__nickname();
  _nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Nickname)
}
#endif
inline void SnsCommentInfo::set__nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Nickname)
}
inline void SnsCommentInfo::set__nickname(const char* value, size_t size) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Nickname)
}
inline ::std::string* SnsCommentInfo::mutable__nickname() {
  set_has__nickname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Nickname)
  return _nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsCommentInfo::release__nickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Nickname)
  clear_has__nickname();
  return _nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsCommentInfo::set_allocated__nickname(::std::string* _nickname) {
  if (_nickname != NULL) {
    set_has__nickname();
  } else {
    clear_has__nickname();
  }
  _nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _nickname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Nickname)
}

// required uint32 _Source = 3;
inline bool SnsCommentInfo::has__source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnsCommentInfo::set_has__source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SnsCommentInfo::clear_has__source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SnsCommentInfo::clear__source() {
  _source_ = 0u;
  clear_has__source();
}
inline ::google::protobuf::uint32 SnsCommentInfo::_source() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Source)
  return _source_;
}
inline void SnsCommentInfo::set__source(::google::protobuf::uint32 value) {
  set_has__source();
  _source_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Source)
}

// required uint32 _Type = 4;
inline bool SnsCommentInfo::has__type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SnsCommentInfo::set_has__type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SnsCommentInfo::clear_has__type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SnsCommentInfo::clear__type() {
  _type_ = 0u;
  clear_has__type();
}
inline ::google::protobuf::uint32 SnsCommentInfo::_type() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Type)
  return _type_;
}
inline void SnsCommentInfo::set__type(::google::protobuf::uint32 value) {
  set_has__type();
  _type_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Type)
}

// optional string _Content = 5;
inline bool SnsCommentInfo::has__content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnsCommentInfo::set_has__content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnsCommentInfo::clear_has__content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnsCommentInfo::clear__content() {
  _content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__content();
}
inline const ::std::string& SnsCommentInfo::_content() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Content)
  return _content_.GetNoArena();
}
inline void SnsCommentInfo::set__content(const ::std::string& value) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Content)
}
#if LANG_CXX11
inline void SnsCommentInfo::set__content(::std::string&& value) {
  set_has__content();
  _content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Content)
}
#endif
inline void SnsCommentInfo::set__content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Content)
}
inline void SnsCommentInfo::set__content(const char* value, size_t size) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Content)
}
inline ::std::string* SnsCommentInfo::mutable__content() {
  set_has__content();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Content)
  return _content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsCommentInfo::release__content() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Content)
  clear_has__content();
  return _content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsCommentInfo::set_allocated__content(::std::string* _content) {
  if (_content != NULL) {
    set_has__content();
  } else {
    clear_has__content();
  }
  _content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _content);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Content)
}

// required uint32 _CreateTime = 6;
inline bool SnsCommentInfo::has__createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SnsCommentInfo::set_has__createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SnsCommentInfo::clear_has__createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SnsCommentInfo::clear__createtime() {
  _createtime_ = 0u;
  clear_has__createtime();
}
inline ::google::protobuf::uint32 SnsCommentInfo::_createtime() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CreateTime)
  return _createtime_;
}
inline void SnsCommentInfo::set__createtime(::google::protobuf::uint32 value) {
  set_has__createtime();
  _createtime_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CreateTime)
}

// optional int32 _CommentId = 7;
inline bool SnsCommentInfo::has__commentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SnsCommentInfo::set_has__commentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SnsCommentInfo::clear_has__commentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SnsCommentInfo::clear__commentid() {
  _commentid_ = 0;
  clear_has__commentid();
}
inline ::google::protobuf::int32 SnsCommentInfo::_commentid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CommentId)
  return _commentid_;
}
inline void SnsCommentInfo::set__commentid(::google::protobuf::int32 value) {
  set_has__commentid();
  _commentid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CommentId)
}

// optional int32 _ReplyCommentId = 8;
inline bool SnsCommentInfo::has__replycommentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SnsCommentInfo::set_has__replycommentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SnsCommentInfo::clear_has__replycommentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SnsCommentInfo::clear__replycommentid() {
  _replycommentid_ = 0;
  clear_has__replycommentid();
}
inline ::google::protobuf::int32 SnsCommentInfo::_replycommentid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyCommentId)
  return _replycommentid_;
}
inline void SnsCommentInfo::set__replycommentid(::google::protobuf::int32 value) {
  set_has__replycommentid();
  _replycommentid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyCommentId)
}

// optional string _ReplyUsername = 9;
inline bool SnsCommentInfo::has__replyusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnsCommentInfo::set_has__replyusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnsCommentInfo::clear_has__replyusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnsCommentInfo::clear__replyusername() {
  _replyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__replyusername();
}
inline const ::std::string& SnsCommentInfo::_replyusername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  return _replyusername_.GetNoArena();
}
inline void SnsCommentInfo::set__replyusername(const ::std::string& value) {
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
#if LANG_CXX11
inline void SnsCommentInfo::set__replyusername(::std::string&& value) {
  set_has__replyusername();
  _replyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
#endif
inline void SnsCommentInfo::set__replyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
inline void SnsCommentInfo::set__replyusername(const char* value, size_t size) {
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
inline ::std::string* SnsCommentInfo::mutable__replyusername() {
  set_has__replyusername();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  return _replyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsCommentInfo::release__replyusername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  clear_has__replyusername();
  return _replyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsCommentInfo::set_allocated__replyusername(::std::string* _replyusername) {
  if (_replyusername != NULL) {
    set_has__replyusername();
  } else {
    clear_has__replyusername();
  }
  _replyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _replyusername);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}

// optional uint32 _IsNotRichText = 10;
inline bool SnsCommentInfo::has__isnotrichtext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SnsCommentInfo::set_has__isnotrichtext() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SnsCommentInfo::clear_has__isnotrichtext() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SnsCommentInfo::clear__isnotrichtext() {
  _isnotrichtext_ = 0u;
  clear_has__isnotrichtext();
}
inline ::google::protobuf::uint32 SnsCommentInfo::_isnotrichtext() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._IsNotRichText)
  return _isnotrichtext_;
}
inline void SnsCommentInfo::set__isnotrichtext(::google::protobuf::uint32 value) {
  set_has__isnotrichtext();
  _isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._IsNotRichText)
}

// optional uint64 _ReplyCommentId2 = 11;
inline bool SnsCommentInfo::has__replycommentid2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SnsCommentInfo::set_has__replycommentid2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SnsCommentInfo::clear_has__replycommentid2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SnsCommentInfo::clear__replycommentid2() {
  _replycommentid2_ = GOOGLE_ULONGLONG(0);
  clear_has__replycommentid2();
}
inline ::google::protobuf::uint64 SnsCommentInfo::_replycommentid2() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyCommentId2)
  return _replycommentid2_;
}
inline void SnsCommentInfo::set__replycommentid2(::google::protobuf::uint64 value) {
  set_has__replycommentid2();
  _replycommentid2_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyCommentId2)
}

// optional uint64 _CommentId2 = 12;
inline bool SnsCommentInfo::has__commentid2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SnsCommentInfo::set_has__commentid2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SnsCommentInfo::clear_has__commentid2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SnsCommentInfo::clear__commentid2() {
  _commentid2_ = GOOGLE_ULONGLONG(0);
  clear_has__commentid2();
}
inline ::google::protobuf::uint64 SnsCommentInfo::_commentid2() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CommentId2)
  return _commentid2_;
}
inline void SnsCommentInfo::set__commentid2(::google::protobuf::uint64 value) {
  set_has__commentid2();
  _commentid2_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CommentId2)
}

// optional uint32 _DeleteFlag = 13;
inline bool SnsCommentInfo::has__deleteflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SnsCommentInfo::set_has__deleteflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SnsCommentInfo::clear_has__deleteflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SnsCommentInfo::clear__deleteflag() {
  _deleteflag_ = 0u;
  clear_has__deleteflag();
}
inline ::google::protobuf::uint32 SnsCommentInfo::_deleteflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._DeleteFlag)
  return _deleteflag_;
}
inline void SnsCommentInfo::set__deleteflag(::google::protobuf::uint32 value) {
  set_has__deleteflag();
  _deleteflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._DeleteFlag)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SnsCommentInfo_2eproto__INCLUDED
