// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnsCommentInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SnsCommentInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class SnsCommentInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsCommentInfo> {
} _SnsCommentInfo_default_instance_;

namespace protobuf_SnsCommentInfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _commentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _replycommentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _replyusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _isnotrichtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _replycommentid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _commentid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _deleteflag_),
  0,
  1,
  4,
  5,
  2,
  6,
  7,
  8,
  3,
  9,
  10,
  11,
  12,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(SnsCommentInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsCommentInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SnsCommentInfo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _SnsCommentInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SnsCommentInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024SnsCommentInfo.proto\022\016MMPro.micromsg\"\236"
      "\002\n\016SnsCommentInfo\022\021\n\t_Username\030\001 \001(\t\022\021\n\t"
      "_Nickname\030\002 \001(\t\022\017\n\007_Source\030\003 \002(\r\022\r\n\005_Typ"
      "e\030\004 \002(\r\022\020\n\010_Content\030\005 \001(\t\022\023\n\013_CreateTime"
      "\030\006 \002(\r\022\022\n\n_CommentId\030\007 \001(\005\022\027\n\017_ReplyComm"
      "entId\030\010 \001(\005\022\026\n\016_ReplyUsername\030\t \001(\t\022\026\n\016_"
      "IsNotRichText\030\n \001(\r\022\030\n\020_ReplyCommentId2\030"
      "\013 \001(\004\022\023\n\013_CommentId2\030\014 \001(\004\022\023\n\013_DeleteFla"
      "g\030\r \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SnsCommentInfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_SnsCommentInfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsCommentInfo::kUsernameFieldNumber;
const int SnsCommentInfo::kNicknameFieldNumber;
const int SnsCommentInfo::kSourceFieldNumber;
const int SnsCommentInfo::kTypeFieldNumber;
const int SnsCommentInfo::kContentFieldNumber;
const int SnsCommentInfo::kCreateTimeFieldNumber;
const int SnsCommentInfo::kCommentIdFieldNumber;
const int SnsCommentInfo::kReplyCommentIdFieldNumber;
const int SnsCommentInfo::kReplyUsernameFieldNumber;
const int SnsCommentInfo::kIsNotRichTextFieldNumber;
const int SnsCommentInfo::kReplyCommentId2FieldNumber;
const int SnsCommentInfo::kCommentId2FieldNumber;
const int SnsCommentInfo::kDeleteFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsCommentInfo::SnsCommentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SnsCommentInfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.SnsCommentInfo)
}
SnsCommentInfo::SnsCommentInfo(const SnsCommentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__username()) {
    _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
  }
  _nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__nickname()) {
    _nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._nickname_);
  }
  _content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__content()) {
    _content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._content_);
  }
  _replyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__replyusername()) {
    _replyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._replyusername_);
  }
  ::memcpy(&_source_, &from._source_,
    reinterpret_cast<char*>(&_deleteflag_) -
    reinterpret_cast<char*>(&_source_) + sizeof(_deleteflag_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.SnsCommentInfo)
}

void SnsCommentInfo::SharedCtor() {
  _cached_size_ = 0;
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _replyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&_source_, 0, reinterpret_cast<char*>(&_deleteflag_) -
    reinterpret_cast<char*>(&_source_) + sizeof(_deleteflag_));
}

SnsCommentInfo::~SnsCommentInfo() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.SnsCommentInfo)
  SharedDtor();
}

void SnsCommentInfo::SharedDtor() {
  _username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _replyusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsCommentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsCommentInfo::descriptor() {
  protobuf_SnsCommentInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SnsCommentInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsCommentInfo& SnsCommentInfo::default_instance() {
  protobuf_SnsCommentInfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsCommentInfo* SnsCommentInfo::New(::google::protobuf::Arena* arena) const {
  SnsCommentInfo* n = new SnsCommentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsCommentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.SnsCommentInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has__username()) {
      GOOGLE_DCHECK(!_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_username_.UnsafeRawStringPointer())->clear();
    }
    if (has__nickname()) {
      GOOGLE_DCHECK(!_nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has__content()) {
      GOOGLE_DCHECK(!_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_content_.UnsafeRawStringPointer())->clear();
    }
    if (has__replyusername()) {
      GOOGLE_DCHECK(!_replyusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_replyusername_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&_source_, 0, reinterpret_cast<char*>(&_commentid_) -
      reinterpret_cast<char*>(&_source_) + sizeof(_commentid_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&_replycommentid_, 0, reinterpret_cast<char*>(&_deleteflag_) -
      reinterpret_cast<char*>(&_replycommentid_) + sizeof(_deleteflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsCommentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.SnsCommentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string _Username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_username().data(), this->_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.SnsCommentInfo._Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_nickname().data(), this->_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.SnsCommentInfo._Nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _Source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has__source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _Type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has__type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.SnsCommentInfo._Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _CreateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has__createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _CommentId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has__commentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_commentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _ReplyCommentId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has__replycommentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_replycommentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ReplyUsername = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__replyusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_replyusername().data(), this->_replyusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.SnsCommentInfo._ReplyUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _IsNotRichText = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has__isnotrichtext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_isnotrichtext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 _ReplyCommentId2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has__replycommentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_replycommentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 _CommentId2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has__commentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_commentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _DeleteFlag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has__deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.SnsCommentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.SnsCommentInfo)
  return false;
#undef DO_
}

void SnsCommentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.SnsCommentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_username(), output);
  }

  // optional string _Nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_nickname().data(), this->_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_nickname(), output);
  }

  // required uint32 _Source = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_source(), output);
  }

  // required uint32 _Type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_type(), output);
  }

  // optional string _Content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->_content(), output);
  }

  // required uint32 _CreateTime = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_createtime(), output);
  }

  // optional int32 _CommentId = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->_commentid(), output);
  }

  // optional int32 _ReplyCommentId = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->_replycommentid(), output);
  }

  // optional string _ReplyUsername = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_replyusername().data(), this->_replyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._ReplyUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->_replyusername(), output);
  }

  // optional uint32 _IsNotRichText = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_isnotrichtext(), output);
  }

  // optional uint64 _ReplyCommentId2 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->_replycommentid2(), output);
  }

  // optional uint64 _CommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->_commentid2(), output);
  }

  // optional uint32 _DeleteFlag = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->_deleteflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.SnsCommentInfo)
}

::google::protobuf::uint8* SnsCommentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.SnsCommentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_username(), target);
  }

  // optional string _Nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_nickname().data(), this->_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_nickname(), target);
  }

  // required uint32 _Source = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_source(), target);
  }

  // required uint32 _Type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_type(), target);
  }

  // optional string _Content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_content(), target);
  }

  // required uint32 _CreateTime = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_createtime(), target);
  }

  // optional int32 _CommentId = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->_commentid(), target);
  }

  // optional int32 _ReplyCommentId = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->_replycommentid(), target);
  }

  // optional string _ReplyUsername = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_replyusername().data(), this->_replyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.SnsCommentInfo._ReplyUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->_replyusername(), target);
  }

  // optional uint32 _IsNotRichText = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_isnotrichtext(), target);
  }

  // optional uint64 _ReplyCommentId2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->_replycommentid2(), target);
  }

  // optional uint64 _CommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->_commentid2(), target);
  }

  // optional uint32 _DeleteFlag = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->_deleteflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.SnsCommentInfo)
  return target;
}

size_t SnsCommentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMPro.micromsg.SnsCommentInfo)
  size_t total_size = 0;

  if (has__source()) {
    // required uint32 _Source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_source());
  }

  if (has__type()) {
    // required uint32 _Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_type());
  }

  if (has__createtime()) {
    // required uint32 _CreateTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_createtime());
  }

  return total_size;
}
size_t SnsCommentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.SnsCommentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required uint32 _Source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_source());

    // required uint32 _Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_type());

    // required uint32 _CreateTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string _Username = 1;
    if (has__username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_username());
    }

    // optional string _Nickname = 2;
    if (has__nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_nickname());
    }

    // optional string _Content = 5;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

    // optional string _ReplyUsername = 9;
    if (has__replyusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_replyusername());
    }

  }
  // optional int32 _CommentId = 7;
  if (has__commentid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_commentid());
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 _ReplyCommentId = 8;
    if (has__replycommentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_replycommentid());
    }

    // optional uint32 _IsNotRichText = 10;
    if (has__isnotrichtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_isnotrichtext());
    }

    // optional uint64 _ReplyCommentId2 = 11;
    if (has__replycommentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_replycommentid2());
    }

    // optional uint64 _CommentId2 = 12;
    if (has__commentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_commentid2());
    }

    // optional uint32 _DeleteFlag = 13;
    if (has__deleteflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_deleteflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsCommentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.SnsCommentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsCommentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsCommentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.SnsCommentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.SnsCommentInfo)
    MergeFrom(*source);
  }
}

void SnsCommentInfo::MergeFrom(const SnsCommentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.SnsCommentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__username();
      _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__nickname();
      _nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has__content();
      _content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has__replyusername();
      _replyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._replyusername_);
    }
    if (cached_has_bits & 0x00000010u) {
      _source_ = from._source_;
    }
    if (cached_has_bits & 0x00000020u) {
      _type_ = from._type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _createtime_ = from._createtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      _commentid_ = from._commentid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      _replycommentid_ = from._replycommentid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _isnotrichtext_ = from._isnotrichtext_;
    }
    if (cached_has_bits & 0x00000400u) {
      _replycommentid2_ = from._replycommentid2_;
    }
    if (cached_has_bits & 0x00000800u) {
      _commentid2_ = from._commentid2_;
    }
    if (cached_has_bits & 0x00001000u) {
      _deleteflag_ = from._deleteflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsCommentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.SnsCommentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsCommentInfo::CopyFrom(const SnsCommentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.SnsCommentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsCommentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  return true;
}

void SnsCommentInfo::Swap(SnsCommentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsCommentInfo::InternalSwap(SnsCommentInfo* other) {
  _username_.Swap(&other->_username_);
  _nickname_.Swap(&other->_nickname_);
  _content_.Swap(&other->_content_);
  _replyusername_.Swap(&other->_replyusername_);
  std::swap(_source_, other->_source_);
  std::swap(_type_, other->_type_);
  std::swap(_createtime_, other->_createtime_);
  std::swap(_commentid_, other->_commentid_);
  std::swap(_replycommentid_, other->_replycommentid_);
  std::swap(_isnotrichtext_, other->_isnotrichtext_);
  std::swap(_replycommentid2_, other->_replycommentid2_);
  std::swap(_commentid2_, other->_commentid2_);
  std::swap(_deleteflag_, other->_deleteflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsCommentInfo::GetMetadata() const {
  protobuf_SnsCommentInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SnsCommentInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsCommentInfo

// optional string _Username = 1;
bool SnsCommentInfo::has__username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsCommentInfo::set_has__username() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsCommentInfo::clear_has__username() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsCommentInfo::clear__username() {
  _username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__username();
}
const ::std::string& SnsCommentInfo::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Username)
  return _username_.GetNoArena();
}
void SnsCommentInfo::set__username(const ::std::string& value) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Username)
}
#if LANG_CXX11
void SnsCommentInfo::set__username(::std::string&& value) {
  set_has__username();
  _username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Username)
}
#endif
void SnsCommentInfo::set__username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Username)
}
void SnsCommentInfo::set__username(const char* value, size_t size) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Username)
}
::std::string* SnsCommentInfo::mutable__username() {
  set_has__username();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Username)
  return _username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Username)
  clear_has__username();
  return _username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated__username(::std::string* _username) {
  if (_username != NULL) {
    set_has__username();
  } else {
    clear_has__username();
  }
  _username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _username);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Username)
}

// optional string _Nickname = 2;
bool SnsCommentInfo::has__nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsCommentInfo::set_has__nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsCommentInfo::clear_has__nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsCommentInfo::clear__nickname() {
  _nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__nickname();
}
const ::std::string& SnsCommentInfo::_nickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Nickname)
  return _nickname_.GetNoArena();
}
void SnsCommentInfo::set__nickname(const ::std::string& value) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Nickname)
}
#if LANG_CXX11
void SnsCommentInfo::set__nickname(::std::string&& value) {
  set_has__nickname();
  _nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Nickname)
}
#endif
void SnsCommentInfo::set__nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Nickname)
}
void SnsCommentInfo::set__nickname(const char* value, size_t size) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Nickname)
}
::std::string* SnsCommentInfo::mutable__nickname() {
  set_has__nickname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Nickname)
  return _nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release__nickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Nickname)
  clear_has__nickname();
  return _nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated__nickname(::std::string* _nickname) {
  if (_nickname != NULL) {
    set_has__nickname();
  } else {
    clear_has__nickname();
  }
  _nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _nickname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Nickname)
}

// required uint32 _Source = 3;
bool SnsCommentInfo::has__source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsCommentInfo::set_has__source() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsCommentInfo::clear_has__source() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsCommentInfo::clear__source() {
  _source_ = 0u;
  clear_has__source();
}
::google::protobuf::uint32 SnsCommentInfo::_source() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Source)
  return _source_;
}
void SnsCommentInfo::set__source(::google::protobuf::uint32 value) {
  set_has__source();
  _source_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Source)
}

// required uint32 _Type = 4;
bool SnsCommentInfo::has__type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsCommentInfo::set_has__type() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsCommentInfo::clear_has__type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsCommentInfo::clear__type() {
  _type_ = 0u;
  clear_has__type();
}
::google::protobuf::uint32 SnsCommentInfo::_type() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Type)
  return _type_;
}
void SnsCommentInfo::set__type(::google::protobuf::uint32 value) {
  set_has__type();
  _type_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Type)
}

// optional string _Content = 5;
bool SnsCommentInfo::has__content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsCommentInfo::set_has__content() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsCommentInfo::clear_has__content() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsCommentInfo::clear__content() {
  _content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__content();
}
const ::std::string& SnsCommentInfo::_content() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._Content)
  return _content_.GetNoArena();
}
void SnsCommentInfo::set__content(const ::std::string& value) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._Content)
}
#if LANG_CXX11
void SnsCommentInfo::set__content(::std::string&& value) {
  set_has__content();
  _content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._Content)
}
#endif
void SnsCommentInfo::set__content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._Content)
}
void SnsCommentInfo::set__content(const char* value, size_t size) {
  set_has__content();
  _content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._Content)
}
::std::string* SnsCommentInfo::mutable__content() {
  set_has__content();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._Content)
  return _content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release__content() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._Content)
  clear_has__content();
  return _content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated__content(::std::string* _content) {
  if (_content != NULL) {
    set_has__content();
  } else {
    clear_has__content();
  }
  _content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _content);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._Content)
}

// required uint32 _CreateTime = 6;
bool SnsCommentInfo::has__createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsCommentInfo::set_has__createtime() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsCommentInfo::clear_has__createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsCommentInfo::clear__createtime() {
  _createtime_ = 0u;
  clear_has__createtime();
}
::google::protobuf::uint32 SnsCommentInfo::_createtime() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CreateTime)
  return _createtime_;
}
void SnsCommentInfo::set__createtime(::google::protobuf::uint32 value) {
  set_has__createtime();
  _createtime_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CreateTime)
}

// optional int32 _CommentId = 7;
bool SnsCommentInfo::has__commentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsCommentInfo::set_has__commentid() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsCommentInfo::clear_has__commentid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsCommentInfo::clear__commentid() {
  _commentid_ = 0;
  clear_has__commentid();
}
::google::protobuf::int32 SnsCommentInfo::_commentid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CommentId)
  return _commentid_;
}
void SnsCommentInfo::set__commentid(::google::protobuf::int32 value) {
  set_has__commentid();
  _commentid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CommentId)
}

// optional int32 _ReplyCommentId = 8;
bool SnsCommentInfo::has__replycommentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsCommentInfo::set_has__replycommentid() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsCommentInfo::clear_has__replycommentid() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsCommentInfo::clear__replycommentid() {
  _replycommentid_ = 0;
  clear_has__replycommentid();
}
::google::protobuf::int32 SnsCommentInfo::_replycommentid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyCommentId)
  return _replycommentid_;
}
void SnsCommentInfo::set__replycommentid(::google::protobuf::int32 value) {
  set_has__replycommentid();
  _replycommentid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyCommentId)
}

// optional string _ReplyUsername = 9;
bool SnsCommentInfo::has__replyusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsCommentInfo::set_has__replyusername() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsCommentInfo::clear_has__replyusername() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsCommentInfo::clear__replyusername() {
  _replyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__replyusername();
}
const ::std::string& SnsCommentInfo::_replyusername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  return _replyusername_.GetNoArena();
}
void SnsCommentInfo::set__replyusername(const ::std::string& value) {
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
#if LANG_CXX11
void SnsCommentInfo::set__replyusername(::std::string&& value) {
  set_has__replyusername();
  _replyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
#endif
void SnsCommentInfo::set__replyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
void SnsCommentInfo::set__replyusername(const char* value, size_t size) {
  set_has__replyusername();
  _replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}
::std::string* SnsCommentInfo::mutable__replyusername() {
  set_has__replyusername();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  return _replyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release__replyusername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
  clear_has__replyusername();
  return _replyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated__replyusername(::std::string* _replyusername) {
  if (_replyusername != NULL) {
    set_has__replyusername();
  } else {
    clear_has__replyusername();
  }
  _replyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _replyusername);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.SnsCommentInfo._ReplyUsername)
}

// optional uint32 _IsNotRichText = 10;
bool SnsCommentInfo::has__isnotrichtext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsCommentInfo::set_has__isnotrichtext() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsCommentInfo::clear_has__isnotrichtext() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsCommentInfo::clear__isnotrichtext() {
  _isnotrichtext_ = 0u;
  clear_has__isnotrichtext();
}
::google::protobuf::uint32 SnsCommentInfo::_isnotrichtext() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._IsNotRichText)
  return _isnotrichtext_;
}
void SnsCommentInfo::set__isnotrichtext(::google::protobuf::uint32 value) {
  set_has__isnotrichtext();
  _isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._IsNotRichText)
}

// optional uint64 _ReplyCommentId2 = 11;
bool SnsCommentInfo::has__replycommentid2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsCommentInfo::set_has__replycommentid2() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsCommentInfo::clear_has__replycommentid2() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsCommentInfo::clear__replycommentid2() {
  _replycommentid2_ = GOOGLE_ULONGLONG(0);
  clear_has__replycommentid2();
}
::google::protobuf::uint64 SnsCommentInfo::_replycommentid2() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._ReplyCommentId2)
  return _replycommentid2_;
}
void SnsCommentInfo::set__replycommentid2(::google::protobuf::uint64 value) {
  set_has__replycommentid2();
  _replycommentid2_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._ReplyCommentId2)
}

// optional uint64 _CommentId2 = 12;
bool SnsCommentInfo::has__commentid2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsCommentInfo::set_has__commentid2() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsCommentInfo::clear_has__commentid2() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsCommentInfo::clear__commentid2() {
  _commentid2_ = GOOGLE_ULONGLONG(0);
  clear_has__commentid2();
}
::google::protobuf::uint64 SnsCommentInfo::_commentid2() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._CommentId2)
  return _commentid2_;
}
void SnsCommentInfo::set__commentid2(::google::protobuf::uint64 value) {
  set_has__commentid2();
  _commentid2_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._CommentId2)
}

// optional uint32 _DeleteFlag = 13;
bool SnsCommentInfo::has__deleteflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsCommentInfo::set_has__deleteflag() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsCommentInfo::clear_has__deleteflag() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsCommentInfo::clear__deleteflag() {
  _deleteflag_ = 0u;
  clear_has__deleteflag();
}
::google::protobuf::uint32 SnsCommentInfo::_deleteflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.SnsCommentInfo._DeleteFlag)
  return _deleteflag_;
}
void SnsCommentInfo::set__deleteflag(::google::protobuf::uint32 value) {
  set_has__deleteflag();
  _deleteflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.SnsCommentInfo._DeleteFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
