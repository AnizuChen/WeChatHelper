// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HTTPHeader.proto

#ifndef PROTOBUF_HTTPHeader_2eproto__INCLUDED
#define PROTOBUF_HTTPHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class HTTPHeader;
class HTTPHeaderDefaultTypeInternal;
extern HTTPHeaderDefaultTypeInternal _HTTPHeader_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_HTTPHeader_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HTTPHeader_2eproto

// ===================================================================

class HTTPHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.HTTPHeader) */ {
 public:
  HTTPHeader();
  virtual ~HTTPHeader();

  HTTPHeader(const HTTPHeader& from);

  inline HTTPHeader& operator=(const HTTPHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPHeader& default_instance();

  static inline const HTTPHeader* internal_default_instance() {
    return reinterpret_cast<const HTTPHeader*>(
               &_HTTPHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HTTPHeader* other);

  // implements Message ----------------------------------------------

  inline HTTPHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPHeader& from);
  void MergeFrom(const HTTPHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string _Key = 1;
  bool has__key() const;
  void clear__key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& _key() const;
  void set__key(const ::std::string& value);
  #if LANG_CXX11
  void set__key(::std::string&& value);
  #endif
  void set__key(const char* value);
  void set__key(const char* value, size_t size);
  ::std::string* mutable__key();
  ::std::string* release__key();
  void set_allocated__key(::std::string* _key);

  // optional string _Value = 2;
  bool has__value() const;
  void clear__value();
  static const int kValueFieldNumber = 2;
  const ::std::string& _value() const;
  void set__value(const ::std::string& value);
  #if LANG_CXX11
  void set__value(::std::string&& value);
  #endif
  void set__value(const char* value);
  void set__value(const char* value, size_t size);
  ::std::string* mutable__value();
  ::std::string* release__value();
  void set_allocated__value(::std::string* _value);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.HTTPHeader)
 private:
  void set_has__key();
  void clear_has__key();
  void set_has__value();
  void clear_has__value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr _key_;
  ::google::protobuf::internal::ArenaStringPtr _value_;
  friend struct protobuf_HTTPHeader_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HTTPHeader

// optional string _Key = 1;
inline bool HTTPHeader::has__key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HTTPHeader::set_has__key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HTTPHeader::clear_has__key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HTTPHeader::clear__key() {
  _key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__key();
}
inline const ::std::string& HTTPHeader::_key() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.HTTPHeader._Key)
  return _key_.GetNoArena();
}
inline void HTTPHeader::set__key(const ::std::string& value) {
  set_has__key();
  _key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.HTTPHeader._Key)
}
#if LANG_CXX11
inline void HTTPHeader::set__key(::std::string&& value) {
  set_has__key();
  _key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.HTTPHeader._Key)
}
#endif
inline void HTTPHeader::set__key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__key();
  _key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.HTTPHeader._Key)
}
inline void HTTPHeader::set__key(const char* value, size_t size) {
  set_has__key();
  _key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.HTTPHeader._Key)
}
inline ::std::string* HTTPHeader::mutable__key() {
  set_has__key();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.HTTPHeader._Key)
  return _key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPHeader::release__key() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.HTTPHeader._Key)
  clear_has__key();
  return _key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPHeader::set_allocated__key(::std::string* _key) {
  if (_key != NULL) {
    set_has__key();
  } else {
    clear_has__key();
  }
  _key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _key);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.HTTPHeader._Key)
}

// optional string _Value = 2;
inline bool HTTPHeader::has__value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HTTPHeader::set_has__value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HTTPHeader::clear_has__value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HTTPHeader::clear__value() {
  _value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__value();
}
inline const ::std::string& HTTPHeader::_value() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.HTTPHeader._Value)
  return _value_.GetNoArena();
}
inline void HTTPHeader::set__value(const ::std::string& value) {
  set_has__value();
  _value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.HTTPHeader._Value)
}
#if LANG_CXX11
inline void HTTPHeader::set__value(::std::string&& value) {
  set_has__value();
  _value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.HTTPHeader._Value)
}
#endif
inline void HTTPHeader::set__value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__value();
  _value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.HTTPHeader._Value)
}
inline void HTTPHeader::set__value(const char* value, size_t size) {
  set_has__value();
  _value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.HTTPHeader._Value)
}
inline ::std::string* HTTPHeader::mutable__value() {
  set_has__value();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.HTTPHeader._Value)
  return _value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPHeader::release__value() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.HTTPHeader._Value)
  clear_has__value();
  return _value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPHeader::set_allocated__value(::std::string* _value) {
  if (_value != NULL) {
    set_has__value();
  } else {
    clear_has__value();
  }
  _value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _value);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.HTTPHeader._Value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HTTPHeader_2eproto__INCLUDED
