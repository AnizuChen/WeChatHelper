// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModContact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ModContact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class ModContactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModContact> {
} _ModContact_default_instance_;

namespace protobuf_ModContact_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _bitval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _imgflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _remarkpyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _remarkquanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _contacttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _roominfocount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _roominfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _domainlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroomnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _addcontactscene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _hasweixinhdheadimg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroomowner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _customizedinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroomdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _headimgmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _encryptusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _idcardnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _realname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _mobilehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _mobilefullhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _additionalcontactlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroomversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _extinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroommaxcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _chatroomtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _newchatroomdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _deleteflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _cardimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _labelidlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _phonenumberlist_),
  25,
  26,
  27,
  28,
  39,
  29,
  40,
  41,
  42,
  30,
  31,
  32,
  43,
  44,
  ~0u,
  33,
  45,
  46,
  0,
  1,
  2,
  47,
  48,
  49,
  3,
  50,
  51,
  4,
  5,
  6,
  7,
  8,
  52,
  53,
  54,
  9,
  34,
  10,
  11,
  12,
  13,
  35,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  36,
  55,
  21,
  56,
  57,
  37,
  58,
  22,
  23,
  24,
  38,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 65, sizeof(ModContact)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModContact_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ModContact.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ModContact_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::MMPro::micromsg::protobuf_SKBuiltinString_5ft_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_RoomInfo_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_SnsUserInfo_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_CustomizedInfo_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_AdditionalContactList_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_ChatRoomMemberData_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_PhoneNumberList_2eproto::InitDefaults();
  _ModContact_default_instance_.DefaultConstruct();
  _ModContact_default_instance_.get_mutable()->_username_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_nickname_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_pyinitial_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_quanpin_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_imgbuf_ = const_cast< ::MMPro::micromsg::SKBuiltinBuffer_t*>(
      ::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_remark_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_remarkpyinitial_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_remarkquanpin_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_domainlist_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_snsuserinfo_ = const_cast< ::MMPro::micromsg::SnsUserInfo*>(
      ::MMPro::micromsg::SnsUserInfo::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_customizedinfo_ = const_cast< ::MMPro::micromsg::CustomizedInfo*>(
      ::MMPro::micromsg::CustomizedInfo::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_additionalcontactlist_ = const_cast< ::MMPro::micromsg::AdditionalContactList*>(
      ::MMPro::micromsg::AdditionalContactList::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_newchatroomdata_ = const_cast< ::MMPro::micromsg::ChatRoomMemberData*>(
      ::MMPro::micromsg::ChatRoomMemberData::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->_phonenumberlist_ = const_cast< ::MMPro::micromsg::PhoneNumberList*>(
      ::MMPro::micromsg::PhoneNumberList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020ModContact.proto\022\016MMPro.micromsg\032\027SKBu"
      "iltinString_t.proto\032\027SKBuiltinBuffer_t.p"
      "roto\032\016RoomInfo.proto\032\021SnsUserInfo.proto\032"
      "\024CustomizedInfo.proto\032\033AdditionalContact"
      "List.proto\032\030ChatRoomMemberData.proto\032\025Ph"
      "oneNumberList.proto\"\227\016\n\nModContact\0224\n\t_U"
      "serName\030\001 \002(\0132!.MMPro.micromsg.SKBuiltin"
      "String_t\0224\n\t_NickName\030\002 \002(\0132!.MMPro.micr"
      "omsg.SKBuiltinString_t\0225\n\n_PYInitial\030\003 \002"
      "(\0132!.MMPro.micromsg.SKBuiltinString_t\0223\n"
      "\010_QuanPin\030\004 \002(\0132!.MMPro.micromsg.SKBuilt"
      "inString_t\022\014\n\004_Sex\030\005 \002(\005\0222\n\007_ImgBuf\030\006 \002("
      "\0132!.MMPro.micromsg.SKBuiltinBuffer_t\022\020\n\010"
      "_BitMask\030\007 \002(\r\022\017\n\007_BitVal\030\010 \002(\r\022\020\n\010_ImgF"
      "lag\030\t \002(\r\0222\n\007_Remark\030\n \001(\0132!.MMPro.micro"
      "msg.SKBuiltinString_t\022;\n\020_RemarkPYInitia"
      "l\030\013 \001(\0132!.MMPro.micromsg.SKBuiltinString"
      "_t\0229\n\016_RemarkQuanPin\030\014 \001(\0132!.MMPro.micro"
      "msg.SKBuiltinString_t\022\024\n\014_ContactType\030\r "
      "\001(\r\022\026\n\016_RoomInfoCount\030\016 \001(\r\022/\n\r_RoomInfo"
      "List\030\017 \003(\0132\030.MMPro.micromsg.RoomInfo\0226\n\013"
      "_DomainList\030\020 \001(\0132!.MMPro.micromsg.SKBui"
      "ltinString_t\022\027\n\017_ChatRoomNotify\030\021 \001(\r\022\030\n"
      "\020_AddContactScene\030\022 \001(\r\022\021\n\t_Province\030\023 \001"
      "(\t\022\r\n\005_City\030\024 \001(\t\022\022\n\n_Signature\030\025 \001(\t\022\025\n"
      "\r_PersonalCard\030\026 \001(\r\022\033\n\023_HasWeiXinHdHead"
      "Img\030\027 \001(\r\022\023\n\013_VerifyFlag\030\030 \001(\r\022\023\n\013_Verif"
      "yInfo\030\031 \001(\t\022\016\n\006_Level\030\032 \001(\005\022\017\n\007_Source\030\033"
      " \001(\r\022\016\n\006_Weibo\030\034 \001(\t\022\026\n\016_VerifyContent\030\035"
      " \001(\t\022\016\n\006_Alias\030\036 \001(\t\022\026\n\016_ChatRoomOwner\030\037"
      " \001(\t\022\026\n\016_WeiboNickname\030  \001(\t\022\022\n\n_WeiboFl"
      "ag\030! \001(\r\022\023\n\013_AlbumStyle\030\" \001(\005\022\022\n\n_AlbumF"
      "lag\030# \001(\005\022\025\n\r_AlbumBGImgID\030$ \001(\t\0221\n\014_Sns"
      "UserInfo\030% \001(\0132\033.MMPro.micromsg.SnsUserI"
      "nfo\022\020\n\010_Country\030& \001(\t\022\026\n\016_BigHeadImgUrl\030"
      "\' \001(\t\022\030\n\020_SmallHeadImgUrl\030( \001(\t\022\024\n\014_MyBr"
      "andList\030) \001(\t\0227\n\017_CustomizedInfo\030* \001(\0132\036"
      ".MMPro.micromsg.CustomizedInfo\022\025\n\r_ChatR"
      "oomData\030+ \001(\t\022\023\n\013_HeadImgMd5\030, \001(\t\022\030\n\020_E"
      "ncryptUserName\030- \001(\t\022\022\n\n_IDCardNum\030. \001(\t"
      "\022\021\n\t_RealName\030/ \001(\t\022\023\n\013_MobileHash\0300 \001(\t"
      "\022\027\n\017_MobileFullHash\0301 \001(\t\022E\n\026_Additional"
      "ContactList\0302 \001(\0132%.MMPro.micromsg.Addit"
      "ionalContactList\022\030\n\020_ChatroomVersion\0305 \001"
      "(\r\022\020\n\010_ExtInfo\0306 \001(\t\022\031\n\021_ChatroomMaxCoun"
      "t\0307 \001(\r\022\025\n\r_ChatroomType\0308 \001(\r\022<\n\020_NewCh"
      "atroomData\0309 \001(\0132\".MMPro.micromsg.ChatRo"
      "omMemberData\022\023\n\013_DeleteFlag\030: \001(\005\022\024\n\014_De"
      "scription\030; \001(\t\022\023\n\013_CardImgUrl\030< \001(\t\022\024\n\014"
      "_LabelIDList\030= \001(\t\0229\n\020_PhoneNumberList\030>"
      " \001(\0132\037.MMPro.micromsg.PhoneNumberList"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ModContact.proto", &protobuf_RegisterTypes);
  ::MMPro::micromsg::protobuf_SKBuiltinString_5ft_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_RoomInfo_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_SnsUserInfo_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_CustomizedInfo_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_AdditionalContactList_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_ChatRoomMemberData_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_PhoneNumberList_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ModContact_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModContact::kUserNameFieldNumber;
const int ModContact::kNickNameFieldNumber;
const int ModContact::kPYInitialFieldNumber;
const int ModContact::kQuanPinFieldNumber;
const int ModContact::kSexFieldNumber;
const int ModContact::kImgBufFieldNumber;
const int ModContact::kBitMaskFieldNumber;
const int ModContact::kBitValFieldNumber;
const int ModContact::kImgFlagFieldNumber;
const int ModContact::kRemarkFieldNumber;
const int ModContact::kRemarkPYInitialFieldNumber;
const int ModContact::kRemarkQuanPinFieldNumber;
const int ModContact::kContactTypeFieldNumber;
const int ModContact::kRoomInfoCountFieldNumber;
const int ModContact::kRoomInfoListFieldNumber;
const int ModContact::kDomainListFieldNumber;
const int ModContact::kChatRoomNotifyFieldNumber;
const int ModContact::kAddContactSceneFieldNumber;
const int ModContact::kProvinceFieldNumber;
const int ModContact::kCityFieldNumber;
const int ModContact::kSignatureFieldNumber;
const int ModContact::kPersonalCardFieldNumber;
const int ModContact::kHasWeiXinHdHeadImgFieldNumber;
const int ModContact::kVerifyFlagFieldNumber;
const int ModContact::kVerifyInfoFieldNumber;
const int ModContact::kLevelFieldNumber;
const int ModContact::kSourceFieldNumber;
const int ModContact::kWeiboFieldNumber;
const int ModContact::kVerifyContentFieldNumber;
const int ModContact::kAliasFieldNumber;
const int ModContact::kChatRoomOwnerFieldNumber;
const int ModContact::kWeiboNicknameFieldNumber;
const int ModContact::kWeiboFlagFieldNumber;
const int ModContact::kAlbumStyleFieldNumber;
const int ModContact::kAlbumFlagFieldNumber;
const int ModContact::kAlbumBGImgIDFieldNumber;
const int ModContact::kSnsUserInfoFieldNumber;
const int ModContact::kCountryFieldNumber;
const int ModContact::kBigHeadImgUrlFieldNumber;
const int ModContact::kSmallHeadImgUrlFieldNumber;
const int ModContact::kMyBrandListFieldNumber;
const int ModContact::kCustomizedInfoFieldNumber;
const int ModContact::kChatRoomDataFieldNumber;
const int ModContact::kHeadImgMd5FieldNumber;
const int ModContact::kEncryptUserNameFieldNumber;
const int ModContact::kIDCardNumFieldNumber;
const int ModContact::kRealNameFieldNumber;
const int ModContact::kMobileHashFieldNumber;
const int ModContact::kMobileFullHashFieldNumber;
const int ModContact::kAdditionalContactListFieldNumber;
const int ModContact::kChatroomVersionFieldNumber;
const int ModContact::kExtInfoFieldNumber;
const int ModContact::kChatroomMaxCountFieldNumber;
const int ModContact::kChatroomTypeFieldNumber;
const int ModContact::kNewChatroomDataFieldNumber;
const int ModContact::kDeleteFlagFieldNumber;
const int ModContact::kDescriptionFieldNumber;
const int ModContact::kCardImgUrlFieldNumber;
const int ModContact::kLabelIDListFieldNumber;
const int ModContact::kPhoneNumberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModContact::ModContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ModContact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.ModContact)
}
ModContact::ModContact(const ModContact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _roominfolist_(from._roominfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__province()) {
    _province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._province_);
  }
  _city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__city()) {
    _city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._city_);
  }
  _signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__signature()) {
    _signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._signature_);
  }
  _verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__verifyinfo()) {
    _verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._verifyinfo_);
  }
  _weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__weibo()) {
    _weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._weibo_);
  }
  _verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__verifycontent()) {
    _verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._verifycontent_);
  }
  _alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__alias()) {
    _alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._alias_);
  }
  _chatroomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__chatroomowner()) {
    _chatroomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._chatroomowner_);
  }
  _weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__weibonickname()) {
    _weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._weibonickname_);
  }
  _albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__albumbgimgid()) {
    _albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._albumbgimgid_);
  }
  _country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__country()) {
    _country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._country_);
  }
  _bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__bigheadimgurl()) {
    _bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bigheadimgurl_);
  }
  _smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__smallheadimgurl()) {
    _smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._smallheadimgurl_);
  }
  _mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__mybrandlist()) {
    _mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mybrandlist_);
  }
  _chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__chatroomdata()) {
    _chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._chatroomdata_);
  }
  _headimgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__headimgmd5()) {
    _headimgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._headimgmd5_);
  }
  _encryptusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__encryptusername()) {
    _encryptusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._encryptusername_);
  }
  _idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__idcardnum()) {
    _idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._idcardnum_);
  }
  _realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__realname()) {
    _realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._realname_);
  }
  _mobilehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__mobilehash()) {
    _mobilehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mobilehash_);
  }
  _mobilefullhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__mobilefullhash()) {
    _mobilefullhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mobilefullhash_);
  }
  _extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__extinfo()) {
    _extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._extinfo_);
  }
  _description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__description()) {
    _description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._description_);
  }
  _cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__cardimgurl()) {
    _cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._cardimgurl_);
  }
  _labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__labelidlist()) {
    _labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._labelidlist_);
  }
  if (from.has__username()) {
    _username_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._username_);
  } else {
    _username_ = NULL;
  }
  if (from.has__nickname()) {
    _nickname_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._nickname_);
  } else {
    _nickname_ = NULL;
  }
  if (from.has__pyinitial()) {
    _pyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._pyinitial_);
  } else {
    _pyinitial_ = NULL;
  }
  if (from.has__quanpin()) {
    _quanpin_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._quanpin_);
  } else {
    _quanpin_ = NULL;
  }
  if (from.has__imgbuf()) {
    _imgbuf_ = new ::MMPro::micromsg::SKBuiltinBuffer_t(*from._imgbuf_);
  } else {
    _imgbuf_ = NULL;
  }
  if (from.has__remark()) {
    _remark_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._remark_);
  } else {
    _remark_ = NULL;
  }
  if (from.has__remarkpyinitial()) {
    _remarkpyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._remarkpyinitial_);
  } else {
    _remarkpyinitial_ = NULL;
  }
  if (from.has__remarkquanpin()) {
    _remarkquanpin_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._remarkquanpin_);
  } else {
    _remarkquanpin_ = NULL;
  }
  if (from.has__domainlist()) {
    _domainlist_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._domainlist_);
  } else {
    _domainlist_ = NULL;
  }
  if (from.has__snsuserinfo()) {
    _snsuserinfo_ = new ::MMPro::micromsg::SnsUserInfo(*from._snsuserinfo_);
  } else {
    _snsuserinfo_ = NULL;
  }
  if (from.has__customizedinfo()) {
    _customizedinfo_ = new ::MMPro::micromsg::CustomizedInfo(*from._customizedinfo_);
  } else {
    _customizedinfo_ = NULL;
  }
  if (from.has__additionalcontactlist()) {
    _additionalcontactlist_ = new ::MMPro::micromsg::AdditionalContactList(*from._additionalcontactlist_);
  } else {
    _additionalcontactlist_ = NULL;
  }
  if (from.has__newchatroomdata()) {
    _newchatroomdata_ = new ::MMPro::micromsg::ChatRoomMemberData(*from._newchatroomdata_);
  } else {
    _newchatroomdata_ = NULL;
  }
  if (from.has__phonenumberlist()) {
    _phonenumberlist_ = new ::MMPro::micromsg::PhoneNumberList(*from._phonenumberlist_);
  } else {
    _phonenumberlist_ = NULL;
  }
  ::memcpy(&_sex_, &from._sex_,
    reinterpret_cast<char*>(&_deleteflag_) -
    reinterpret_cast<char*>(&_sex_) + sizeof(_deleteflag_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.ModContact)
}

void ModContact::SharedCtor() {
  _province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _chatroomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _headimgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _encryptusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mobilehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mobilefullhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&_username_, 0, reinterpret_cast<char*>(&_deleteflag_) -
    reinterpret_cast<char*>(&_username_) + sizeof(_deleteflag_));
  _cached_size_ = 0;
}

ModContact::~ModContact() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.ModContact)
  SharedDtor();
}

void ModContact::SharedDtor() {
  _province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _chatroomowner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _chatroomdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _headimgmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _encryptusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _idcardnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mobilehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _mobilefullhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cardimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _labelidlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete _username_;
  }
  if (this != internal_default_instance()) {
    delete _nickname_;
  }
  if (this != internal_default_instance()) {
    delete _pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete _quanpin_;
  }
  if (this != internal_default_instance()) {
    delete _imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete _remark_;
  }
  if (this != internal_default_instance()) {
    delete _remarkpyinitial_;
  }
  if (this != internal_default_instance()) {
    delete _remarkquanpin_;
  }
  if (this != internal_default_instance()) {
    delete _domainlist_;
  }
  if (this != internal_default_instance()) {
    delete _snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete _customizedinfo_;
  }
  if (this != internal_default_instance()) {
    delete _additionalcontactlist_;
  }
  if (this != internal_default_instance()) {
    delete _newchatroomdata_;
  }
  if (this != internal_default_instance()) {
    delete _phonenumberlist_;
  }
}

void ModContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModContact::descriptor() {
  protobuf_ModContact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ModContact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModContact& ModContact::default_instance() {
  protobuf_ModContact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModContact* ModContact::New(::google::protobuf::Arena* arena) const {
  ModContact* n = new ModContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModContact::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.ModContact)
  _roominfolist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has__province()) {
      GOOGLE_DCHECK(!_province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_province_.UnsafeRawStringPointer())->clear();
    }
    if (has__city()) {
      GOOGLE_DCHECK(!_city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_city_.UnsafeRawStringPointer())->clear();
    }
    if (has__signature()) {
      GOOGLE_DCHECK(!_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_signature_.UnsafeRawStringPointer())->clear();
    }
    if (has__verifyinfo()) {
      GOOGLE_DCHECK(!_verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has__weibo()) {
      GOOGLE_DCHECK(!_weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has__verifycontent()) {
      GOOGLE_DCHECK(!_verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has__alias()) {
      GOOGLE_DCHECK(!_alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_alias_.UnsafeRawStringPointer())->clear();
    }
    if (has__chatroomowner()) {
      GOOGLE_DCHECK(!_chatroomowner_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_chatroomowner_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has__weibonickname()) {
      GOOGLE_DCHECK(!_weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_weibonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has__albumbgimgid()) {
      GOOGLE_DCHECK(!_albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has__country()) {
      GOOGLE_DCHECK(!_country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_country_.UnsafeRawStringPointer())->clear();
    }
    if (has__bigheadimgurl()) {
      GOOGLE_DCHECK(!_bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has__smallheadimgurl()) {
      GOOGLE_DCHECK(!_smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has__mybrandlist()) {
      GOOGLE_DCHECK(!_mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has__chatroomdata()) {
      GOOGLE_DCHECK(!_chatroomdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_chatroomdata_.UnsafeRawStringPointer())->clear();
    }
    if (has__headimgmd5()) {
      GOOGLE_DCHECK(!_headimgmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_headimgmd5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has__encryptusername()) {
      GOOGLE_DCHECK(!_encryptusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_encryptusername_.UnsafeRawStringPointer())->clear();
    }
    if (has__idcardnum()) {
      GOOGLE_DCHECK(!_idcardnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_idcardnum_.UnsafeRawStringPointer())->clear();
    }
    if (has__realname()) {
      GOOGLE_DCHECK(!_realname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_realname_.UnsafeRawStringPointer())->clear();
    }
    if (has__mobilehash()) {
      GOOGLE_DCHECK(!_mobilehash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_mobilehash_.UnsafeRawStringPointer())->clear();
    }
    if (has__mobilefullhash()) {
      GOOGLE_DCHECK(!_mobilefullhash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_mobilefullhash_.UnsafeRawStringPointer())->clear();
    }
    if (has__extinfo()) {
      GOOGLE_DCHECK(!_extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has__description()) {
      GOOGLE_DCHECK(!_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_description_.UnsafeRawStringPointer())->clear();
    }
    if (has__cardimgurl()) {
      GOOGLE_DCHECK(!_cardimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_cardimgurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has__labelidlist()) {
      GOOGLE_DCHECK(!_labelidlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_labelidlist_.UnsafeRawStringPointer())->clear();
    }
    if (has__username()) {
      GOOGLE_DCHECK(_username_ != NULL);
      _username_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__nickname()) {
      GOOGLE_DCHECK(_nickname_ != NULL);
      _nickname_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__pyinitial()) {
      GOOGLE_DCHECK(_pyinitial_ != NULL);
      _pyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__quanpin()) {
      GOOGLE_DCHECK(_quanpin_ != NULL);
      _quanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__imgbuf()) {
      GOOGLE_DCHECK(_imgbuf_ != NULL);
      _imgbuf_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has__remark()) {
      GOOGLE_DCHECK(_remark_ != NULL);
      _remark_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__remarkpyinitial()) {
      GOOGLE_DCHECK(_remarkpyinitial_ != NULL);
      _remarkpyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 127u) {
    if (has__remarkquanpin()) {
      GOOGLE_DCHECK(_remarkquanpin_ != NULL);
      _remarkquanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__domainlist()) {
      GOOGLE_DCHECK(_domainlist_ != NULL);
      _domainlist_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__snsuserinfo()) {
      GOOGLE_DCHECK(_snsuserinfo_ != NULL);
      _snsuserinfo_->::MMPro::micromsg::SnsUserInfo::Clear();
    }
    if (has__customizedinfo()) {
      GOOGLE_DCHECK(_customizedinfo_ != NULL);
      _customizedinfo_->::MMPro::micromsg::CustomizedInfo::Clear();
    }
    if (has__additionalcontactlist()) {
      GOOGLE_DCHECK(_additionalcontactlist_ != NULL);
      _additionalcontactlist_->::MMPro::micromsg::AdditionalContactList::Clear();
    }
    if (has__newchatroomdata()) {
      GOOGLE_DCHECK(_newchatroomdata_ != NULL);
      _newchatroomdata_->::MMPro::micromsg::ChatRoomMemberData::Clear();
    }
    if (has__phonenumberlist()) {
      GOOGLE_DCHECK(_phonenumberlist_ != NULL);
      _phonenumberlist_->::MMPro::micromsg::PhoneNumberList::Clear();
    }
  }
  _sex_ = 0;
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&_bitmask_, 0, reinterpret_cast<char*>(&_personalcard_) -
      reinterpret_cast<char*>(&_bitmask_) + sizeof(_personalcard_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&_hasweixinhdheadimg_, 0, reinterpret_cast<char*>(&_chatroomversion_) -
      reinterpret_cast<char*>(&_hasweixinhdheadimg_) + sizeof(_chatroomversion_));
  }
  if (_has_bits_[56 / 32] & 117440512u) {
    ::memset(&_chatroommaxcount_, 0, reinterpret_cast<char*>(&_deleteflag_) -
      reinterpret_cast<char*>(&_chatroommaxcount_) + sizeof(_deleteflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.ModContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 _Sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has__sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _BitMask = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has__bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _BitVal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has__bitval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_bitval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _ImgFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has__imgflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_imgflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__remarkpyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__remarkquanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ContactType = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has__contacttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_contacttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _RoomInfoCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has__roominfocount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_roominfocount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__roominfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__domainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ChatRoomNotify = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has__chatroomnotify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chatroomnotify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _AddContactScene = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has__addcontactscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_addcontactscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Province = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_province().data(), this->_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _City = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_city().data(), this->_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Signature = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_signature().data(), this->_signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _PersonalCard = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has__personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _HasWeiXinHdHeadImg = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has__hasweixinhdheadimg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hasweixinhdheadimg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _VerifyFlag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has__verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _VerifyInfo = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_verifyinfo().data(), this->_verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _Level = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has__level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _Source = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has__source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Weibo = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_weibo().data(), this->_weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _VerifyContent = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_verifycontent().data(), this->_verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Alias = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_alias().data(), this->_alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ChatRoomOwner = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__chatroomowner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_chatroomowner().data(), this->_chatroomowner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._ChatRoomOwner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _WeiboNickname = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_weibonickname().data(), this->_weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _WeiboFlag = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has__weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _AlbumStyle = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has__albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _AlbumFlag = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has__albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _AlbumBGImgID = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_albumbgimgid().data(), this->_albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Country = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_country().data(), this->_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _BigHeadImgUrl = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _SmallHeadImgUrl = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _MyBrandList = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_mybrandlist().data(), this->_mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__customizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ChatRoomData = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(346u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__chatroomdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_chatroomdata().data(), this->_chatroomdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._ChatRoomData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _HeadImgMd5 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(354u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__headimgmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_headimgmd5().data(), this->_headimgmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._HeadImgMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _EncryptUserName = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__encryptusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_encryptusername().data(), this->_encryptusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._EncryptUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _IDCardNum = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(370u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__idcardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_idcardnum().data(), this->_idcardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._IDCardNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _RealName = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_realname().data(), this->_realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._RealName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _MobileHash = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__mobilehash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_mobilehash().data(), this->_mobilehash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._MobileHash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _MobileFullHash = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(394u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__mobilefullhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_mobilefullhash().data(), this->_mobilefullhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._MobileFullHash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__additionalcontactlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ChatroomVersion = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has__chatroomversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chatroomversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _ExtInfo = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_extinfo().data(), this->_extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ChatroomMaxCount = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has__chatroommaxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chatroommaxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 _ChatroomType = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has__chatroomtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chatroomtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__newchatroomdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 _DeleteFlag = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has__deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _Description = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(474u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_description().data(), this->_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _CardImgUrl = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__cardimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_cardimgurl().data(), this->_cardimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._CardImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _LabelIDList = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(490u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__labelidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_labelidlist().data(), this->_labelidlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ModContact._LabelIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(498u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__phonenumberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.ModContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.ModContact)
  return false;
#undef DO_
}

void ModContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.ModContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->_username_, output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->_nickname_, output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->_pyinitial_, output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->_quanpin_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 _Sex = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->_sex(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->_imgbuf_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 _BitMask = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_bitmask(), output);
  }

  // required uint32 _BitVal = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_bitval(), output);
  }

  // required uint32 _ImgFlag = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_imgflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->_remark_, output);
  }

  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->_remarkpyinitial_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->_remarkquanpin_, output);
  }

  // optional uint32 _ContactType = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->_contacttype(), output);
  }

  // optional uint32 _RoomInfoCount = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->_roominfocount(), output);
  }

  // repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
  for (unsigned int i = 0, n = this->_roominfolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_roominfolist(i), output);
  }

  // optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->_domainlist_, output);
  }

  // optional uint32 _ChatRoomNotify = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->_chatroomnotify(), output);
  }

  // optional uint32 _AddContactScene = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->_addcontactscene(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Province = 19;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_province().data(), this->_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->_province(), output);
  }

  // optional string _City = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_city().data(), this->_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->_city(), output);
  }

  // optional string _Signature = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_signature().data(), this->_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->_signature(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _PersonalCard = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->_personalcard(), output);
  }

  // optional uint32 _HasWeiXinHdHeadImg = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->_hasweixinhdheadimg(), output);
  }

  // optional uint32 _VerifyFlag = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->_verifyflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _VerifyInfo = 25;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_verifyinfo().data(), this->_verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->_verifyinfo(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 _Level = 26;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->_level(), output);
  }

  // optional uint32 _Source = 27;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->_source(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Weibo = 28;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_weibo().data(), this->_weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->_weibo(), output);
  }

  // optional string _VerifyContent = 29;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_verifycontent().data(), this->_verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->_verifycontent(), output);
  }

  // optional string _Alias = 30;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_alias().data(), this->_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->_alias(), output);
  }

  // optional string _ChatRoomOwner = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_chatroomowner().data(), this->_chatroomowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ChatRoomOwner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->_chatroomowner(), output);
  }

  // optional string _WeiboNickname = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_weibonickname().data(), this->_weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->_weibonickname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _WeiboFlag = 33;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->_weiboflag(), output);
  }

  // optional int32 _AlbumStyle = 34;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->_albumstyle(), output);
  }

  // optional int32 _AlbumFlag = 35;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->_albumflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _AlbumBGImgID = 36;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_albumbgimgid().data(), this->_albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->_albumbgimgid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->_snsuserinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_country().data(), this->_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->_country(), output);
  }

  // optional string _BigHeadImgUrl = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->_bigheadimgurl(), output);
  }

  // optional string _SmallHeadImgUrl = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->_smallheadimgurl(), output);
  }

  // optional string _MyBrandList = 41;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mybrandlist().data(), this->_mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->_mybrandlist(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->_customizedinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _ChatRoomData = 43;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_chatroomdata().data(), this->_chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ChatRoomData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->_chatroomdata(), output);
  }

  // optional string _HeadImgMd5 = 44;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_headimgmd5().data(), this->_headimgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._HeadImgMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->_headimgmd5(), output);
  }

  // optional string _EncryptUserName = 45;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_encryptusername().data(), this->_encryptusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._EncryptUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->_encryptusername(), output);
  }

  // optional string _IDCardNum = 46;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_idcardnum().data(), this->_idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._IDCardNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->_idcardnum(), output);
  }

  // optional string _RealName = 47;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_realname().data(), this->_realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._RealName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->_realname(), output);
  }

  // optional string _MobileHash = 48;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mobilehash().data(), this->_mobilehash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MobileHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->_mobilehash(), output);
  }

  // optional string _MobileFullHash = 49;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mobilefullhash().data(), this->_mobilefullhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MobileFullHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->_mobilefullhash(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->_additionalcontactlist_, output);
  }

  // optional uint32 _ChatroomVersion = 53;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->_chatroomversion(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _ExtInfo = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_extinfo().data(), this->_extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->_extinfo(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _ChatroomMaxCount = 55;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->_chatroommaxcount(), output);
  }

  // optional uint32 _ChatroomType = 56;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->_chatroomtype(), output);
  }

  // optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->_newchatroomdata_, output);
  }

  // optional int32 _DeleteFlag = 58;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->_deleteflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Description = 59;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_description().data(), this->_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->_description(), output);
  }

  // optional string _CardImgUrl = 60;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_cardimgurl().data(), this->_cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._CardImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->_cardimgurl(), output);
  }

  // optional string _LabelIDList = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_labelidlist().data(), this->_labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._LabelIDList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      61, this->_labelidlist(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->_phonenumberlist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.ModContact)
}

::google::protobuf::uint8* ModContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.ModContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->_username_, deterministic, target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->_nickname_, deterministic, target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->_pyinitial_, deterministic, target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->_quanpin_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 _Sex = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->_sex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->_imgbuf_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 _BitMask = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_bitmask(), target);
  }

  // required uint32 _BitVal = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_bitval(), target);
  }

  // required uint32 _ImgFlag = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_imgflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->_remark_, deterministic, target);
  }

  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->_remarkpyinitial_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->_remarkquanpin_, deterministic, target);
  }

  // optional uint32 _ContactType = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->_contacttype(), target);
  }

  // optional uint32 _RoomInfoCount = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->_roominfocount(), target);
  }

  // repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
  for (unsigned int i = 0, n = this->_roominfolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->_roominfolist(i), deterministic, target);
  }

  // optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->_domainlist_, deterministic, target);
  }

  // optional uint32 _ChatRoomNotify = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->_chatroomnotify(), target);
  }

  // optional uint32 _AddContactScene = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->_addcontactscene(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Province = 19;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_province().data(), this->_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->_province(), target);
  }

  // optional string _City = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_city().data(), this->_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->_city(), target);
  }

  // optional string _Signature = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_signature().data(), this->_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->_signature(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _PersonalCard = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->_personalcard(), target);
  }

  // optional uint32 _HasWeiXinHdHeadImg = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->_hasweixinhdheadimg(), target);
  }

  // optional uint32 _VerifyFlag = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->_verifyflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _VerifyInfo = 25;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_verifyinfo().data(), this->_verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->_verifyinfo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 _Level = 26;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->_level(), target);
  }

  // optional uint32 _Source = 27;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->_source(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Weibo = 28;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_weibo().data(), this->_weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->_weibo(), target);
  }

  // optional string _VerifyContent = 29;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_verifycontent().data(), this->_verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->_verifycontent(), target);
  }

  // optional string _Alias = 30;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_alias().data(), this->_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->_alias(), target);
  }

  // optional string _ChatRoomOwner = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_chatroomowner().data(), this->_chatroomowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ChatRoomOwner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->_chatroomowner(), target);
  }

  // optional string _WeiboNickname = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_weibonickname().data(), this->_weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->_weibonickname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _WeiboFlag = 33;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->_weiboflag(), target);
  }

  // optional int32 _AlbumStyle = 34;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->_albumstyle(), target);
  }

  // optional int32 _AlbumFlag = 35;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->_albumflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _AlbumBGImgID = 36;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_albumbgimgid().data(), this->_albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->_albumbgimgid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->_snsuserinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_country().data(), this->_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->_country(), target);
  }

  // optional string _BigHeadImgUrl = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->_bigheadimgurl(), target);
  }

  // optional string _SmallHeadImgUrl = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->_smallheadimgurl(), target);
  }

  // optional string _MyBrandList = 41;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mybrandlist().data(), this->_mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->_mybrandlist(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->_customizedinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _ChatRoomData = 43;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_chatroomdata().data(), this->_chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ChatRoomData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->_chatroomdata(), target);
  }

  // optional string _HeadImgMd5 = 44;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_headimgmd5().data(), this->_headimgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._HeadImgMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->_headimgmd5(), target);
  }

  // optional string _EncryptUserName = 45;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_encryptusername().data(), this->_encryptusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._EncryptUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->_encryptusername(), target);
  }

  // optional string _IDCardNum = 46;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_idcardnum().data(), this->_idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._IDCardNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->_idcardnum(), target);
  }

  // optional string _RealName = 47;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_realname().data(), this->_realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._RealName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->_realname(), target);
  }

  // optional string _MobileHash = 48;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mobilehash().data(), this->_mobilehash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MobileHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->_mobilehash(), target);
  }

  // optional string _MobileFullHash = 49;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_mobilefullhash().data(), this->_mobilefullhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._MobileFullHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->_mobilefullhash(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->_additionalcontactlist_, deterministic, target);
  }

  // optional uint32 _ChatroomVersion = 53;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->_chatroomversion(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _ExtInfo = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_extinfo().data(), this->_extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->_extinfo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 _ChatroomMaxCount = 55;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->_chatroommaxcount(), target);
  }

  // optional uint32 _ChatroomType = 56;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->_chatroomtype(), target);
  }

  // optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->_newchatroomdata_, deterministic, target);
  }

  // optional int32 _DeleteFlag = 58;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->_deleteflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string _Description = 59;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_description().data(), this->_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->_description(), target);
  }

  // optional string _CardImgUrl = 60;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_cardimgurl().data(), this->_cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._CardImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->_cardimgurl(), target);
  }

  // optional string _LabelIDList = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_labelidlist().data(), this->_labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ModContact._LabelIDList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        61, this->_labelidlist(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *this->_phonenumberlist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.ModContact)
  return target;
}

size_t ModContact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMPro.micromsg.ModContact)
  size_t total_size = 0;

  if (has__username()) {
    // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_username_);
  }

  if (has__nickname()) {
    // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_nickname_);
  }

  if (has__pyinitial()) {
    // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_pyinitial_);
  }

  if (has__quanpin()) {
    // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_quanpin_);
  }

  if (has__imgbuf()) {
    // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_imgbuf_);
  }

  if (has__sex()) {
    // required int32 _Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_sex());
  }

  if (has__bitmask()) {
    // required uint32 _BitMask = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_bitmask());
  }

  if (has__bitval()) {
    // required uint32 _BitVal = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_bitval());
  }

  if (has__imgflag()) {
    // required uint32 _ImgFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_imgflag());
  }

  return total_size;
}
size_t ModContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.ModContact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if ((((_has_bits_[0] & 0x3e000000) ^ 0x3e000000)
         | ((_has_bits_[1] & 0x00000780) ^ 0x00000780)) == 0) {  // All required fields are present.
    // required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_username_);

    // required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_nickname_);

    // required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_pyinitial_);

    // required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_quanpin_);

    // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_imgbuf_);

    // required int32 _Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_sex());

    // required uint32 _BitMask = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_bitmask());

    // required uint32 _BitVal = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_bitval());

    // required uint32 _ImgFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_imgflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
  {
    unsigned int count = this->_roominfolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_roominfolist(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string _Province = 19;
    if (has__province()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_province());
    }

    // optional string _City = 20;
    if (has__city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_city());
    }

    // optional string _Signature = 21;
    if (has__signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_signature());
    }

    // optional string _VerifyInfo = 25;
    if (has__verifyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_verifyinfo());
    }

    // optional string _Weibo = 28;
    if (has__weibo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_weibo());
    }

    // optional string _VerifyContent = 29;
    if (has__verifycontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_verifycontent());
    }

    // optional string _Alias = 30;
    if (has__alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_alias());
    }

    // optional string _ChatRoomOwner = 31;
    if (has__chatroomowner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_chatroomowner());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string _WeiboNickname = 32;
    if (has__weibonickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_weibonickname());
    }

    // optional string _AlbumBGImgID = 36;
    if (has__albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_albumbgimgid());
    }

    // optional string _Country = 38;
    if (has__country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_country());
    }

    // optional string _BigHeadImgUrl = 39;
    if (has__bigheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_bigheadimgurl());
    }

    // optional string _SmallHeadImgUrl = 40;
    if (has__smallheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_smallheadimgurl());
    }

    // optional string _MyBrandList = 41;
    if (has__mybrandlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_mybrandlist());
    }

    // optional string _ChatRoomData = 43;
    if (has__chatroomdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_chatroomdata());
    }

    // optional string _HeadImgMd5 = 44;
    if (has__headimgmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_headimgmd5());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string _EncryptUserName = 45;
    if (has__encryptusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_encryptusername());
    }

    // optional string _IDCardNum = 46;
    if (has__idcardnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_idcardnum());
    }

    // optional string _RealName = 47;
    if (has__realname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_realname());
    }

    // optional string _MobileHash = 48;
    if (has__mobilehash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_mobilehash());
    }

    // optional string _MobileFullHash = 49;
    if (has__mobilefullhash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_mobilefullhash());
    }

    // optional string _ExtInfo = 54;
    if (has__extinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_extinfo());
    }

    // optional string _Description = 59;
    if (has__description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_description());
    }

    // optional string _CardImgUrl = 60;
    if (has__cardimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_cardimgurl());
    }

  }
  // optional string _LabelIDList = 61;
  if (has__labelidlist()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->_labelidlist());
  }

  if (_has_bits_[24 / 32] & 3221225472u) {
    // optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
    if (has__remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_remark_);
    }

    // optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
    if (has__remarkpyinitial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_remarkpyinitial_);
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
    if (has__remarkquanpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_remarkquanpin_);
    }

    // optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
    if (has__domainlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_domainlist_);
    }

    // optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
    if (has__snsuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_snsuserinfo_);
    }

    // optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
    if (has__customizedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_customizedinfo_);
    }

    // optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
    if (has__additionalcontactlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_additionalcontactlist_);
    }

    // optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
    if (has__newchatroomdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_newchatroomdata_);
    }

    // optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
    if (has__phonenumberlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->_phonenumberlist_);
    }

  }
  if (_has_bits_[40 / 32] & 63488u) {
    // optional uint32 _ContactType = 13;
    if (has__contacttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_contacttype());
    }

    // optional uint32 _RoomInfoCount = 14;
    if (has__roominfocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_roominfocount());
    }

    // optional uint32 _ChatRoomNotify = 17;
    if (has__chatroomnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chatroomnotify());
    }

    // optional uint32 _AddContactScene = 18;
    if (has__addcontactscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_addcontactscene());
    }

    // optional uint32 _PersonalCard = 22;
    if (has__personalcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_personalcard());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 _HasWeiXinHdHeadImg = 23;
    if (has__hasweixinhdheadimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hasweixinhdheadimg());
    }

    // optional uint32 _VerifyFlag = 24;
    if (has__verifyflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_verifyflag());
    }

    // optional int32 _Level = 26;
    if (has__level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_level());
    }

    // optional uint32 _Source = 27;
    if (has__source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_source());
    }

    // optional uint32 _WeiboFlag = 33;
    if (has__weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_weiboflag());
    }

    // optional int32 _AlbumStyle = 34;
    if (has__albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_albumstyle());
    }

    // optional int32 _AlbumFlag = 35;
    if (has__albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_albumflag());
    }

    // optional uint32 _ChatroomVersion = 53;
    if (has__chatroomversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chatroomversion());
    }

  }
  if (_has_bits_[56 / 32] & 117440512u) {
    // optional uint32 _ChatroomMaxCount = 55;
    if (has__chatroommaxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chatroommaxcount());
    }

    // optional uint32 _ChatroomType = 56;
    if (has__chatroomtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chatroomtype());
    }

    // optional int32 _DeleteFlag = 58;
    if (has__deleteflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_deleteflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.ModContact)
  GOOGLE_DCHECK_NE(&from, this);
  const ModContact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.ModContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.ModContact)
    MergeFrom(*source);
  }
}

void ModContact::MergeFrom(const ModContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.ModContact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _roominfolist_.MergeFrom(from._roominfolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__province();
      _province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__city();
      _city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has__signature();
      _signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has__verifyinfo();
      _verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has__weibo();
      _weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._weibo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has__verifycontent();
      _verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._verifycontent_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has__alias();
      _alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._alias_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has__chatroomowner();
      _chatroomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._chatroomowner_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has__weibonickname();
      _weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._weibonickname_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has__albumbgimgid();
      _albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._albumbgimgid_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has__country();
      _country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._country_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has__bigheadimgurl();
      _bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bigheadimgurl_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has__smallheadimgurl();
      _smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._smallheadimgurl_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has__mybrandlist();
      _mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mybrandlist_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has__chatroomdata();
      _chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._chatroomdata_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has__headimgmd5();
      _headimgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._headimgmd5_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has__encryptusername();
      _encryptusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._encryptusername_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has__idcardnum();
      _idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._idcardnum_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has__realname();
      _realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._realname_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has__mobilehash();
      _mobilehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mobilehash_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has__mobilefullhash();
      _mobilefullhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._mobilefullhash_);
    }
    if (cached_has_bits & 0x00200000u) {
      set_has__extinfo();
      _extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._extinfo_);
    }
    if (cached_has_bits & 0x00400000u) {
      set_has__description();
      _description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._description_);
    }
    if (cached_has_bits & 0x00800000u) {
      set_has__cardimgurl();
      _cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._cardimgurl_);
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      set_has__labelidlist();
      _labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._labelidlist_);
    }
    if (cached_has_bits & 0x02000000u) {
      mutable__username()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._username());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable__nickname()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._nickname());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable__pyinitial()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._pyinitial());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable__quanpin()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._quanpin());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable__imgbuf()->::MMPro::micromsg::SKBuiltinBuffer_t::MergeFrom(from._imgbuf());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable__remark()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._remark());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable__remarkpyinitial()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._remarkpyinitial());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable__remarkquanpin()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._remarkquanpin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable__domainlist()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._domainlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable__snsuserinfo()->::MMPro::micromsg::SnsUserInfo::MergeFrom(from._snsuserinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable__customizedinfo()->::MMPro::micromsg::CustomizedInfo::MergeFrom(from._customizedinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable__additionalcontactlist()->::MMPro::micromsg::AdditionalContactList::MergeFrom(from._additionalcontactlist());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable__newchatroomdata()->::MMPro::micromsg::ChatRoomMemberData::MergeFrom(from._newchatroomdata());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable__phonenumberlist()->::MMPro::micromsg::PhoneNumberList::MergeFrom(from._phonenumberlist());
    }
    if (cached_has_bits & 0x00000080u) {
      _sex_ = from._sex_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      _bitmask_ = from._bitmask_;
    }
    if (cached_has_bits & 0x00000200u) {
      _bitval_ = from._bitval_;
    }
    if (cached_has_bits & 0x00000400u) {
      _imgflag_ = from._imgflag_;
    }
    if (cached_has_bits & 0x00000800u) {
      _contacttype_ = from._contacttype_;
    }
    if (cached_has_bits & 0x00001000u) {
      _roominfocount_ = from._roominfocount_;
    }
    if (cached_has_bits & 0x00002000u) {
      _chatroomnotify_ = from._chatroomnotify_;
    }
    if (cached_has_bits & 0x00004000u) {
      _addcontactscene_ = from._addcontactscene_;
    }
    if (cached_has_bits & 0x00008000u) {
      _personalcard_ = from._personalcard_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      _hasweixinhdheadimg_ = from._hasweixinhdheadimg_;
    }
    if (cached_has_bits & 0x00020000u) {
      _verifyflag_ = from._verifyflag_;
    }
    if (cached_has_bits & 0x00040000u) {
      _level_ = from._level_;
    }
    if (cached_has_bits & 0x00080000u) {
      _source_ = from._source_;
    }
    if (cached_has_bits & 0x00100000u) {
      _weiboflag_ = from._weiboflag_;
    }
    if (cached_has_bits & 0x00200000u) {
      _albumstyle_ = from._albumstyle_;
    }
    if (cached_has_bits & 0x00400000u) {
      _albumflag_ = from._albumflag_;
    }
    if (cached_has_bits & 0x00800000u) {
      _chatroomversion_ = from._chatroomversion_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      _chatroommaxcount_ = from._chatroommaxcount_;
    }
    if (cached_has_bits & 0x02000000u) {
      _chatroomtype_ = from._chatroomtype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _deleteflag_ = from._deleteflag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ModContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.ModContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModContact::CopyFrom(const ModContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.ModContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x3e000000) != 0x3e000000) return false;
  if ((_has_bits_[1] & 0x00000780) != 0x00000780) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_roominfolist())) return false;
  if (has__imgbuf()) {
    if (!this->_imgbuf_->IsInitialized()) return false;
  }
  if (has__snsuserinfo()) {
    if (!this->_snsuserinfo_->IsInitialized()) return false;
  }
  if (has__customizedinfo()) {
    if (!this->_customizedinfo_->IsInitialized()) return false;
  }
  if (has__newchatroomdata()) {
    if (!this->_newchatroomdata_->IsInitialized()) return false;
  }
  if (has__phonenumberlist()) {
    if (!this->_phonenumberlist_->IsInitialized()) return false;
  }
  return true;
}

void ModContact::Swap(ModContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModContact::InternalSwap(ModContact* other) {
  _roominfolist_.InternalSwap(&other->_roominfolist_);
  _province_.Swap(&other->_province_);
  _city_.Swap(&other->_city_);
  _signature_.Swap(&other->_signature_);
  _verifyinfo_.Swap(&other->_verifyinfo_);
  _weibo_.Swap(&other->_weibo_);
  _verifycontent_.Swap(&other->_verifycontent_);
  _alias_.Swap(&other->_alias_);
  _chatroomowner_.Swap(&other->_chatroomowner_);
  _weibonickname_.Swap(&other->_weibonickname_);
  _albumbgimgid_.Swap(&other->_albumbgimgid_);
  _country_.Swap(&other->_country_);
  _bigheadimgurl_.Swap(&other->_bigheadimgurl_);
  _smallheadimgurl_.Swap(&other->_smallheadimgurl_);
  _mybrandlist_.Swap(&other->_mybrandlist_);
  _chatroomdata_.Swap(&other->_chatroomdata_);
  _headimgmd5_.Swap(&other->_headimgmd5_);
  _encryptusername_.Swap(&other->_encryptusername_);
  _idcardnum_.Swap(&other->_idcardnum_);
  _realname_.Swap(&other->_realname_);
  _mobilehash_.Swap(&other->_mobilehash_);
  _mobilefullhash_.Swap(&other->_mobilefullhash_);
  _extinfo_.Swap(&other->_extinfo_);
  _description_.Swap(&other->_description_);
  _cardimgurl_.Swap(&other->_cardimgurl_);
  _labelidlist_.Swap(&other->_labelidlist_);
  std::swap(_username_, other->_username_);
  std::swap(_nickname_, other->_nickname_);
  std::swap(_pyinitial_, other->_pyinitial_);
  std::swap(_quanpin_, other->_quanpin_);
  std::swap(_imgbuf_, other->_imgbuf_);
  std::swap(_remark_, other->_remark_);
  std::swap(_remarkpyinitial_, other->_remarkpyinitial_);
  std::swap(_remarkquanpin_, other->_remarkquanpin_);
  std::swap(_domainlist_, other->_domainlist_);
  std::swap(_snsuserinfo_, other->_snsuserinfo_);
  std::swap(_customizedinfo_, other->_customizedinfo_);
  std::swap(_additionalcontactlist_, other->_additionalcontactlist_);
  std::swap(_newchatroomdata_, other->_newchatroomdata_);
  std::swap(_phonenumberlist_, other->_phonenumberlist_);
  std::swap(_sex_, other->_sex_);
  std::swap(_bitmask_, other->_bitmask_);
  std::swap(_bitval_, other->_bitval_);
  std::swap(_imgflag_, other->_imgflag_);
  std::swap(_contacttype_, other->_contacttype_);
  std::swap(_roominfocount_, other->_roominfocount_);
  std::swap(_chatroomnotify_, other->_chatroomnotify_);
  std::swap(_addcontactscene_, other->_addcontactscene_);
  std::swap(_personalcard_, other->_personalcard_);
  std::swap(_hasweixinhdheadimg_, other->_hasweixinhdheadimg_);
  std::swap(_verifyflag_, other->_verifyflag_);
  std::swap(_level_, other->_level_);
  std::swap(_source_, other->_source_);
  std::swap(_weiboflag_, other->_weiboflag_);
  std::swap(_albumstyle_, other->_albumstyle_);
  std::swap(_albumflag_, other->_albumflag_);
  std::swap(_chatroomversion_, other->_chatroomversion_);
  std::swap(_chatroommaxcount_, other->_chatroommaxcount_);
  std::swap(_chatroomtype_, other->_chatroomtype_);
  std::swap(_deleteflag_, other->_deleteflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModContact::GetMetadata() const {
  protobuf_ModContact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ModContact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModContact

// required .MMPro.micromsg.SKBuiltinString_t _UserName = 1;
bool ModContact::has__username() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModContact::set_has__username() {
  _has_bits_[0] |= 0x02000000u;
}
void ModContact::clear_has__username() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModContact::clear__username() {
  if (_username_ != NULL) _username_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__username();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._UserName)
  return _username_ != NULL ? *_username_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__username() {
  set_has__username();
  if (_username_ == NULL) {
    _username_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._UserName)
  return _username_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._UserName)
  clear_has__username();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _username_;
  _username_ = NULL;
  return temp;
}
void ModContact::set_allocated__username(::MMPro::micromsg::SKBuiltinString_t* _username) {
  delete _username_;
  _username_ = _username;
  if (_username) {
    set_has__username();
  } else {
    clear_has__username();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._UserName)
}

// required .MMPro.micromsg.SKBuiltinString_t _NickName = 2;
bool ModContact::has__nickname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ModContact::set_has__nickname() {
  _has_bits_[0] |= 0x04000000u;
}
void ModContact::clear_has__nickname() {
  _has_bits_[0] &= ~0x04000000u;
}
void ModContact::clear__nickname() {
  if (_nickname_ != NULL) _nickname_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__nickname();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_nickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._NickName)
  return _nickname_ != NULL ? *_nickname_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__nickname() {
  set_has__nickname();
  if (_nickname_ == NULL) {
    _nickname_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._NickName)
  return _nickname_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__nickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._NickName)
  clear_has__nickname();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _nickname_;
  _nickname_ = NULL;
  return temp;
}
void ModContact::set_allocated__nickname(::MMPro::micromsg::SKBuiltinString_t* _nickname) {
  delete _nickname_;
  _nickname_ = _nickname;
  if (_nickname) {
    set_has__nickname();
  } else {
    clear_has__nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._NickName)
}

// required .MMPro.micromsg.SKBuiltinString_t _PYInitial = 3;
bool ModContact::has__pyinitial() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ModContact::set_has__pyinitial() {
  _has_bits_[0] |= 0x08000000u;
}
void ModContact::clear_has__pyinitial() {
  _has_bits_[0] &= ~0x08000000u;
}
void ModContact::clear__pyinitial() {
  if (_pyinitial_ != NULL) _pyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__pyinitial();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_pyinitial() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PYInitial)
  return _pyinitial_ != NULL ? *_pyinitial_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__pyinitial() {
  set_has__pyinitial();
  if (_pyinitial_ == NULL) {
    _pyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._PYInitial)
  return _pyinitial_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__pyinitial() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._PYInitial)
  clear_has__pyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _pyinitial_;
  _pyinitial_ = NULL;
  return temp;
}
void ModContact::set_allocated__pyinitial(::MMPro::micromsg::SKBuiltinString_t* _pyinitial) {
  delete _pyinitial_;
  _pyinitial_ = _pyinitial;
  if (_pyinitial) {
    set_has__pyinitial();
  } else {
    clear_has__pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._PYInitial)
}

// required .MMPro.micromsg.SKBuiltinString_t _QuanPin = 4;
bool ModContact::has__quanpin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void ModContact::set_has__quanpin() {
  _has_bits_[0] |= 0x10000000u;
}
void ModContact::clear_has__quanpin() {
  _has_bits_[0] &= ~0x10000000u;
}
void ModContact::clear__quanpin() {
  if (_quanpin_ != NULL) _quanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__quanpin();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_quanpin() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._QuanPin)
  return _quanpin_ != NULL ? *_quanpin_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__quanpin() {
  set_has__quanpin();
  if (_quanpin_ == NULL) {
    _quanpin_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._QuanPin)
  return _quanpin_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__quanpin() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._QuanPin)
  clear_has__quanpin();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _quanpin_;
  _quanpin_ = NULL;
  return temp;
}
void ModContact::set_allocated__quanpin(::MMPro::micromsg::SKBuiltinString_t* _quanpin) {
  delete _quanpin_;
  _quanpin_ = _quanpin;
  if (_quanpin) {
    set_has__quanpin();
  } else {
    clear_has__quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._QuanPin)
}

// required int32 _Sex = 5;
bool ModContact::has__sex() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void ModContact::set_has__sex() {
  _has_bits_[1] |= 0x00000080u;
}
void ModContact::clear_has__sex() {
  _has_bits_[1] &= ~0x00000080u;
}
void ModContact::clear__sex() {
  _sex_ = 0;
  clear_has__sex();
}
::google::protobuf::int32 ModContact::_sex() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Sex)
  return _sex_;
}
void ModContact::set__sex(::google::protobuf::int32 value) {
  set_has__sex();
  _sex_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Sex)
}

// required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 6;
bool ModContact::has__imgbuf() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void ModContact::set_has__imgbuf() {
  _has_bits_[0] |= 0x20000000u;
}
void ModContact::clear_has__imgbuf() {
  _has_bits_[0] &= ~0x20000000u;
}
void ModContact::clear__imgbuf() {
  if (_imgbuf_ != NULL) _imgbuf_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has__imgbuf();
}
const ::MMPro::micromsg::SKBuiltinBuffer_t& ModContact::_imgbuf() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ImgBuf)
  return _imgbuf_ != NULL ? *_imgbuf_
                         : *::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinBuffer_t* ModContact::mutable__imgbuf() {
  set_has__imgbuf();
  if (_imgbuf_ == NULL) {
    _imgbuf_ = new ::MMPro::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ImgBuf)
  return _imgbuf_;
}
::MMPro::micromsg::SKBuiltinBuffer_t* ModContact::release__imgbuf() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ImgBuf)
  clear_has__imgbuf();
  ::MMPro::micromsg::SKBuiltinBuffer_t* temp = _imgbuf_;
  _imgbuf_ = NULL;
  return temp;
}
void ModContact::set_allocated__imgbuf(::MMPro::micromsg::SKBuiltinBuffer_t* _imgbuf) {
  delete _imgbuf_;
  _imgbuf_ = _imgbuf;
  if (_imgbuf) {
    set_has__imgbuf();
  } else {
    clear_has__imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ImgBuf)
}

// required uint32 _BitMask = 7;
bool ModContact::has__bitmask() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void ModContact::set_has__bitmask() {
  _has_bits_[1] |= 0x00000100u;
}
void ModContact::clear_has__bitmask() {
  _has_bits_[1] &= ~0x00000100u;
}
void ModContact::clear__bitmask() {
  _bitmask_ = 0u;
  clear_has__bitmask();
}
::google::protobuf::uint32 ModContact::_bitmask() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BitMask)
  return _bitmask_;
}
void ModContact::set__bitmask(::google::protobuf::uint32 value) {
  set_has__bitmask();
  _bitmask_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BitMask)
}

// required uint32 _BitVal = 8;
bool ModContact::has__bitval() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void ModContact::set_has__bitval() {
  _has_bits_[1] |= 0x00000200u;
}
void ModContact::clear_has__bitval() {
  _has_bits_[1] &= ~0x00000200u;
}
void ModContact::clear__bitval() {
  _bitval_ = 0u;
  clear_has__bitval();
}
::google::protobuf::uint32 ModContact::_bitval() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BitVal)
  return _bitval_;
}
void ModContact::set__bitval(::google::protobuf::uint32 value) {
  set_has__bitval();
  _bitval_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BitVal)
}

// required uint32 _ImgFlag = 9;
bool ModContact::has__imgflag() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void ModContact::set_has__imgflag() {
  _has_bits_[1] |= 0x00000400u;
}
void ModContact::clear_has__imgflag() {
  _has_bits_[1] &= ~0x00000400u;
}
void ModContact::clear__imgflag() {
  _imgflag_ = 0u;
  clear_has__imgflag();
}
::google::protobuf::uint32 ModContact::_imgflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ImgFlag)
  return _imgflag_;
}
void ModContact::set__imgflag(::google::protobuf::uint32 value) {
  set_has__imgflag();
  _imgflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ImgFlag)
}

// optional .MMPro.micromsg.SKBuiltinString_t _Remark = 10;
bool ModContact::has__remark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void ModContact::set_has__remark() {
  _has_bits_[0] |= 0x40000000u;
}
void ModContact::clear_has__remark() {
  _has_bits_[0] &= ~0x40000000u;
}
void ModContact::clear__remark() {
  if (_remark_ != NULL) _remark_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remark();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remark() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Remark)
  return _remark_ != NULL ? *_remark_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remark() {
  set_has__remark();
  if (_remark_ == NULL) {
    _remark_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Remark)
  return _remark_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remark() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Remark)
  clear_has__remark();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remark_;
  _remark_ = NULL;
  return temp;
}
void ModContact::set_allocated__remark(::MMPro::micromsg::SKBuiltinString_t* _remark) {
  delete _remark_;
  _remark_ = _remark;
  if (_remark) {
    set_has__remark();
  } else {
    clear_has__remark();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Remark)
}

// optional .MMPro.micromsg.SKBuiltinString_t _RemarkPYInitial = 11;
bool ModContact::has__remarkpyinitial() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void ModContact::set_has__remarkpyinitial() {
  _has_bits_[0] |= 0x80000000u;
}
void ModContact::clear_has__remarkpyinitial() {
  _has_bits_[0] &= ~0x80000000u;
}
void ModContact::clear__remarkpyinitial() {
  if (_remarkpyinitial_ != NULL) _remarkpyinitial_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remarkpyinitial();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RemarkPYInitial)
  return _remarkpyinitial_ != NULL ? *_remarkpyinitial_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remarkpyinitial() {
  set_has__remarkpyinitial();
  if (_remarkpyinitial_ == NULL) {
    _remarkpyinitial_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RemarkPYInitial)
  return _remarkpyinitial_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remarkpyinitial() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RemarkPYInitial)
  clear_has__remarkpyinitial();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remarkpyinitial_;
  _remarkpyinitial_ = NULL;
  return temp;
}
void ModContact::set_allocated__remarkpyinitial(::MMPro::micromsg::SKBuiltinString_t* _remarkpyinitial) {
  delete _remarkpyinitial_;
  _remarkpyinitial_ = _remarkpyinitial;
  if (_remarkpyinitial) {
    set_has__remarkpyinitial();
  } else {
    clear_has__remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RemarkPYInitial)
}

// optional .MMPro.micromsg.SKBuiltinString_t _RemarkQuanPin = 12;
bool ModContact::has__remarkquanpin() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void ModContact::set_has__remarkquanpin() {
  _has_bits_[1] |= 0x00000001u;
}
void ModContact::clear_has__remarkquanpin() {
  _has_bits_[1] &= ~0x00000001u;
}
void ModContact::clear__remarkquanpin() {
  if (_remarkquanpin_ != NULL) _remarkquanpin_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__remarkquanpin();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_remarkquanpin() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RemarkQuanPin)
  return _remarkquanpin_ != NULL ? *_remarkquanpin_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__remarkquanpin() {
  set_has__remarkquanpin();
  if (_remarkquanpin_ == NULL) {
    _remarkquanpin_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RemarkQuanPin)
  return _remarkquanpin_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__remarkquanpin() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RemarkQuanPin)
  clear_has__remarkquanpin();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _remarkquanpin_;
  _remarkquanpin_ = NULL;
  return temp;
}
void ModContact::set_allocated__remarkquanpin(::MMPro::micromsg::SKBuiltinString_t* _remarkquanpin) {
  delete _remarkquanpin_;
  _remarkquanpin_ = _remarkquanpin;
  if (_remarkquanpin) {
    set_has__remarkquanpin();
  } else {
    clear_has__remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RemarkQuanPin)
}

// optional uint32 _ContactType = 13;
bool ModContact::has__contacttype() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void ModContact::set_has__contacttype() {
  _has_bits_[1] |= 0x00000800u;
}
void ModContact::clear_has__contacttype() {
  _has_bits_[1] &= ~0x00000800u;
}
void ModContact::clear__contacttype() {
  _contacttype_ = 0u;
  clear_has__contacttype();
}
::google::protobuf::uint32 ModContact::_contacttype() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ContactType)
  return _contacttype_;
}
void ModContact::set__contacttype(::google::protobuf::uint32 value) {
  set_has__contacttype();
  _contacttype_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ContactType)
}

// optional uint32 _RoomInfoCount = 14;
bool ModContact::has__roominfocount() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void ModContact::set_has__roominfocount() {
  _has_bits_[1] |= 0x00001000u;
}
void ModContact::clear_has__roominfocount() {
  _has_bits_[1] &= ~0x00001000u;
}
void ModContact::clear__roominfocount() {
  _roominfocount_ = 0u;
  clear_has__roominfocount();
}
::google::protobuf::uint32 ModContact::_roominfocount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RoomInfoCount)
  return _roominfocount_;
}
void ModContact::set__roominfocount(::google::protobuf::uint32 value) {
  set_has__roominfocount();
  _roominfocount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._RoomInfoCount)
}

// repeated .MMPro.micromsg.RoomInfo _RoomInfoList = 15;
int ModContact::_roominfolist_size() const {
  return _roominfolist_.size();
}
void ModContact::clear__roominfolist() {
  _roominfolist_.Clear();
}
const ::MMPro::micromsg::RoomInfo& ModContact::_roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Get(index);
}
::MMPro::micromsg::RoomInfo* ModContact::mutable__roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Mutable(index);
}
::MMPro::micromsg::RoomInfo* ModContact::add__roominfolist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >*
ModContact::mutable__roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.ModContact._RoomInfoList)
  return &_roominfolist_;
}
const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::RoomInfo >&
ModContact::_roominfolist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.ModContact._RoomInfoList)
  return _roominfolist_;
}

// optional .MMPro.micromsg.SKBuiltinString_t _DomainList = 16;
bool ModContact::has__domainlist() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void ModContact::set_has__domainlist() {
  _has_bits_[1] |= 0x00000002u;
}
void ModContact::clear_has__domainlist() {
  _has_bits_[1] &= ~0x00000002u;
}
void ModContact::clear__domainlist() {
  if (_domainlist_ != NULL) _domainlist_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__domainlist();
}
const ::MMPro::micromsg::SKBuiltinString_t& ModContact::_domainlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._DomainList)
  return _domainlist_ != NULL ? *_domainlist_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::mutable__domainlist() {
  set_has__domainlist();
  if (_domainlist_ == NULL) {
    _domainlist_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._DomainList)
  return _domainlist_;
}
::MMPro::micromsg::SKBuiltinString_t* ModContact::release__domainlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._DomainList)
  clear_has__domainlist();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _domainlist_;
  _domainlist_ = NULL;
  return temp;
}
void ModContact::set_allocated__domainlist(::MMPro::micromsg::SKBuiltinString_t* _domainlist) {
  delete _domainlist_;
  _domainlist_ = _domainlist;
  if (_domainlist) {
    set_has__domainlist();
  } else {
    clear_has__domainlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._DomainList)
}

// optional uint32 _ChatRoomNotify = 17;
bool ModContact::has__chatroomnotify() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void ModContact::set_has__chatroomnotify() {
  _has_bits_[1] |= 0x00002000u;
}
void ModContact::clear_has__chatroomnotify() {
  _has_bits_[1] &= ~0x00002000u;
}
void ModContact::clear__chatroomnotify() {
  _chatroomnotify_ = 0u;
  clear_has__chatroomnotify();
}
::google::protobuf::uint32 ModContact::_chatroomnotify() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomNotify)
  return _chatroomnotify_;
}
void ModContact::set__chatroomnotify(::google::protobuf::uint32 value) {
  set_has__chatroomnotify();
  _chatroomnotify_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomNotify)
}

// optional uint32 _AddContactScene = 18;
bool ModContact::has__addcontactscene() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void ModContact::set_has__addcontactscene() {
  _has_bits_[1] |= 0x00004000u;
}
void ModContact::clear_has__addcontactscene() {
  _has_bits_[1] &= ~0x00004000u;
}
void ModContact::clear__addcontactscene() {
  _addcontactscene_ = 0u;
  clear_has__addcontactscene();
}
::google::protobuf::uint32 ModContact::_addcontactscene() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AddContactScene)
  return _addcontactscene_;
}
void ModContact::set__addcontactscene(::google::protobuf::uint32 value) {
  set_has__addcontactscene();
  _addcontactscene_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AddContactScene)
}

// optional string _Province = 19;
bool ModContact::has__province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModContact::set_has__province() {
  _has_bits_[0] |= 0x00000001u;
}
void ModContact::clear_has__province() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModContact::clear__province() {
  _province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__province();
}
const ::std::string& ModContact::_province() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Province)
  return _province_.GetNoArena();
}
void ModContact::set__province(const ::std::string& value) {
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Province)
}
#if LANG_CXX11
void ModContact::set__province(::std::string&& value) {
  set_has__province();
  _province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Province)
}
#endif
void ModContact::set__province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Province)
}
void ModContact::set__province(const char* value, size_t size) {
  set_has__province();
  _province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Province)
}
::std::string* ModContact::mutable__province() {
  set_has__province();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Province)
  return _province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__province() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Province)
  clear_has__province();
  return _province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__province(::std::string* _province) {
  if (_province != NULL) {
    set_has__province();
  } else {
    clear_has__province();
  }
  _province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _province);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Province)
}

// optional string _City = 20;
bool ModContact::has__city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModContact::set_has__city() {
  _has_bits_[0] |= 0x00000002u;
}
void ModContact::clear_has__city() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModContact::clear__city() {
  _city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__city();
}
const ::std::string& ModContact::_city() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._City)
  return _city_.GetNoArena();
}
void ModContact::set__city(const ::std::string& value) {
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._City)
}
#if LANG_CXX11
void ModContact::set__city(::std::string&& value) {
  set_has__city();
  _city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._City)
}
#endif
void ModContact::set__city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._City)
}
void ModContact::set__city(const char* value, size_t size) {
  set_has__city();
  _city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._City)
}
::std::string* ModContact::mutable__city() {
  set_has__city();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._City)
  return _city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__city() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._City)
  clear_has__city();
  return _city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__city(::std::string* _city) {
  if (_city != NULL) {
    set_has__city();
  } else {
    clear_has__city();
  }
  _city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _city);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._City)
}

// optional string _Signature = 21;
bool ModContact::has__signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModContact::set_has__signature() {
  _has_bits_[0] |= 0x00000004u;
}
void ModContact::clear_has__signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModContact::clear__signature() {
  _signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__signature();
}
const ::std::string& ModContact::_signature() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Signature)
  return _signature_.GetNoArena();
}
void ModContact::set__signature(const ::std::string& value) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Signature)
}
#if LANG_CXX11
void ModContact::set__signature(::std::string&& value) {
  set_has__signature();
  _signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Signature)
}
#endif
void ModContact::set__signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Signature)
}
void ModContact::set__signature(const char* value, size_t size) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Signature)
}
::std::string* ModContact::mutable__signature() {
  set_has__signature();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Signature)
  return _signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__signature() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Signature)
  clear_has__signature();
  return _signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__signature(::std::string* _signature) {
  if (_signature != NULL) {
    set_has__signature();
  } else {
    clear_has__signature();
  }
  _signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _signature);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Signature)
}

// optional uint32 _PersonalCard = 22;
bool ModContact::has__personalcard() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void ModContact::set_has__personalcard() {
  _has_bits_[1] |= 0x00008000u;
}
void ModContact::clear_has__personalcard() {
  _has_bits_[1] &= ~0x00008000u;
}
void ModContact::clear__personalcard() {
  _personalcard_ = 0u;
  clear_has__personalcard();
}
::google::protobuf::uint32 ModContact::_personalcard() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PersonalCard)
  return _personalcard_;
}
void ModContact::set__personalcard(::google::protobuf::uint32 value) {
  set_has__personalcard();
  _personalcard_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._PersonalCard)
}

// optional uint32 _HasWeiXinHdHeadImg = 23;
bool ModContact::has__hasweixinhdheadimg() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void ModContact::set_has__hasweixinhdheadimg() {
  _has_bits_[1] |= 0x00010000u;
}
void ModContact::clear_has__hasweixinhdheadimg() {
  _has_bits_[1] &= ~0x00010000u;
}
void ModContact::clear__hasweixinhdheadimg() {
  _hasweixinhdheadimg_ = 0u;
  clear_has__hasweixinhdheadimg();
}
::google::protobuf::uint32 ModContact::_hasweixinhdheadimg() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._HasWeiXinHdHeadImg)
  return _hasweixinhdheadimg_;
}
void ModContact::set__hasweixinhdheadimg(::google::protobuf::uint32 value) {
  set_has__hasweixinhdheadimg();
  _hasweixinhdheadimg_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._HasWeiXinHdHeadImg)
}

// optional uint32 _VerifyFlag = 24;
bool ModContact::has__verifyflag() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void ModContact::set_has__verifyflag() {
  _has_bits_[1] |= 0x00020000u;
}
void ModContact::clear_has__verifyflag() {
  _has_bits_[1] &= ~0x00020000u;
}
void ModContact::clear__verifyflag() {
  _verifyflag_ = 0u;
  clear_has__verifyflag();
}
::google::protobuf::uint32 ModContact::_verifyflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyFlag)
  return _verifyflag_;
}
void ModContact::set__verifyflag(::google::protobuf::uint32 value) {
  set_has__verifyflag();
  _verifyflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyFlag)
}

// optional string _VerifyInfo = 25;
bool ModContact::has__verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModContact::set_has__verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void ModContact::clear_has__verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModContact::clear__verifyinfo() {
  _verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__verifyinfo();
}
const ::std::string& ModContact::_verifyinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyInfo)
  return _verifyinfo_.GetNoArena();
}
void ModContact::set__verifyinfo(const ::std::string& value) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyInfo)
}
#if LANG_CXX11
void ModContact::set__verifyinfo(::std::string&& value) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._VerifyInfo)
}
#endif
void ModContact::set__verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._VerifyInfo)
}
void ModContact::set__verifyinfo(const char* value, size_t size) {
  set_has__verifyinfo();
  _verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._VerifyInfo)
}
::std::string* ModContact::mutable__verifyinfo() {
  set_has__verifyinfo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._VerifyInfo)
  return _verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__verifyinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._VerifyInfo)
  clear_has__verifyinfo();
  return _verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__verifyinfo(::std::string* _verifyinfo) {
  if (_verifyinfo != NULL) {
    set_has__verifyinfo();
  } else {
    clear_has__verifyinfo();
  }
  _verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._VerifyInfo)
}

// optional int32 _Level = 26;
bool ModContact::has__level() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void ModContact::set_has__level() {
  _has_bits_[1] |= 0x00040000u;
}
void ModContact::clear_has__level() {
  _has_bits_[1] &= ~0x00040000u;
}
void ModContact::clear__level() {
  _level_ = 0;
  clear_has__level();
}
::google::protobuf::int32 ModContact::_level() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Level)
  return _level_;
}
void ModContact::set__level(::google::protobuf::int32 value) {
  set_has__level();
  _level_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Level)
}

// optional uint32 _Source = 27;
bool ModContact::has__source() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void ModContact::set_has__source() {
  _has_bits_[1] |= 0x00080000u;
}
void ModContact::clear_has__source() {
  _has_bits_[1] &= ~0x00080000u;
}
void ModContact::clear__source() {
  _source_ = 0u;
  clear_has__source();
}
::google::protobuf::uint32 ModContact::_source() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Source)
  return _source_;
}
void ModContact::set__source(::google::protobuf::uint32 value) {
  set_has__source();
  _source_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Source)
}

// optional string _Weibo = 28;
bool ModContact::has__weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModContact::set_has__weibo() {
  _has_bits_[0] |= 0x00000010u;
}
void ModContact::clear_has__weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModContact::clear__weibo() {
  _weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__weibo();
}
const ::std::string& ModContact::_weibo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Weibo)
  return _weibo_.GetNoArena();
}
void ModContact::set__weibo(const ::std::string& value) {
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Weibo)
}
#if LANG_CXX11
void ModContact::set__weibo(::std::string&& value) {
  set_has__weibo();
  _weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Weibo)
}
#endif
void ModContact::set__weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Weibo)
}
void ModContact::set__weibo(const char* value, size_t size) {
  set_has__weibo();
  _weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Weibo)
}
::std::string* ModContact::mutable__weibo() {
  set_has__weibo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Weibo)
  return _weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__weibo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Weibo)
  clear_has__weibo();
  return _weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__weibo(::std::string* _weibo) {
  if (_weibo != NULL) {
    set_has__weibo();
  } else {
    clear_has__weibo();
  }
  _weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _weibo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Weibo)
}

// optional string _VerifyContent = 29;
bool ModContact::has__verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModContact::set_has__verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
void ModContact::clear_has__verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModContact::clear__verifycontent() {
  _verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__verifycontent();
}
const ::std::string& ModContact::_verifycontent() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._VerifyContent)
  return _verifycontent_.GetNoArena();
}
void ModContact::set__verifycontent(const ::std::string& value) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._VerifyContent)
}
#if LANG_CXX11
void ModContact::set__verifycontent(::std::string&& value) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._VerifyContent)
}
#endif
void ModContact::set__verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._VerifyContent)
}
void ModContact::set__verifycontent(const char* value, size_t size) {
  set_has__verifycontent();
  _verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._VerifyContent)
}
::std::string* ModContact::mutable__verifycontent() {
  set_has__verifycontent();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._VerifyContent)
  return _verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__verifycontent() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._VerifyContent)
  clear_has__verifycontent();
  return _verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__verifycontent(::std::string* _verifycontent) {
  if (_verifycontent != NULL) {
    set_has__verifycontent();
  } else {
    clear_has__verifycontent();
  }
  _verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _verifycontent);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._VerifyContent)
}

// optional string _Alias = 30;
bool ModContact::has__alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModContact::set_has__alias() {
  _has_bits_[0] |= 0x00000040u;
}
void ModContact::clear_has__alias() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModContact::clear__alias() {
  _alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__alias();
}
const ::std::string& ModContact::_alias() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Alias)
  return _alias_.GetNoArena();
}
void ModContact::set__alias(const ::std::string& value) {
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Alias)
}
#if LANG_CXX11
void ModContact::set__alias(::std::string&& value) {
  set_has__alias();
  _alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Alias)
}
#endif
void ModContact::set__alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Alias)
}
void ModContact::set__alias(const char* value, size_t size) {
  set_has__alias();
  _alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Alias)
}
::std::string* ModContact::mutable__alias() {
  set_has__alias();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Alias)
  return _alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__alias() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Alias)
  clear_has__alias();
  return _alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__alias(::std::string* _alias) {
  if (_alias != NULL) {
    set_has__alias();
  } else {
    clear_has__alias();
  }
  _alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _alias);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Alias)
}

// optional string _ChatRoomOwner = 31;
bool ModContact::has__chatroomowner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModContact::set_has__chatroomowner() {
  _has_bits_[0] |= 0x00000080u;
}
void ModContact::clear_has__chatroomowner() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModContact::clear__chatroomowner() {
  _chatroomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__chatroomowner();
}
const ::std::string& ModContact::_chatroomowner() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomOwner)
  return _chatroomowner_.GetNoArena();
}
void ModContact::set__chatroomowner(const ::std::string& value) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomOwner)
}
#if LANG_CXX11
void ModContact::set__chatroomowner(::std::string&& value) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ChatRoomOwner)
}
#endif
void ModContact::set__chatroomowner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ChatRoomOwner)
}
void ModContact::set__chatroomowner(const char* value, size_t size) {
  set_has__chatroomowner();
  _chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ChatRoomOwner)
}
::std::string* ModContact::mutable__chatroomowner() {
  set_has__chatroomowner();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ChatRoomOwner)
  return _chatroomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__chatroomowner() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ChatRoomOwner)
  clear_has__chatroomowner();
  return _chatroomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__chatroomowner(::std::string* _chatroomowner) {
  if (_chatroomowner != NULL) {
    set_has__chatroomowner();
  } else {
    clear_has__chatroomowner();
  }
  _chatroomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _chatroomowner);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ChatRoomOwner)
}

// optional string _WeiboNickname = 32;
bool ModContact::has__weibonickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModContact::set_has__weibonickname() {
  _has_bits_[0] |= 0x00000100u;
}
void ModContact::clear_has__weibonickname() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModContact::clear__weibonickname() {
  _weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__weibonickname();
}
const ::std::string& ModContact::_weibonickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._WeiboNickname)
  return _weibonickname_.GetNoArena();
}
void ModContact::set__weibonickname(const ::std::string& value) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._WeiboNickname)
}
#if LANG_CXX11
void ModContact::set__weibonickname(::std::string&& value) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._WeiboNickname)
}
#endif
void ModContact::set__weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._WeiboNickname)
}
void ModContact::set__weibonickname(const char* value, size_t size) {
  set_has__weibonickname();
  _weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._WeiboNickname)
}
::std::string* ModContact::mutable__weibonickname() {
  set_has__weibonickname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._WeiboNickname)
  return _weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__weibonickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._WeiboNickname)
  clear_has__weibonickname();
  return _weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__weibonickname(::std::string* _weibonickname) {
  if (_weibonickname != NULL) {
    set_has__weibonickname();
  } else {
    clear_has__weibonickname();
  }
  _weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _weibonickname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._WeiboNickname)
}

// optional uint32 _WeiboFlag = 33;
bool ModContact::has__weiboflag() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void ModContact::set_has__weiboflag() {
  _has_bits_[1] |= 0x00100000u;
}
void ModContact::clear_has__weiboflag() {
  _has_bits_[1] &= ~0x00100000u;
}
void ModContact::clear__weiboflag() {
  _weiboflag_ = 0u;
  clear_has__weiboflag();
}
::google::protobuf::uint32 ModContact::_weiboflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._WeiboFlag)
  return _weiboflag_;
}
void ModContact::set__weiboflag(::google::protobuf::uint32 value) {
  set_has__weiboflag();
  _weiboflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._WeiboFlag)
}

// optional int32 _AlbumStyle = 34;
bool ModContact::has__albumstyle() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void ModContact::set_has__albumstyle() {
  _has_bits_[1] |= 0x00200000u;
}
void ModContact::clear_has__albumstyle() {
  _has_bits_[1] &= ~0x00200000u;
}
void ModContact::clear__albumstyle() {
  _albumstyle_ = 0;
  clear_has__albumstyle();
}
::google::protobuf::int32 ModContact::_albumstyle() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumStyle)
  return _albumstyle_;
}
void ModContact::set__albumstyle(::google::protobuf::int32 value) {
  set_has__albumstyle();
  _albumstyle_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumStyle)
}

// optional int32 _AlbumFlag = 35;
bool ModContact::has__albumflag() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void ModContact::set_has__albumflag() {
  _has_bits_[1] |= 0x00400000u;
}
void ModContact::clear_has__albumflag() {
  _has_bits_[1] &= ~0x00400000u;
}
void ModContact::clear__albumflag() {
  _albumflag_ = 0;
  clear_has__albumflag();
}
::google::protobuf::int32 ModContact::_albumflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumFlag)
  return _albumflag_;
}
void ModContact::set__albumflag(::google::protobuf::int32 value) {
  set_has__albumflag();
  _albumflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumFlag)
}

// optional string _AlbumBGImgID = 36;
bool ModContact::has__albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModContact::set_has__albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
void ModContact::clear_has__albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModContact::clear__albumbgimgid() {
  _albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__albumbgimgid();
}
const ::std::string& ModContact::_albumbgimgid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AlbumBGImgID)
  return _albumbgimgid_.GetNoArena();
}
void ModContact::set__albumbgimgid(const ::std::string& value) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._AlbumBGImgID)
}
#if LANG_CXX11
void ModContact::set__albumbgimgid(::std::string&& value) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._AlbumBGImgID)
}
#endif
void ModContact::set__albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._AlbumBGImgID)
}
void ModContact::set__albumbgimgid(const char* value, size_t size) {
  set_has__albumbgimgid();
  _albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._AlbumBGImgID)
}
::std::string* ModContact::mutable__albumbgimgid() {
  set_has__albumbgimgid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._AlbumBGImgID)
  return _albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__albumbgimgid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._AlbumBGImgID)
  clear_has__albumbgimgid();
  return _albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__albumbgimgid(::std::string* _albumbgimgid) {
  if (_albumbgimgid != NULL) {
    set_has__albumbgimgid();
  } else {
    clear_has__albumbgimgid();
  }
  _albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._AlbumBGImgID)
}

// optional .MMPro.micromsg.SnsUserInfo _SnsUserInfo = 37;
bool ModContact::has__snsuserinfo() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void ModContact::set_has__snsuserinfo() {
  _has_bits_[1] |= 0x00000004u;
}
void ModContact::clear_has__snsuserinfo() {
  _has_bits_[1] &= ~0x00000004u;
}
void ModContact::clear__snsuserinfo() {
  if (_snsuserinfo_ != NULL) _snsuserinfo_->::MMPro::micromsg::SnsUserInfo::Clear();
  clear_has__snsuserinfo();
}
const ::MMPro::micromsg::SnsUserInfo& ModContact::_snsuserinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._SnsUserInfo)
  return _snsuserinfo_ != NULL ? *_snsuserinfo_
                         : *::MMPro::micromsg::SnsUserInfo::internal_default_instance();
}
::MMPro::micromsg::SnsUserInfo* ModContact::mutable__snsuserinfo() {
  set_has__snsuserinfo();
  if (_snsuserinfo_ == NULL) {
    _snsuserinfo_ = new ::MMPro::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._SnsUserInfo)
  return _snsuserinfo_;
}
::MMPro::micromsg::SnsUserInfo* ModContact::release__snsuserinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._SnsUserInfo)
  clear_has__snsuserinfo();
  ::MMPro::micromsg::SnsUserInfo* temp = _snsuserinfo_;
  _snsuserinfo_ = NULL;
  return temp;
}
void ModContact::set_allocated__snsuserinfo(::MMPro::micromsg::SnsUserInfo* _snsuserinfo) {
  delete _snsuserinfo_;
  _snsuserinfo_ = _snsuserinfo;
  if (_snsuserinfo) {
    set_has__snsuserinfo();
  } else {
    clear_has__snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._SnsUserInfo)
}

// optional string _Country = 38;
bool ModContact::has__country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModContact::set_has__country() {
  _has_bits_[0] |= 0x00000400u;
}
void ModContact::clear_has__country() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModContact::clear__country() {
  _country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__country();
}
const ::std::string& ModContact::_country() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Country)
  return _country_.GetNoArena();
}
void ModContact::set__country(const ::std::string& value) {
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Country)
}
#if LANG_CXX11
void ModContact::set__country(::std::string&& value) {
  set_has__country();
  _country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Country)
}
#endif
void ModContact::set__country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Country)
}
void ModContact::set__country(const char* value, size_t size) {
  set_has__country();
  _country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Country)
}
::std::string* ModContact::mutable__country() {
  set_has__country();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Country)
  return _country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__country() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Country)
  clear_has__country();
  return _country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__country(::std::string* _country) {
  if (_country != NULL) {
    set_has__country();
  } else {
    clear_has__country();
  }
  _country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _country);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Country)
}

// optional string _BigHeadImgUrl = 39;
bool ModContact::has__bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModContact::set_has__bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
void ModContact::clear_has__bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModContact::clear__bigheadimgurl() {
  _bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__bigheadimgurl();
}
const ::std::string& ModContact::_bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._BigHeadImgUrl)
  return _bigheadimgurl_.GetNoArena();
}
void ModContact::set__bigheadimgurl(const ::std::string& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
#if LANG_CXX11
void ModContact::set__bigheadimgurl(::std::string&& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
#endif
void ModContact::set__bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
void ModContact::set__bigheadimgurl(const char* value, size_t size) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._BigHeadImgUrl)
}
::std::string* ModContact::mutable__bigheadimgurl() {
  set_has__bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._BigHeadImgUrl)
  return _bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__bigheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._BigHeadImgUrl)
  clear_has__bigheadimgurl();
  return _bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__bigheadimgurl(::std::string* _bigheadimgurl) {
  if (_bigheadimgurl != NULL) {
    set_has__bigheadimgurl();
  } else {
    clear_has__bigheadimgurl();
  }
  _bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._BigHeadImgUrl)
}

// optional string _SmallHeadImgUrl = 40;
bool ModContact::has__smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModContact::set_has__smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
void ModContact::clear_has__smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModContact::clear__smallheadimgurl() {
  _smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__smallheadimgurl();
}
const ::std::string& ModContact::_smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  return _smallheadimgurl_.GetNoArena();
}
void ModContact::set__smallheadimgurl(const ::std::string& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
#if LANG_CXX11
void ModContact::set__smallheadimgurl(::std::string&& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
#endif
void ModContact::set__smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
void ModContact::set__smallheadimgurl(const char* value, size_t size) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}
::std::string* ModContact::mutable__smallheadimgurl() {
  set_has__smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  return _smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__smallheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._SmallHeadImgUrl)
  clear_has__smallheadimgurl();
  return _smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__smallheadimgurl(::std::string* _smallheadimgurl) {
  if (_smallheadimgurl != NULL) {
    set_has__smallheadimgurl();
  } else {
    clear_has__smallheadimgurl();
  }
  _smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._SmallHeadImgUrl)
}

// optional string _MyBrandList = 41;
bool ModContact::has__mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModContact::set_has__mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
void ModContact::clear_has__mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModContact::clear__mybrandlist() {
  _mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mybrandlist();
}
const ::std::string& ModContact::_mybrandlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MyBrandList)
  return _mybrandlist_.GetNoArena();
}
void ModContact::set__mybrandlist(const ::std::string& value) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MyBrandList)
}
#if LANG_CXX11
void ModContact::set__mybrandlist(::std::string&& value) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MyBrandList)
}
#endif
void ModContact::set__mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MyBrandList)
}
void ModContact::set__mybrandlist(const char* value, size_t size) {
  set_has__mybrandlist();
  _mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MyBrandList)
}
::std::string* ModContact::mutable__mybrandlist() {
  set_has__mybrandlist();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MyBrandList)
  return _mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__mybrandlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MyBrandList)
  clear_has__mybrandlist();
  return _mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__mybrandlist(::std::string* _mybrandlist) {
  if (_mybrandlist != NULL) {
    set_has__mybrandlist();
  } else {
    clear_has__mybrandlist();
  }
  _mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MyBrandList)
}

// optional .MMPro.micromsg.CustomizedInfo _CustomizedInfo = 42;
bool ModContact::has__customizedinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void ModContact::set_has__customizedinfo() {
  _has_bits_[1] |= 0x00000008u;
}
void ModContact::clear_has__customizedinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
void ModContact::clear__customizedinfo() {
  if (_customizedinfo_ != NULL) _customizedinfo_->::MMPro::micromsg::CustomizedInfo::Clear();
  clear_has__customizedinfo();
}
const ::MMPro::micromsg::CustomizedInfo& ModContact::_customizedinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._CustomizedInfo)
  return _customizedinfo_ != NULL ? *_customizedinfo_
                         : *::MMPro::micromsg::CustomizedInfo::internal_default_instance();
}
::MMPro::micromsg::CustomizedInfo* ModContact::mutable__customizedinfo() {
  set_has__customizedinfo();
  if (_customizedinfo_ == NULL) {
    _customizedinfo_ = new ::MMPro::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._CustomizedInfo)
  return _customizedinfo_;
}
::MMPro::micromsg::CustomizedInfo* ModContact::release__customizedinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._CustomizedInfo)
  clear_has__customizedinfo();
  ::MMPro::micromsg::CustomizedInfo* temp = _customizedinfo_;
  _customizedinfo_ = NULL;
  return temp;
}
void ModContact::set_allocated__customizedinfo(::MMPro::micromsg::CustomizedInfo* _customizedinfo) {
  delete _customizedinfo_;
  _customizedinfo_ = _customizedinfo;
  if (_customizedinfo) {
    set_has__customizedinfo();
  } else {
    clear_has__customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._CustomizedInfo)
}

// optional string _ChatRoomData = 43;
bool ModContact::has__chatroomdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModContact::set_has__chatroomdata() {
  _has_bits_[0] |= 0x00004000u;
}
void ModContact::clear_has__chatroomdata() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModContact::clear__chatroomdata() {
  _chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__chatroomdata();
}
const ::std::string& ModContact::_chatroomdata() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatRoomData)
  return _chatroomdata_.GetNoArena();
}
void ModContact::set__chatroomdata(const ::std::string& value) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatRoomData)
}
#if LANG_CXX11
void ModContact::set__chatroomdata(::std::string&& value) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ChatRoomData)
}
#endif
void ModContact::set__chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ChatRoomData)
}
void ModContact::set__chatroomdata(const char* value, size_t size) {
  set_has__chatroomdata();
  _chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ChatRoomData)
}
::std::string* ModContact::mutable__chatroomdata() {
  set_has__chatroomdata();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ChatRoomData)
  return _chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__chatroomdata() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ChatRoomData)
  clear_has__chatroomdata();
  return _chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__chatroomdata(::std::string* _chatroomdata) {
  if (_chatroomdata != NULL) {
    set_has__chatroomdata();
  } else {
    clear_has__chatroomdata();
  }
  _chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ChatRoomData)
}

// optional string _HeadImgMd5 = 44;
bool ModContact::has__headimgmd5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModContact::set_has__headimgmd5() {
  _has_bits_[0] |= 0x00008000u;
}
void ModContact::clear_has__headimgmd5() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModContact::clear__headimgmd5() {
  _headimgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__headimgmd5();
}
const ::std::string& ModContact::_headimgmd5() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._HeadImgMd5)
  return _headimgmd5_.GetNoArena();
}
void ModContact::set__headimgmd5(const ::std::string& value) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._HeadImgMd5)
}
#if LANG_CXX11
void ModContact::set__headimgmd5(::std::string&& value) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._HeadImgMd5)
}
#endif
void ModContact::set__headimgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._HeadImgMd5)
}
void ModContact::set__headimgmd5(const char* value, size_t size) {
  set_has__headimgmd5();
  _headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._HeadImgMd5)
}
::std::string* ModContact::mutable__headimgmd5() {
  set_has__headimgmd5();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._HeadImgMd5)
  return _headimgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__headimgmd5() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._HeadImgMd5)
  clear_has__headimgmd5();
  return _headimgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__headimgmd5(::std::string* _headimgmd5) {
  if (_headimgmd5 != NULL) {
    set_has__headimgmd5();
  } else {
    clear_has__headimgmd5();
  }
  _headimgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _headimgmd5);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._HeadImgMd5)
}

// optional string _EncryptUserName = 45;
bool ModContact::has__encryptusername() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModContact::set_has__encryptusername() {
  _has_bits_[0] |= 0x00010000u;
}
void ModContact::clear_has__encryptusername() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModContact::clear__encryptusername() {
  _encryptusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__encryptusername();
}
const ::std::string& ModContact::_encryptusername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._EncryptUserName)
  return _encryptusername_.GetNoArena();
}
void ModContact::set__encryptusername(const ::std::string& value) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._EncryptUserName)
}
#if LANG_CXX11
void ModContact::set__encryptusername(::std::string&& value) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._EncryptUserName)
}
#endif
void ModContact::set__encryptusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._EncryptUserName)
}
void ModContact::set__encryptusername(const char* value, size_t size) {
  set_has__encryptusername();
  _encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._EncryptUserName)
}
::std::string* ModContact::mutable__encryptusername() {
  set_has__encryptusername();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._EncryptUserName)
  return _encryptusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__encryptusername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._EncryptUserName)
  clear_has__encryptusername();
  return _encryptusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__encryptusername(::std::string* _encryptusername) {
  if (_encryptusername != NULL) {
    set_has__encryptusername();
  } else {
    clear_has__encryptusername();
  }
  _encryptusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _encryptusername);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._EncryptUserName)
}

// optional string _IDCardNum = 46;
bool ModContact::has__idcardnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModContact::set_has__idcardnum() {
  _has_bits_[0] |= 0x00020000u;
}
void ModContact::clear_has__idcardnum() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModContact::clear__idcardnum() {
  _idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__idcardnum();
}
const ::std::string& ModContact::_idcardnum() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._IDCardNum)
  return _idcardnum_.GetNoArena();
}
void ModContact::set__idcardnum(const ::std::string& value) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._IDCardNum)
}
#if LANG_CXX11
void ModContact::set__idcardnum(::std::string&& value) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._IDCardNum)
}
#endif
void ModContact::set__idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._IDCardNum)
}
void ModContact::set__idcardnum(const char* value, size_t size) {
  set_has__idcardnum();
  _idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._IDCardNum)
}
::std::string* ModContact::mutable__idcardnum() {
  set_has__idcardnum();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._IDCardNum)
  return _idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__idcardnum() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._IDCardNum)
  clear_has__idcardnum();
  return _idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__idcardnum(::std::string* _idcardnum) {
  if (_idcardnum != NULL) {
    set_has__idcardnum();
  } else {
    clear_has__idcardnum();
  }
  _idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _idcardnum);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._IDCardNum)
}

// optional string _RealName = 47;
bool ModContact::has__realname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModContact::set_has__realname() {
  _has_bits_[0] |= 0x00040000u;
}
void ModContact::clear_has__realname() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModContact::clear__realname() {
  _realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__realname();
}
const ::std::string& ModContact::_realname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._RealName)
  return _realname_.GetNoArena();
}
void ModContact::set__realname(const ::std::string& value) {
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._RealName)
}
#if LANG_CXX11
void ModContact::set__realname(::std::string&& value) {
  set_has__realname();
  _realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._RealName)
}
#endif
void ModContact::set__realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._RealName)
}
void ModContact::set__realname(const char* value, size_t size) {
  set_has__realname();
  _realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._RealName)
}
::std::string* ModContact::mutable__realname() {
  set_has__realname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._RealName)
  return _realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__realname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._RealName)
  clear_has__realname();
  return _realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__realname(::std::string* _realname) {
  if (_realname != NULL) {
    set_has__realname();
  } else {
    clear_has__realname();
  }
  _realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _realname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._RealName)
}

// optional string _MobileHash = 48;
bool ModContact::has__mobilehash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModContact::set_has__mobilehash() {
  _has_bits_[0] |= 0x00080000u;
}
void ModContact::clear_has__mobilehash() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModContact::clear__mobilehash() {
  _mobilehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mobilehash();
}
const ::std::string& ModContact::_mobilehash() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MobileHash)
  return _mobilehash_.GetNoArena();
}
void ModContact::set__mobilehash(const ::std::string& value) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MobileHash)
}
#if LANG_CXX11
void ModContact::set__mobilehash(::std::string&& value) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MobileHash)
}
#endif
void ModContact::set__mobilehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MobileHash)
}
void ModContact::set__mobilehash(const char* value, size_t size) {
  set_has__mobilehash();
  _mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MobileHash)
}
::std::string* ModContact::mutable__mobilehash() {
  set_has__mobilehash();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MobileHash)
  return _mobilehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__mobilehash() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MobileHash)
  clear_has__mobilehash();
  return _mobilehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__mobilehash(::std::string* _mobilehash) {
  if (_mobilehash != NULL) {
    set_has__mobilehash();
  } else {
    clear_has__mobilehash();
  }
  _mobilehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mobilehash);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MobileHash)
}

// optional string _MobileFullHash = 49;
bool ModContact::has__mobilefullhash() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModContact::set_has__mobilefullhash() {
  _has_bits_[0] |= 0x00100000u;
}
void ModContact::clear_has__mobilefullhash() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModContact::clear__mobilefullhash() {
  _mobilefullhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__mobilefullhash();
}
const ::std::string& ModContact::_mobilefullhash() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._MobileFullHash)
  return _mobilefullhash_.GetNoArena();
}
void ModContact::set__mobilefullhash(const ::std::string& value) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._MobileFullHash)
}
#if LANG_CXX11
void ModContact::set__mobilefullhash(::std::string&& value) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._MobileFullHash)
}
#endif
void ModContact::set__mobilefullhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._MobileFullHash)
}
void ModContact::set__mobilefullhash(const char* value, size_t size) {
  set_has__mobilefullhash();
  _mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._MobileFullHash)
}
::std::string* ModContact::mutable__mobilefullhash() {
  set_has__mobilefullhash();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._MobileFullHash)
  return _mobilefullhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__mobilefullhash() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._MobileFullHash)
  clear_has__mobilefullhash();
  return _mobilefullhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__mobilefullhash(::std::string* _mobilefullhash) {
  if (_mobilefullhash != NULL) {
    set_has__mobilefullhash();
  } else {
    clear_has__mobilefullhash();
  }
  _mobilefullhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _mobilefullhash);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._MobileFullHash)
}

// optional .MMPro.micromsg.AdditionalContactList _AdditionalContactList = 50;
bool ModContact::has__additionalcontactlist() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void ModContact::set_has__additionalcontactlist() {
  _has_bits_[1] |= 0x00000010u;
}
void ModContact::clear_has__additionalcontactlist() {
  _has_bits_[1] &= ~0x00000010u;
}
void ModContact::clear__additionalcontactlist() {
  if (_additionalcontactlist_ != NULL) _additionalcontactlist_->::MMPro::micromsg::AdditionalContactList::Clear();
  clear_has__additionalcontactlist();
}
const ::MMPro::micromsg::AdditionalContactList& ModContact::_additionalcontactlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._AdditionalContactList)
  return _additionalcontactlist_ != NULL ? *_additionalcontactlist_
                         : *::MMPro::micromsg::AdditionalContactList::internal_default_instance();
}
::MMPro::micromsg::AdditionalContactList* ModContact::mutable__additionalcontactlist() {
  set_has__additionalcontactlist();
  if (_additionalcontactlist_ == NULL) {
    _additionalcontactlist_ = new ::MMPro::micromsg::AdditionalContactList;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._AdditionalContactList)
  return _additionalcontactlist_;
}
::MMPro::micromsg::AdditionalContactList* ModContact::release__additionalcontactlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._AdditionalContactList)
  clear_has__additionalcontactlist();
  ::MMPro::micromsg::AdditionalContactList* temp = _additionalcontactlist_;
  _additionalcontactlist_ = NULL;
  return temp;
}
void ModContact::set_allocated__additionalcontactlist(::MMPro::micromsg::AdditionalContactList* _additionalcontactlist) {
  delete _additionalcontactlist_;
  _additionalcontactlist_ = _additionalcontactlist;
  if (_additionalcontactlist) {
    set_has__additionalcontactlist();
  } else {
    clear_has__additionalcontactlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._AdditionalContactList)
}

// optional uint32 _ChatroomVersion = 53;
bool ModContact::has__chatroomversion() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void ModContact::set_has__chatroomversion() {
  _has_bits_[1] |= 0x00800000u;
}
void ModContact::clear_has__chatroomversion() {
  _has_bits_[1] &= ~0x00800000u;
}
void ModContact::clear__chatroomversion() {
  _chatroomversion_ = 0u;
  clear_has__chatroomversion();
}
::google::protobuf::uint32 ModContact::_chatroomversion() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomVersion)
  return _chatroomversion_;
}
void ModContact::set__chatroomversion(::google::protobuf::uint32 value) {
  set_has__chatroomversion();
  _chatroomversion_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomVersion)
}

// optional string _ExtInfo = 54;
bool ModContact::has__extinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModContact::set_has__extinfo() {
  _has_bits_[0] |= 0x00200000u;
}
void ModContact::clear_has__extinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModContact::clear__extinfo() {
  _extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__extinfo();
}
const ::std::string& ModContact::_extinfo() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ExtInfo)
  return _extinfo_.GetNoArena();
}
void ModContact::set__extinfo(const ::std::string& value) {
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ExtInfo)
}
#if LANG_CXX11
void ModContact::set__extinfo(::std::string&& value) {
  set_has__extinfo();
  _extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._ExtInfo)
}
#endif
void ModContact::set__extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._ExtInfo)
}
void ModContact::set__extinfo(const char* value, size_t size) {
  set_has__extinfo();
  _extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._ExtInfo)
}
::std::string* ModContact::mutable__extinfo() {
  set_has__extinfo();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._ExtInfo)
  return _extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__extinfo() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._ExtInfo)
  clear_has__extinfo();
  return _extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__extinfo(::std::string* _extinfo) {
  if (_extinfo != NULL) {
    set_has__extinfo();
  } else {
    clear_has__extinfo();
  }
  _extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _extinfo);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._ExtInfo)
}

// optional uint32 _ChatroomMaxCount = 55;
bool ModContact::has__chatroommaxcount() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void ModContact::set_has__chatroommaxcount() {
  _has_bits_[1] |= 0x01000000u;
}
void ModContact::clear_has__chatroommaxcount() {
  _has_bits_[1] &= ~0x01000000u;
}
void ModContact::clear__chatroommaxcount() {
  _chatroommaxcount_ = 0u;
  clear_has__chatroommaxcount();
}
::google::protobuf::uint32 ModContact::_chatroommaxcount() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomMaxCount)
  return _chatroommaxcount_;
}
void ModContact::set__chatroommaxcount(::google::protobuf::uint32 value) {
  set_has__chatroommaxcount();
  _chatroommaxcount_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomMaxCount)
}

// optional uint32 _ChatroomType = 56;
bool ModContact::has__chatroomtype() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void ModContact::set_has__chatroomtype() {
  _has_bits_[1] |= 0x02000000u;
}
void ModContact::clear_has__chatroomtype() {
  _has_bits_[1] &= ~0x02000000u;
}
void ModContact::clear__chatroomtype() {
  _chatroomtype_ = 0u;
  clear_has__chatroomtype();
}
::google::protobuf::uint32 ModContact::_chatroomtype() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._ChatroomType)
  return _chatroomtype_;
}
void ModContact::set__chatroomtype(::google::protobuf::uint32 value) {
  set_has__chatroomtype();
  _chatroomtype_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._ChatroomType)
}

// optional .MMPro.micromsg.ChatRoomMemberData _NewChatroomData = 57;
bool ModContact::has__newchatroomdata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void ModContact::set_has__newchatroomdata() {
  _has_bits_[1] |= 0x00000020u;
}
void ModContact::clear_has__newchatroomdata() {
  _has_bits_[1] &= ~0x00000020u;
}
void ModContact::clear__newchatroomdata() {
  if (_newchatroomdata_ != NULL) _newchatroomdata_->::MMPro::micromsg::ChatRoomMemberData::Clear();
  clear_has__newchatroomdata();
}
const ::MMPro::micromsg::ChatRoomMemberData& ModContact::_newchatroomdata() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._NewChatroomData)
  return _newchatroomdata_ != NULL ? *_newchatroomdata_
                         : *::MMPro::micromsg::ChatRoomMemberData::internal_default_instance();
}
::MMPro::micromsg::ChatRoomMemberData* ModContact::mutable__newchatroomdata() {
  set_has__newchatroomdata();
  if (_newchatroomdata_ == NULL) {
    _newchatroomdata_ = new ::MMPro::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._NewChatroomData)
  return _newchatroomdata_;
}
::MMPro::micromsg::ChatRoomMemberData* ModContact::release__newchatroomdata() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._NewChatroomData)
  clear_has__newchatroomdata();
  ::MMPro::micromsg::ChatRoomMemberData* temp = _newchatroomdata_;
  _newchatroomdata_ = NULL;
  return temp;
}
void ModContact::set_allocated__newchatroomdata(::MMPro::micromsg::ChatRoomMemberData* _newchatroomdata) {
  delete _newchatroomdata_;
  _newchatroomdata_ = _newchatroomdata;
  if (_newchatroomdata) {
    set_has__newchatroomdata();
  } else {
    clear_has__newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._NewChatroomData)
}

// optional int32 _DeleteFlag = 58;
bool ModContact::has__deleteflag() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void ModContact::set_has__deleteflag() {
  _has_bits_[1] |= 0x04000000u;
}
void ModContact::clear_has__deleteflag() {
  _has_bits_[1] &= ~0x04000000u;
}
void ModContact::clear__deleteflag() {
  _deleteflag_ = 0;
  clear_has__deleteflag();
}
::google::protobuf::int32 ModContact::_deleteflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._DeleteFlag)
  return _deleteflag_;
}
void ModContact::set__deleteflag(::google::protobuf::int32 value) {
  set_has__deleteflag();
  _deleteflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._DeleteFlag)
}

// optional string _Description = 59;
bool ModContact::has__description() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModContact::set_has__description() {
  _has_bits_[0] |= 0x00400000u;
}
void ModContact::clear_has__description() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModContact::clear__description() {
  _description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__description();
}
const ::std::string& ModContact::_description() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._Description)
  return _description_.GetNoArena();
}
void ModContact::set__description(const ::std::string& value) {
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._Description)
}
#if LANG_CXX11
void ModContact::set__description(::std::string&& value) {
  set_has__description();
  _description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._Description)
}
#endif
void ModContact::set__description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._Description)
}
void ModContact::set__description(const char* value, size_t size) {
  set_has__description();
  _description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._Description)
}
::std::string* ModContact::mutable__description() {
  set_has__description();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._Description)
  return _description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__description() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._Description)
  clear_has__description();
  return _description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__description(::std::string* _description) {
  if (_description != NULL) {
    set_has__description();
  } else {
    clear_has__description();
  }
  _description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _description);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._Description)
}

// optional string _CardImgUrl = 60;
bool ModContact::has__cardimgurl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModContact::set_has__cardimgurl() {
  _has_bits_[0] |= 0x00800000u;
}
void ModContact::clear_has__cardimgurl() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModContact::clear__cardimgurl() {
  _cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__cardimgurl();
}
const ::std::string& ModContact::_cardimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._CardImgUrl)
  return _cardimgurl_.GetNoArena();
}
void ModContact::set__cardimgurl(const ::std::string& value) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._CardImgUrl)
}
#if LANG_CXX11
void ModContact::set__cardimgurl(::std::string&& value) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._CardImgUrl)
}
#endif
void ModContact::set__cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._CardImgUrl)
}
void ModContact::set__cardimgurl(const char* value, size_t size) {
  set_has__cardimgurl();
  _cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._CardImgUrl)
}
::std::string* ModContact::mutable__cardimgurl() {
  set_has__cardimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._CardImgUrl)
  return _cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__cardimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._CardImgUrl)
  clear_has__cardimgurl();
  return _cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__cardimgurl(::std::string* _cardimgurl) {
  if (_cardimgurl != NULL) {
    set_has__cardimgurl();
  } else {
    clear_has__cardimgurl();
  }
  _cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._CardImgUrl)
}

// optional string _LabelIDList = 61;
bool ModContact::has__labelidlist() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModContact::set_has__labelidlist() {
  _has_bits_[0] |= 0x01000000u;
}
void ModContact::clear_has__labelidlist() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModContact::clear__labelidlist() {
  _labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__labelidlist();
}
const ::std::string& ModContact::_labelidlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._LabelIDList)
  return _labelidlist_.GetNoArena();
}
void ModContact::set__labelidlist(const ::std::string& value) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ModContact._LabelIDList)
}
#if LANG_CXX11
void ModContact::set__labelidlist(::std::string&& value) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ModContact._LabelIDList)
}
#endif
void ModContact::set__labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ModContact._LabelIDList)
}
void ModContact::set__labelidlist(const char* value, size_t size) {
  set_has__labelidlist();
  _labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ModContact._LabelIDList)
}
::std::string* ModContact::mutable__labelidlist() {
  set_has__labelidlist();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._LabelIDList)
  return _labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release__labelidlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._LabelIDList)
  clear_has__labelidlist();
  return _labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated__labelidlist(::std::string* _labelidlist) {
  if (_labelidlist != NULL) {
    set_has__labelidlist();
  } else {
    clear_has__labelidlist();
  }
  _labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _labelidlist);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._LabelIDList)
}

// optional .MMPro.micromsg.PhoneNumberList _PhoneNumberList = 62;
bool ModContact::has__phonenumberlist() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void ModContact::set_has__phonenumberlist() {
  _has_bits_[1] |= 0x00000040u;
}
void ModContact::clear_has__phonenumberlist() {
  _has_bits_[1] &= ~0x00000040u;
}
void ModContact::clear__phonenumberlist() {
  if (_phonenumberlist_ != NULL) _phonenumberlist_->::MMPro::micromsg::PhoneNumberList::Clear();
  clear_has__phonenumberlist();
}
const ::MMPro::micromsg::PhoneNumberList& ModContact::_phonenumberlist() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ModContact._PhoneNumberList)
  return _phonenumberlist_ != NULL ? *_phonenumberlist_
                         : *::MMPro::micromsg::PhoneNumberList::internal_default_instance();
}
::MMPro::micromsg::PhoneNumberList* ModContact::mutable__phonenumberlist() {
  set_has__phonenumberlist();
  if (_phonenumberlist_ == NULL) {
    _phonenumberlist_ = new ::MMPro::micromsg::PhoneNumberList;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ModContact._PhoneNumberList)
  return _phonenumberlist_;
}
::MMPro::micromsg::PhoneNumberList* ModContact::release__phonenumberlist() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ModContact._PhoneNumberList)
  clear_has__phonenumberlist();
  ::MMPro::micromsg::PhoneNumberList* temp = _phonenumberlist_;
  _phonenumberlist_ = NULL;
  return temp;
}
void ModContact::set_allocated__phonenumberlist(::MMPro::micromsg::PhoneNumberList* _phonenumberlist) {
  delete _phonenumberlist_;
  _phonenumberlist_ = _phonenumberlist;
  if (_phonenumberlist) {
    set_has__phonenumberlist();
  } else {
    clear_has__phonenumberlist();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ModContact._PhoneNumberList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
