// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoomMemberInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatRoomMemberInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class ChatRoomMemberInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMemberInfo> {
} _ChatRoomMemberInfo_default_instance_;

namespace protobuf_ChatRoomMemberInfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _displayname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _chatroommemberflag_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(ChatRoomMemberInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMemberInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ChatRoomMemberInfo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChatRoomMemberInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChatRoomMemberInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030ChatRoomMemberInfo.proto\022\016MMPro.microm"
      "sg\"\237\001\n\022ChatRoomMemberInfo\022\021\n\t_UserName\030\001"
      " \001(\t\022\021\n\t_NickName\030\002 \001(\t\022\024\n\014_DisplayName\030"
      "\003 \001(\t\022\026\n\016_BigHeadImgUrl\030\004 \001(\t\022\030\n\020_SmallH"
      "eadImgUrl\030\005 \001(\t\022\033\n\023_ChatroomMemberFlag\030\006"
      " \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatRoomMemberInfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ChatRoomMemberInfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMemberInfo::kUserNameFieldNumber;
const int ChatRoomMemberInfo::kNickNameFieldNumber;
const int ChatRoomMemberInfo::kDisplayNameFieldNumber;
const int ChatRoomMemberInfo::kBigHeadImgUrlFieldNumber;
const int ChatRoomMemberInfo::kSmallHeadImgUrlFieldNumber;
const int ChatRoomMemberInfo::kChatroomMemberFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMemberInfo::ChatRoomMemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoomMemberInfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.ChatRoomMemberInfo)
}
ChatRoomMemberInfo::ChatRoomMemberInfo(const ChatRoomMemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__username()) {
    _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
  }
  _nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__nickname()) {
    _nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._nickname_);
  }
  _displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__displayname()) {
    _displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._displayname_);
  }
  _bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__bigheadimgurl()) {
    _bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bigheadimgurl_);
  }
  _smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__smallheadimgurl()) {
    _smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._smallheadimgurl_);
  }
  _chatroommemberflag_ = from._chatroommemberflag_;
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.ChatRoomMemberInfo)
}

void ChatRoomMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  _username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _chatroommemberflag_ = 0u;
}

ChatRoomMemberInfo::~ChatRoomMemberInfo() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.ChatRoomMemberInfo)
  SharedDtor();
}

void ChatRoomMemberInfo::SharedDtor() {
  _username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _displayname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRoomMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMemberInfo::descriptor() {
  protobuf_ChatRoomMemberInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoomMemberInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMemberInfo& ChatRoomMemberInfo::default_instance() {
  protobuf_ChatRoomMemberInfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMemberInfo* ChatRoomMemberInfo::New(::google::protobuf::Arena* arena) const {
  ChatRoomMemberInfo* n = new ChatRoomMemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.ChatRoomMemberInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has__username()) {
      GOOGLE_DCHECK(!_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_username_.UnsafeRawStringPointer())->clear();
    }
    if (has__nickname()) {
      GOOGLE_DCHECK(!_nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has__displayname()) {
      GOOGLE_DCHECK(!_displayname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_displayname_.UnsafeRawStringPointer())->clear();
    }
    if (has__bigheadimgurl()) {
      GOOGLE_DCHECK(!_bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has__smallheadimgurl()) {
      GOOGLE_DCHECK(!_smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
  }
  _chatroommemberflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.ChatRoomMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string _UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_username().data(), this->_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ChatRoomMemberInfo._UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_nickname().data(), this->_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ChatRoomMemberInfo._NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _DisplayName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_displayname().data(), this->_displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ChatRoomMemberInfo._DisplayName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _BigHeadImgUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _SmallHeadImgUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _ChatroomMemberFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has__chatroommemberflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chatroommemberflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.ChatRoomMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.ChatRoomMemberInfo)
  return false;
#undef DO_
}

void ChatRoomMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.ChatRoomMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_username(), output);
  }

  // optional string _NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_nickname().data(), this->_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_nickname(), output);
  }

  // optional string _DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_displayname().data(), this->_displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._DisplayName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->_displayname(), output);
  }

  // optional string _BigHeadImgUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_bigheadimgurl(), output);
  }

  // optional string _SmallHeadImgUrl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->_smallheadimgurl(), output);
  }

  // required uint32 _ChatroomMemberFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_chatroommemberflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.ChatRoomMemberInfo)
}

::google::protobuf::uint8* ChatRoomMemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.ChatRoomMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string _UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_username().data(), this->_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_username(), target);
  }

  // optional string _NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_nickname().data(), this->_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_nickname(), target);
  }

  // optional string _DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_displayname().data(), this->_displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._DisplayName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_displayname(), target);
  }

  // optional string _BigHeadImgUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_bigheadimgurl().data(), this->_bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_bigheadimgurl(), target);
  }

  // optional string _SmallHeadImgUrl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_smallheadimgurl().data(), this->_smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_smallheadimgurl(), target);
  }

  // required uint32 _ChatroomMemberFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_chatroommemberflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.ChatRoomMemberInfo)
  return target;
}

size_t ChatRoomMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.ChatRoomMemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 _ChatroomMemberFlag = 6;
  if (has__chatroommemberflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_chatroommemberflag());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string _UserName = 1;
    if (has__username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_username());
    }

    // optional string _NickName = 2;
    if (has__nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_nickname());
    }

    // optional string _DisplayName = 3;
    if (has__displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_displayname());
    }

    // optional string _BigHeadImgUrl = 4;
    if (has__bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_bigheadimgurl());
    }

    // optional string _SmallHeadImgUrl = 5;
    if (has__smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_smallheadimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.ChatRoomMemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.ChatRoomMemberInfo)
    MergeFrom(*source);
  }
}

void ChatRoomMemberInfo::MergeFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__username();
      _username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__nickname();
      _nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has__displayname();
      _displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._displayname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has__bigheadimgurl();
      _bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has__smallheadimgurl();
      _smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000020u) {
      _chatroommemberflag_ = from._chatroommemberflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMemberInfo::CopyFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void ChatRoomMemberInfo::Swap(ChatRoomMemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMemberInfo::InternalSwap(ChatRoomMemberInfo* other) {
  _username_.Swap(&other->_username_);
  _nickname_.Swap(&other->_nickname_);
  _displayname_.Swap(&other->_displayname_);
  _bigheadimgurl_.Swap(&other->_bigheadimgurl_);
  _smallheadimgurl_.Swap(&other->_smallheadimgurl_);
  std::swap(_chatroommemberflag_, other->_chatroommemberflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMemberInfo::GetMetadata() const {
  protobuf_ChatRoomMemberInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoomMemberInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMemberInfo

// optional string _UserName = 1;
bool ChatRoomMemberInfo::has__username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMemberInfo::set_has__username() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMemberInfo::clear_has__username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMemberInfo::clear__username() {
  _username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__username();
}
const ::std::string& ChatRoomMemberInfo::_username() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._UserName)
  return _username_.GetNoArena();
}
void ChatRoomMemberInfo::set__username(const ::std::string& value) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._UserName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set__username(::std::string&& value) {
  set_has__username();
  _username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ChatRoomMemberInfo._UserName)
}
#endif
void ChatRoomMemberInfo::set__username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ChatRoomMemberInfo._UserName)
}
void ChatRoomMemberInfo::set__username(const char* value, size_t size) {
  set_has__username();
  _username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ChatRoomMemberInfo._UserName)
}
::std::string* ChatRoomMemberInfo::mutable__username() {
  set_has__username();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberInfo._UserName)
  return _username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release__username() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ChatRoomMemberInfo._UserName)
  clear_has__username();
  return _username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated__username(::std::string* _username) {
  if (_username != NULL) {
    set_has__username();
  } else {
    clear_has__username();
  }
  _username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _username);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ChatRoomMemberInfo._UserName)
}

// optional string _NickName = 2;
bool ChatRoomMemberInfo::has__nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMemberInfo::set_has__nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMemberInfo::clear_has__nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMemberInfo::clear__nickname() {
  _nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__nickname();
}
const ::std::string& ChatRoomMemberInfo::_nickname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._NickName)
  return _nickname_.GetNoArena();
}
void ChatRoomMemberInfo::set__nickname(const ::std::string& value) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._NickName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set__nickname(::std::string&& value) {
  set_has__nickname();
  _nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ChatRoomMemberInfo._NickName)
}
#endif
void ChatRoomMemberInfo::set__nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ChatRoomMemberInfo._NickName)
}
void ChatRoomMemberInfo::set__nickname(const char* value, size_t size) {
  set_has__nickname();
  _nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ChatRoomMemberInfo._NickName)
}
::std::string* ChatRoomMemberInfo::mutable__nickname() {
  set_has__nickname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberInfo._NickName)
  return _nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release__nickname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ChatRoomMemberInfo._NickName)
  clear_has__nickname();
  return _nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated__nickname(::std::string* _nickname) {
  if (_nickname != NULL) {
    set_has__nickname();
  } else {
    clear_has__nickname();
  }
  _nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _nickname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ChatRoomMemberInfo._NickName)
}

// optional string _DisplayName = 3;
bool ChatRoomMemberInfo::has__displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomMemberInfo::set_has__displayname() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomMemberInfo::clear_has__displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomMemberInfo::clear__displayname() {
  _displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__displayname();
}
const ::std::string& ChatRoomMemberInfo::_displayname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
  return _displayname_.GetNoArena();
}
void ChatRoomMemberInfo::set__displayname(const ::std::string& value) {
  set_has__displayname();
  _displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set__displayname(::std::string&& value) {
  set_has__displayname();
  _displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
}
#endif
void ChatRoomMemberInfo::set__displayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__displayname();
  _displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
}
void ChatRoomMemberInfo::set__displayname(const char* value, size_t size) {
  set_has__displayname();
  _displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
}
::std::string* ChatRoomMemberInfo::mutable__displayname() {
  set_has__displayname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
  return _displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release__displayname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
  clear_has__displayname();
  return _displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated__displayname(::std::string* _displayname) {
  if (_displayname != NULL) {
    set_has__displayname();
  } else {
    clear_has__displayname();
  }
  _displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _displayname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ChatRoomMemberInfo._DisplayName)
}

// optional string _BigHeadImgUrl = 4;
bool ChatRoomMemberInfo::has__bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomMemberInfo::set_has__bigheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomMemberInfo::clear_has__bigheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomMemberInfo::clear__bigheadimgurl() {
  _bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__bigheadimgurl();
}
const ::std::string& ChatRoomMemberInfo::_bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
  return _bigheadimgurl_.GetNoArena();
}
void ChatRoomMemberInfo::set__bigheadimgurl(const ::std::string& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set__bigheadimgurl(::std::string&& value) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
}
#endif
void ChatRoomMemberInfo::set__bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
}
void ChatRoomMemberInfo::set__bigheadimgurl(const char* value, size_t size) {
  set_has__bigheadimgurl();
  _bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
}
::std::string* ChatRoomMemberInfo::mutable__bigheadimgurl() {
  set_has__bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
  return _bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release__bigheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
  clear_has__bigheadimgurl();
  return _bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated__bigheadimgurl(::std::string* _bigheadimgurl) {
  if (_bigheadimgurl != NULL) {
    set_has__bigheadimgurl();
  } else {
    clear_has__bigheadimgurl();
  }
  _bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ChatRoomMemberInfo._BigHeadImgUrl)
}

// optional string _SmallHeadImgUrl = 5;
bool ChatRoomMemberInfo::has__smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomMemberInfo::set_has__smallheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomMemberInfo::clear_has__smallheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomMemberInfo::clear__smallheadimgurl() {
  _smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__smallheadimgurl();
}
const ::std::string& ChatRoomMemberInfo::_smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
  return _smallheadimgurl_.GetNoArena();
}
void ChatRoomMemberInfo::set__smallheadimgurl(const ::std::string& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set__smallheadimgurl(::std::string&& value) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
}
#endif
void ChatRoomMemberInfo::set__smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
}
void ChatRoomMemberInfo::set__smallheadimgurl(const char* value, size_t size) {
  set_has__smallheadimgurl();
  _smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
}
::std::string* ChatRoomMemberInfo::mutable__smallheadimgurl() {
  set_has__smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
  return _smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release__smallheadimgurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
  clear_has__smallheadimgurl();
  return _smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated__smallheadimgurl(::std::string* _smallheadimgurl) {
  if (_smallheadimgurl != NULL) {
    set_has__smallheadimgurl();
  } else {
    clear_has__smallheadimgurl();
  }
  _smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.ChatRoomMemberInfo._SmallHeadImgUrl)
}

// required uint32 _ChatroomMemberFlag = 6;
bool ChatRoomMemberInfo::has__chatroommemberflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomMemberInfo::set_has__chatroommemberflag() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomMemberInfo::clear_has__chatroommemberflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomMemberInfo::clear__chatroommemberflag() {
  _chatroommemberflag_ = 0u;
  clear_has__chatroommemberflag();
}
::google::protobuf::uint32 ChatRoomMemberInfo::_chatroommemberflag() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.ChatRoomMemberInfo._ChatroomMemberFlag)
  return _chatroommemberflag_;
}
void ChatRoomMemberInfo::set__chatroommemberflag(::google::protobuf::uint32 value) {
  set_has__chatroommemberflag();
  _chatroommemberflag_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.ChatRoomMemberInfo._ChatroomMemberFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
