// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AddMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MMPro {
namespace micromsg {
class AddMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddMsg> {
} _AddMsg_default_instance_;

namespace protobuf_AddMsg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _imgstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _pushcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _newmsgid_),
  6,
  2,
  3,
  7,
  4,
  8,
  9,
  5,
  11,
  0,
  1,
  10,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 17, sizeof(AddMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AddMsg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _AddMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::MMPro::micromsg::protobuf_SKBuiltinString_5ft_2eproto::InitDefaults();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::InitDefaults();
  _AddMsg_default_instance_.DefaultConstruct();
  _AddMsg_default_instance_.get_mutable()->_fromusername_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->_tousername_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->_content_ = const_cast< ::MMPro::micromsg::SKBuiltinString_t*>(
      ::MMPro::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->_imgbuf_ = const_cast< ::MMPro::micromsg::SKBuiltinBuffer_t*>(
      ::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014AddMsg.proto\022\016MMPro.micromsg\032\027SKBuilti"
      "nString_t.proto\032\027SKBuiltinBuffer_t.proto"
      "\"\374\002\n\006AddMsg\022\016\n\006_MsgId\030\001 \002(\005\0228\n\r_FromUser"
      "Name\030\002 \002(\0132!.MMPro.micromsg.SKBuiltinStr"
      "ing_t\0226\n\013_ToUserName\030\003 \002(\0132!.MMPro.micro"
      "msg.SKBuiltinString_t\022\020\n\010_MsgType\030\004 \002(\005\022"
      "3\n\010_Content\030\005 \002(\0132!.MMPro.micromsg.SKBui"
      "ltinString_t\022\017\n\007_Status\030\006 \002(\r\022\022\n\n_ImgSta"
      "tus\030\007 \002(\r\0222\n\007_ImgBuf\030\010 \002(\0132!.MMPro.micro"
      "msg.SKBuiltinBuffer_t\022\023\n\013_CreateTime\030\t \002"
      "(\r\022\022\n\n_MsgSource\030\n \001(\t\022\024\n\014_PushContent\030\013"
      " \001(\t\022\021\n\t_NewMsgId\030\014 \001(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AddMsg.proto", &protobuf_RegisterTypes);
  ::MMPro::micromsg::protobuf_SKBuiltinString_5ft_2eproto::AddDescriptors();
  ::MMPro::micromsg::protobuf_SKBuiltinBuffer_5ft_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_AddMsg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddMsg::kMsgIdFieldNumber;
const int AddMsg::kFromUserNameFieldNumber;
const int AddMsg::kToUserNameFieldNumber;
const int AddMsg::kMsgTypeFieldNumber;
const int AddMsg::kContentFieldNumber;
const int AddMsg::kStatusFieldNumber;
const int AddMsg::kImgStatusFieldNumber;
const int AddMsg::kImgBufFieldNumber;
const int AddMsg::kCreateTimeFieldNumber;
const int AddMsg::kMsgSourceFieldNumber;
const int AddMsg::kPushContentFieldNumber;
const int AddMsg::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddMsg::AddMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AddMsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMPro.micromsg.AddMsg)
}
AddMsg::AddMsg(const AddMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__msgsource()) {
    _msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._msgsource_);
  }
  _pushcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__pushcontent()) {
    _pushcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._pushcontent_);
  }
  if (from.has__fromusername()) {
    _fromusername_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._fromusername_);
  } else {
    _fromusername_ = NULL;
  }
  if (from.has__tousername()) {
    _tousername_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._tousername_);
  } else {
    _tousername_ = NULL;
  }
  if (from.has__content()) {
    _content_ = new ::MMPro::micromsg::SKBuiltinString_t(*from._content_);
  } else {
    _content_ = NULL;
  }
  if (from.has__imgbuf()) {
    _imgbuf_ = new ::MMPro::micromsg::SKBuiltinBuffer_t(*from._imgbuf_);
  } else {
    _imgbuf_ = NULL;
  }
  ::memcpy(&_msgid_, &from._msgid_,
    reinterpret_cast<char*>(&_createtime_) -
    reinterpret_cast<char*>(&_msgid_) + sizeof(_createtime_));
  // @@protoc_insertion_point(copy_constructor:MMPro.micromsg.AddMsg)
}

void AddMsg::SharedCtor() {
  _cached_size_ = 0;
  _msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _pushcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&_fromusername_, 0, reinterpret_cast<char*>(&_createtime_) -
    reinterpret_cast<char*>(&_fromusername_) + sizeof(_createtime_));
}

AddMsg::~AddMsg() {
  // @@protoc_insertion_point(destructor:MMPro.micromsg.AddMsg)
  SharedDtor();
}

void AddMsg::SharedDtor() {
  _msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _pushcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete _fromusername_;
  }
  if (this != internal_default_instance()) {
    delete _tousername_;
  }
  if (this != internal_default_instance()) {
    delete _content_;
  }
  if (this != internal_default_instance()) {
    delete _imgbuf_;
  }
}

void AddMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMsg::descriptor() {
  protobuf_AddMsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AddMsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddMsg& AddMsg::default_instance() {
  protobuf_AddMsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddMsg* AddMsg::New(::google::protobuf::Arena* arena) const {
  AddMsg* n = new AddMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MMPro.micromsg.AddMsg)
  if (_has_bits_[0 / 32] & 63u) {
    if (has__msgsource()) {
      GOOGLE_DCHECK(!_msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has__pushcontent()) {
      GOOGLE_DCHECK(!_pushcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_pushcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has__fromusername()) {
      GOOGLE_DCHECK(_fromusername_ != NULL);
      _fromusername_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__tousername()) {
      GOOGLE_DCHECK(_tousername_ != NULL);
      _tousername_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__content()) {
      GOOGLE_DCHECK(_content_ != NULL);
      _content_->::MMPro::micromsg::SKBuiltinString_t::Clear();
    }
    if (has__imgbuf()) {
      GOOGLE_DCHECK(_imgbuf_ != NULL);
      _imgbuf_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&_msgid_, 0, reinterpret_cast<char*>(&_msgtype_) -
      reinterpret_cast<char*>(&_msgid_) + sizeof(_msgtype_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&_status_, 0, reinterpret_cast<char*>(&_createtime_) -
      reinterpret_cast<char*>(&_status_) + sizeof(_createtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMPro.micromsg.AddMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 _MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has__msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 _MsgType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has__msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _Status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has__status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _ImgStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has__imgstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_imgstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 _CreateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has__createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _MsgSource = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_msgsource().data(), this->_msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.AddMsg._MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string _PushContent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__pushcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_pushcontent().data(), this->_pushcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MMPro.micromsg.AddMsg._PushContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 _NewMsgId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has__newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &_newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMPro.micromsg.AddMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMPro.micromsg.AddMsg)
  return false;
#undef DO_
}

void AddMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMPro.micromsg.AddMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 _MsgId = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->_msgid(), output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->_fromusername_, output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->_tousername_, output);
  }

  // required int32 _MsgType = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->_msgtype(), output);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->_content_, output);
  }

  // required uint32 _Status = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_status(), output);
  }

  // required uint32 _ImgStatus = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->_imgstatus(), output);
  }

  // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->_imgbuf_, output);
  }

  // required uint32 _CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_createtime(), output);
  }

  // optional string _MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_msgsource().data(), this->_msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.AddMsg._MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->_msgsource(), output);
  }

  // optional string _PushContent = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_pushcontent().data(), this->_pushcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.AddMsg._PushContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->_pushcontent(), output);
  }

  // optional int64 _NewMsgId = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->_newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMPro.micromsg.AddMsg)
}

::google::protobuf::uint8* AddMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMPro.micromsg.AddMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 _MsgId = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->_msgid(), target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->_fromusername_, deterministic, target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->_tousername_, deterministic, target);
  }

  // required int32 _MsgType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->_msgtype(), target);
  }

  // required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->_content_, deterministic, target);
  }

  // required uint32 _Status = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_status(), target);
  }

  // required uint32 _ImgStatus = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->_imgstatus(), target);
  }

  // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->_imgbuf_, deterministic, target);
  }

  // required uint32 _CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_createtime(), target);
  }

  // optional string _MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_msgsource().data(), this->_msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.AddMsg._MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->_msgsource(), target);
  }

  // optional string _PushContent = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_pushcontent().data(), this->_pushcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MMPro.micromsg.AddMsg._PushContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->_pushcontent(), target);
  }

  // optional int64 _NewMsgId = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->_newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMPro.micromsg.AddMsg)
  return target;
}

size_t AddMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMPro.micromsg.AddMsg)
  size_t total_size = 0;

  if (has__fromusername()) {
    // required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_fromusername_);
  }

  if (has__tousername()) {
    // required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_tousername_);
  }

  if (has__content()) {
    // required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_content_);
  }

  if (has__imgbuf()) {
    // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_imgbuf_);
  }

  if (has__msgid()) {
    // required int32 _MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_msgid());
  }

  if (has__msgtype()) {
    // required int32 _MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_msgtype());
  }

  if (has__status()) {
    // required uint32 _Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_status());
  }

  if (has__imgstatus()) {
    // required uint32 _ImgStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_imgstatus());
  }

  if (has__createtime()) {
    // required uint32 _CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_createtime());
  }

  return total_size;
}
size_t AddMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMPro.micromsg.AddMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000bfc) ^ 0x00000bfc) == 0) {  // All required fields are present.
    // required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_fromusername_);

    // required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_tousername_);

    // required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_content_);

    // required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_imgbuf_);

    // required int32 _MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_msgid());

    // required int32 _MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->_msgtype());

    // required uint32 _Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_status());

    // required uint32 _ImgStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_imgstatus());

    // required uint32 _CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->_createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string _MsgSource = 10;
    if (has__msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_msgsource());
    }

    // optional string _PushContent = 11;
    if (has__pushcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_pushcontent());
    }

  }
  // optional int64 _NewMsgId = 12;
  if (has__newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->_newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMPro.micromsg.AddMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AddMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMPro.micromsg.AddMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMPro.micromsg.AddMsg)
    MergeFrom(*source);
  }
}

void AddMsg::MergeFrom(const AddMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMPro.micromsg.AddMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__msgsource();
      _msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._msgsource_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__pushcontent();
      _pushcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._pushcontent_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable__fromusername()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._fromusername());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable__tousername()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._tousername());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable__content()->::MMPro::micromsg::SKBuiltinString_t::MergeFrom(from._content());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable__imgbuf()->::MMPro::micromsg::SKBuiltinBuffer_t::MergeFrom(from._imgbuf());
    }
    if (cached_has_bits & 0x00000040u) {
      _msgid_ = from._msgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _msgtype_ = from._msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      _status_ = from._status_;
    }
    if (cached_has_bits & 0x00000200u) {
      _imgstatus_ = from._imgstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      _newmsgid_ = from._newmsgid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _createtime_ = from._createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMPro.micromsg.AddMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMsg::CopyFrom(const AddMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMPro.micromsg.AddMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bfc) != 0x00000bfc) return false;
  if (has__imgbuf()) {
    if (!this->_imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void AddMsg::Swap(AddMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddMsg::InternalSwap(AddMsg* other) {
  _msgsource_.Swap(&other->_msgsource_);
  _pushcontent_.Swap(&other->_pushcontent_);
  std::swap(_fromusername_, other->_fromusername_);
  std::swap(_tousername_, other->_tousername_);
  std::swap(_content_, other->_content_);
  std::swap(_imgbuf_, other->_imgbuf_);
  std::swap(_msgid_, other->_msgid_);
  std::swap(_msgtype_, other->_msgtype_);
  std::swap(_status_, other->_status_);
  std::swap(_imgstatus_, other->_imgstatus_);
  std::swap(_newmsgid_, other->_newmsgid_);
  std::swap(_createtime_, other->_createtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddMsg::GetMetadata() const {
  protobuf_AddMsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AddMsg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddMsg

// required int32 _MsgId = 1;
bool AddMsg::has__msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AddMsg::set_has__msgid() {
  _has_bits_[0] |= 0x00000040u;
}
void AddMsg::clear_has__msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void AddMsg::clear__msgid() {
  _msgid_ = 0;
  clear_has__msgid();
}
::google::protobuf::int32 AddMsg::_msgid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._MsgId)
  return _msgid_;
}
void AddMsg::set__msgid(::google::protobuf::int32 value) {
  set_has__msgid();
  _msgid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._MsgId)
}

// required .MMPro.micromsg.SKBuiltinString_t _FromUserName = 2;
bool AddMsg::has__fromusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddMsg::set_has__fromusername() {
  _has_bits_[0] |= 0x00000004u;
}
void AddMsg::clear_has__fromusername() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddMsg::clear__fromusername() {
  if (_fromusername_ != NULL) _fromusername_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__fromusername();
}
const ::MMPro::micromsg::SKBuiltinString_t& AddMsg::_fromusername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._FromUserName)
  return _fromusername_ != NULL ? *_fromusername_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::mutable__fromusername() {
  set_has__fromusername();
  if (_fromusername_ == NULL) {
    _fromusername_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._FromUserName)
  return _fromusername_;
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::release__fromusername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._FromUserName)
  clear_has__fromusername();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _fromusername_;
  _fromusername_ = NULL;
  return temp;
}
void AddMsg::set_allocated__fromusername(::MMPro::micromsg::SKBuiltinString_t* _fromusername) {
  delete _fromusername_;
  _fromusername_ = _fromusername;
  if (_fromusername) {
    set_has__fromusername();
  } else {
    clear_has__fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._FromUserName)
}

// required .MMPro.micromsg.SKBuiltinString_t _ToUserName = 3;
bool AddMsg::has__tousername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddMsg::set_has__tousername() {
  _has_bits_[0] |= 0x00000008u;
}
void AddMsg::clear_has__tousername() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddMsg::clear__tousername() {
  if (_tousername_ != NULL) _tousername_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__tousername();
}
const ::MMPro::micromsg::SKBuiltinString_t& AddMsg::_tousername() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._ToUserName)
  return _tousername_ != NULL ? *_tousername_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::mutable__tousername() {
  set_has__tousername();
  if (_tousername_ == NULL) {
    _tousername_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._ToUserName)
  return _tousername_;
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::release__tousername() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._ToUserName)
  clear_has__tousername();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _tousername_;
  _tousername_ = NULL;
  return temp;
}
void AddMsg::set_allocated__tousername(::MMPro::micromsg::SKBuiltinString_t* _tousername) {
  delete _tousername_;
  _tousername_ = _tousername;
  if (_tousername) {
    set_has__tousername();
  } else {
    clear_has__tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._ToUserName)
}

// required int32 _MsgType = 4;
bool AddMsg::has__msgtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AddMsg::set_has__msgtype() {
  _has_bits_[0] |= 0x00000080u;
}
void AddMsg::clear_has__msgtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void AddMsg::clear__msgtype() {
  _msgtype_ = 0;
  clear_has__msgtype();
}
::google::protobuf::int32 AddMsg::_msgtype() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._MsgType)
  return _msgtype_;
}
void AddMsg::set__msgtype(::google::protobuf::int32 value) {
  set_has__msgtype();
  _msgtype_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._MsgType)
}

// required .MMPro.micromsg.SKBuiltinString_t _Content = 5;
bool AddMsg::has__content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddMsg::set_has__content() {
  _has_bits_[0] |= 0x00000010u;
}
void AddMsg::clear_has__content() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddMsg::clear__content() {
  if (_content_ != NULL) _content_->::MMPro::micromsg::SKBuiltinString_t::Clear();
  clear_has__content();
}
const ::MMPro::micromsg::SKBuiltinString_t& AddMsg::_content() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._Content)
  return _content_ != NULL ? *_content_
                         : *::MMPro::micromsg::SKBuiltinString_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::mutable__content() {
  set_has__content();
  if (_content_ == NULL) {
    _content_ = new ::MMPro::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._Content)
  return _content_;
}
::MMPro::micromsg::SKBuiltinString_t* AddMsg::release__content() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._Content)
  clear_has__content();
  ::MMPro::micromsg::SKBuiltinString_t* temp = _content_;
  _content_ = NULL;
  return temp;
}
void AddMsg::set_allocated__content(::MMPro::micromsg::SKBuiltinString_t* _content) {
  delete _content_;
  _content_ = _content;
  if (_content) {
    set_has__content();
  } else {
    clear_has__content();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._Content)
}

// required uint32 _Status = 6;
bool AddMsg::has__status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AddMsg::set_has__status() {
  _has_bits_[0] |= 0x00000100u;
}
void AddMsg::clear_has__status() {
  _has_bits_[0] &= ~0x00000100u;
}
void AddMsg::clear__status() {
  _status_ = 0u;
  clear_has__status();
}
::google::protobuf::uint32 AddMsg::_status() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._Status)
  return _status_;
}
void AddMsg::set__status(::google::protobuf::uint32 value) {
  set_has__status();
  _status_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._Status)
}

// required uint32 _ImgStatus = 7;
bool AddMsg::has__imgstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AddMsg::set_has__imgstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void AddMsg::clear_has__imgstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void AddMsg::clear__imgstatus() {
  _imgstatus_ = 0u;
  clear_has__imgstatus();
}
::google::protobuf::uint32 AddMsg::_imgstatus() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._ImgStatus)
  return _imgstatus_;
}
void AddMsg::set__imgstatus(::google::protobuf::uint32 value) {
  set_has__imgstatus();
  _imgstatus_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._ImgStatus)
}

// required .MMPro.micromsg.SKBuiltinBuffer_t _ImgBuf = 8;
bool AddMsg::has__imgbuf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AddMsg::set_has__imgbuf() {
  _has_bits_[0] |= 0x00000020u;
}
void AddMsg::clear_has__imgbuf() {
  _has_bits_[0] &= ~0x00000020u;
}
void AddMsg::clear__imgbuf() {
  if (_imgbuf_ != NULL) _imgbuf_->::MMPro::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has__imgbuf();
}
const ::MMPro::micromsg::SKBuiltinBuffer_t& AddMsg::_imgbuf() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._ImgBuf)
  return _imgbuf_ != NULL ? *_imgbuf_
                         : *::MMPro::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::MMPro::micromsg::SKBuiltinBuffer_t* AddMsg::mutable__imgbuf() {
  set_has__imgbuf();
  if (_imgbuf_ == NULL) {
    _imgbuf_ = new ::MMPro::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._ImgBuf)
  return _imgbuf_;
}
::MMPro::micromsg::SKBuiltinBuffer_t* AddMsg::release__imgbuf() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._ImgBuf)
  clear_has__imgbuf();
  ::MMPro::micromsg::SKBuiltinBuffer_t* temp = _imgbuf_;
  _imgbuf_ = NULL;
  return temp;
}
void AddMsg::set_allocated__imgbuf(::MMPro::micromsg::SKBuiltinBuffer_t* _imgbuf) {
  delete _imgbuf_;
  _imgbuf_ = _imgbuf;
  if (_imgbuf) {
    set_has__imgbuf();
  } else {
    clear_has__imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._ImgBuf)
}

// required uint32 _CreateTime = 9;
bool AddMsg::has__createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AddMsg::set_has__createtime() {
  _has_bits_[0] |= 0x00000800u;
}
void AddMsg::clear_has__createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
void AddMsg::clear__createtime() {
  _createtime_ = 0u;
  clear_has__createtime();
}
::google::protobuf::uint32 AddMsg::_createtime() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._CreateTime)
  return _createtime_;
}
void AddMsg::set__createtime(::google::protobuf::uint32 value) {
  set_has__createtime();
  _createtime_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._CreateTime)
}

// optional string _MsgSource = 10;
bool AddMsg::has__msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddMsg::set_has__msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
void AddMsg::clear_has__msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddMsg::clear__msgsource() {
  _msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__msgsource();
}
const ::std::string& AddMsg::_msgsource() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._MsgSource)
  return _msgsource_.GetNoArena();
}
void AddMsg::set__msgsource(const ::std::string& value) {
  set_has__msgsource();
  _msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._MsgSource)
}
#if LANG_CXX11
void AddMsg::set__msgsource(::std::string&& value) {
  set_has__msgsource();
  _msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.AddMsg._MsgSource)
}
#endif
void AddMsg::set__msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__msgsource();
  _msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.AddMsg._MsgSource)
}
void AddMsg::set__msgsource(const char* value, size_t size) {
  set_has__msgsource();
  _msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.AddMsg._MsgSource)
}
::std::string* AddMsg::mutable__msgsource() {
  set_has__msgsource();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._MsgSource)
  return _msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddMsg::release__msgsource() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._MsgSource)
  clear_has__msgsource();
  return _msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddMsg::set_allocated__msgsource(::std::string* _msgsource) {
  if (_msgsource != NULL) {
    set_has__msgsource();
  } else {
    clear_has__msgsource();
  }
  _msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _msgsource);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._MsgSource)
}

// optional string _PushContent = 11;
bool AddMsg::has__pushcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddMsg::set_has__pushcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void AddMsg::clear_has__pushcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddMsg::clear__pushcontent() {
  _pushcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__pushcontent();
}
const ::std::string& AddMsg::_pushcontent() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._PushContent)
  return _pushcontent_.GetNoArena();
}
void AddMsg::set__pushcontent(const ::std::string& value) {
  set_has__pushcontent();
  _pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._PushContent)
}
#if LANG_CXX11
void AddMsg::set__pushcontent(::std::string&& value) {
  set_has__pushcontent();
  _pushcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.AddMsg._PushContent)
}
#endif
void AddMsg::set__pushcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__pushcontent();
  _pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.AddMsg._PushContent)
}
void AddMsg::set__pushcontent(const char* value, size_t size) {
  set_has__pushcontent();
  _pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.AddMsg._PushContent)
}
::std::string* AddMsg::mutable__pushcontent() {
  set_has__pushcontent();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.AddMsg._PushContent)
  return _pushcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddMsg::release__pushcontent() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.AddMsg._PushContent)
  clear_has__pushcontent();
  return _pushcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddMsg::set_allocated__pushcontent(::std::string* _pushcontent) {
  if (_pushcontent != NULL) {
    set_has__pushcontent();
  } else {
    clear_has__pushcontent();
  }
  _pushcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _pushcontent);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.AddMsg._PushContent)
}

// optional int64 _NewMsgId = 12;
bool AddMsg::has__newmsgid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AddMsg::set_has__newmsgid() {
  _has_bits_[0] |= 0x00000400u;
}
void AddMsg::clear_has__newmsgid() {
  _has_bits_[0] &= ~0x00000400u;
}
void AddMsg::clear__newmsgid() {
  _newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has__newmsgid();
}
::google::protobuf::int64 AddMsg::_newmsgid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.AddMsg._NewMsgId)
  return _newmsgid_;
}
void AddMsg::set__newmsgid(::google::protobuf::int64 value) {
  set_has__newmsgid();
  _newmsgid_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.AddMsg._NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)
