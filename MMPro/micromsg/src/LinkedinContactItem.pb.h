// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkedinContactItem.proto

#ifndef PROTOBUF_LinkedinContactItem_2eproto__INCLUDED
#define PROTOBUF_LinkedinContactItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_LinkedinContactItem_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_LinkedinContactItem_2eproto

// ===================================================================

class LinkedinContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.LinkedinContactItem) */ {
 public:
  LinkedinContactItem();
  virtual ~LinkedinContactItem();

  LinkedinContactItem(const LinkedinContactItem& from);

  inline LinkedinContactItem& operator=(const LinkedinContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkedinContactItem& default_instance();

  static inline const LinkedinContactItem* internal_default_instance() {
    return reinterpret_cast<const LinkedinContactItem*>(
               &_LinkedinContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LinkedinContactItem* other);

  // implements Message ----------------------------------------------

  inline LinkedinContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkedinContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkedinContactItem& from);
  void MergeFrom(const LinkedinContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkedinContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string _LinkedinName = 1;
  bool has__linkedinname() const;
  void clear__linkedinname();
  static const int kLinkedinNameFieldNumber = 1;
  const ::std::string& _linkedinname() const;
  void set__linkedinname(const ::std::string& value);
  #if LANG_CXX11
  void set__linkedinname(::std::string&& value);
  #endif
  void set__linkedinname(const char* value);
  void set__linkedinname(const char* value, size_t size);
  ::std::string* mutable__linkedinname();
  ::std::string* release__linkedinname();
  void set_allocated__linkedinname(::std::string* _linkedinname);

  // optional string _LinkedinMemberID = 2;
  bool has__linkedinmemberid() const;
  void clear__linkedinmemberid();
  static const int kLinkedinMemberIDFieldNumber = 2;
  const ::std::string& _linkedinmemberid() const;
  void set__linkedinmemberid(const ::std::string& value);
  #if LANG_CXX11
  void set__linkedinmemberid(::std::string&& value);
  #endif
  void set__linkedinmemberid(const char* value);
  void set__linkedinmemberid(const char* value, size_t size);
  ::std::string* mutable__linkedinmemberid();
  ::std::string* release__linkedinmemberid();
  void set_allocated__linkedinmemberid(::std::string* _linkedinmemberid);

  // optional string _LinkedinPublicUrl = 3;
  bool has__linkedinpublicurl() const;
  void clear__linkedinpublicurl();
  static const int kLinkedinPublicUrlFieldNumber = 3;
  const ::std::string& _linkedinpublicurl() const;
  void set__linkedinpublicurl(const ::std::string& value);
  #if LANG_CXX11
  void set__linkedinpublicurl(::std::string&& value);
  #endif
  void set__linkedinpublicurl(const char* value);
  void set__linkedinpublicurl(const char* value, size_t size);
  ::std::string* mutable__linkedinpublicurl();
  ::std::string* release__linkedinpublicurl();
  void set_allocated__linkedinpublicurl(::std::string* _linkedinpublicurl);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.LinkedinContactItem)
 private:
  void set_has__linkedinname();
  void clear_has__linkedinname();
  void set_has__linkedinmemberid();
  void clear_has__linkedinmemberid();
  void set_has__linkedinpublicurl();
  void clear_has__linkedinpublicurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr _linkedinname_;
  ::google::protobuf::internal::ArenaStringPtr _linkedinmemberid_;
  ::google::protobuf::internal::ArenaStringPtr _linkedinpublicurl_;
  friend struct protobuf_LinkedinContactItem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkedinContactItem

// optional string _LinkedinName = 1;
inline bool LinkedinContactItem::has__linkedinname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkedinContactItem::set_has__linkedinname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkedinContactItem::clear_has__linkedinname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkedinContactItem::clear__linkedinname() {
  _linkedinname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__linkedinname();
}
inline const ::std::string& LinkedinContactItem::_linkedinname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.LinkedinContactItem._LinkedinName)
  return _linkedinname_.GetNoArena();
}
inline void LinkedinContactItem::set__linkedinname(const ::std::string& value) {
  set_has__linkedinname();
  _linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.LinkedinContactItem._LinkedinName)
}
#if LANG_CXX11
inline void LinkedinContactItem::set__linkedinname(::std::string&& value) {
  set_has__linkedinname();
  _linkedinname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.LinkedinContactItem._LinkedinName)
}
#endif
inline void LinkedinContactItem::set__linkedinname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__linkedinname();
  _linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.LinkedinContactItem._LinkedinName)
}
inline void LinkedinContactItem::set__linkedinname(const char* value, size_t size) {
  set_has__linkedinname();
  _linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.LinkedinContactItem._LinkedinName)
}
inline ::std::string* LinkedinContactItem::mutable__linkedinname() {
  set_has__linkedinname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.LinkedinContactItem._LinkedinName)
  return _linkedinname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release__linkedinname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.LinkedinContactItem._LinkedinName)
  clear_has__linkedinname();
  return _linkedinname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated__linkedinname(::std::string* _linkedinname) {
  if (_linkedinname != NULL) {
    set_has__linkedinname();
  } else {
    clear_has__linkedinname();
  }
  _linkedinname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _linkedinname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.LinkedinContactItem._LinkedinName)
}

// optional string _LinkedinMemberID = 2;
inline bool LinkedinContactItem::has__linkedinmemberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkedinContactItem::set_has__linkedinmemberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkedinContactItem::clear_has__linkedinmemberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkedinContactItem::clear__linkedinmemberid() {
  _linkedinmemberid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__linkedinmemberid();
}
inline const ::std::string& LinkedinContactItem::_linkedinmemberid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
  return _linkedinmemberid_.GetNoArena();
}
inline void LinkedinContactItem::set__linkedinmemberid(const ::std::string& value) {
  set_has__linkedinmemberid();
  _linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
}
#if LANG_CXX11
inline void LinkedinContactItem::set__linkedinmemberid(::std::string&& value) {
  set_has__linkedinmemberid();
  _linkedinmemberid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
}
#endif
inline void LinkedinContactItem::set__linkedinmemberid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__linkedinmemberid();
  _linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
}
inline void LinkedinContactItem::set__linkedinmemberid(const char* value, size_t size) {
  set_has__linkedinmemberid();
  _linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
}
inline ::std::string* LinkedinContactItem::mutable__linkedinmemberid() {
  set_has__linkedinmemberid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
  return _linkedinmemberid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release__linkedinmemberid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
  clear_has__linkedinmemberid();
  return _linkedinmemberid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated__linkedinmemberid(::std::string* _linkedinmemberid) {
  if (_linkedinmemberid != NULL) {
    set_has__linkedinmemberid();
  } else {
    clear_has__linkedinmemberid();
  }
  _linkedinmemberid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _linkedinmemberid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.LinkedinContactItem._LinkedinMemberID)
}

// optional string _LinkedinPublicUrl = 3;
inline bool LinkedinContactItem::has__linkedinpublicurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinkedinContactItem::set_has__linkedinpublicurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinkedinContactItem::clear_has__linkedinpublicurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinkedinContactItem::clear__linkedinpublicurl() {
  _linkedinpublicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__linkedinpublicurl();
}
inline const ::std::string& LinkedinContactItem::_linkedinpublicurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
  return _linkedinpublicurl_.GetNoArena();
}
inline void LinkedinContactItem::set__linkedinpublicurl(const ::std::string& value) {
  set_has__linkedinpublicurl();
  _linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
}
#if LANG_CXX11
inline void LinkedinContactItem::set__linkedinpublicurl(::std::string&& value) {
  set_has__linkedinpublicurl();
  _linkedinpublicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
}
#endif
inline void LinkedinContactItem::set__linkedinpublicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__linkedinpublicurl();
  _linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
}
inline void LinkedinContactItem::set__linkedinpublicurl(const char* value, size_t size) {
  set_has__linkedinpublicurl();
  _linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
}
inline ::std::string* LinkedinContactItem::mutable__linkedinpublicurl() {
  set_has__linkedinpublicurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
  return _linkedinpublicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release__linkedinpublicurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
  clear_has__linkedinpublicurl();
  return _linkedinpublicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated__linkedinpublicurl(::std::string* _linkedinpublicurl) {
  if (_linkedinpublicurl != NULL) {
    set_has__linkedinpublicurl();
  } else {
    clear_has__linkedinpublicurl();
  }
  _linkedinpublicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _linkedinpublicurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.LinkedinContactItem._LinkedinPublicUrl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LinkedinContactItem_2eproto__INCLUDED
